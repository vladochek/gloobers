<?php
define('WELCOME_EMAIL_ID', 'welcome@gloobers.com');
define('SUPPORT_EMAIL_ID', 'support@gloobers.com');
function users_menu() {
	$items = array();
	
	$items['user/register'] = array(
	'page callback' => 'user_register',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	
	$items['register'] = array(
	'page callback' => 'user_register',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	$items['login'] = array(
		'page callback' => 'user_custom_login',
		'access callback' => TRUE,
		'type' => MENU_NORMAL_ITEM,
	);
	$items['user/edit'] = array(
		'page callback' => "user_edit_profile", 
		'access callback' => true, 
		'type' => MENU_NORMAL_ITEM, 
		'weight' => '11', 
	);
	$items['privacy'] = array(
	'title' => 'Privacy Policies',
	'page callback' => 'privacy',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	); 
	$items['profile/view/%'] = array(
	'title' => 'User Profile View',
	'page callback' => 'user_profile_viewById',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	); 
	
	$items['user/profile'] = array(

	'page callback' => 'user_profile_view',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	$items['user/changepassword'] = array(
	'page callback' => 'user_change_password',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	$items['user/password'] = array(
	'page callback' => 'user_request_password',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	
	$items['user/change-password'] = array(
	  'title' => t('Change password'),
	  'description' => t('You can change your password here.'),
	  'page callback' => 'change_password',
	  'access arguments' => array('access content'),
	);
	
	$items['invite'] = array(
	'page callback' => 'invite_people',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	); 
	
	$items['send/invitation'] = array(
	'page callback' => 'send_invitation',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	); 

	$items['myprofile'] = array(
	'page callback' => 'my_profile',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	); 
	$items['mypasttrips'] = array(
	'page callback' => 'my_past_trips',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	); 
	$items['ajax/login']= array(
	'page callback' => 'ajaxlogin',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
	);
	$items['ajax/register']= array(
	'page callback' => 'ajax_register',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
	);
	$items['submit/register']= array(
	'page callback' => 'user_submit_form_register',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
	);
	//17March
	$items['passionviews']= array(
	'page callback' => 'passionView',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
	);
	
	//18march_2015
	$items['profile/%'] = array(
	'page callback' => 'user_dashboard',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	); 
	
	$items['dashboard'] = array(
	'page callback' => 'my_dashboard_data',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);

	$items['whorecommended'] = array(
	'title' => 'whorecommended',
	'page callback' => 'whorecommended',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	/* 16-June-2015 STEPS1toStep5 */
	
	$items['user/confirm'] = array(
	//'title' => 'Confirm User',
	'page callback' => 'Confirm_user',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	$items['user/step2'] = array(
	
	'page callback' => 'about_yourself',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);

	$items['user/step3'] = array(
	'page callback' => 'add_passeport',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	$items['user/step4'] = array(
	'page callback' => 'add_user_passion',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	$items['user/step5'] = array(
	'page callback' => 'add_invitation_link',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	$items['ajax/user/addpasseport'] = array(
	'page callback' => 'add_user_passeport',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	$items['ajax/user/deletepasseport'] = array(
	'page callback' => 'del_user_passeport',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	$items['ajax/user/getpasseport'] = array(
	'page callback' => 'get_user_passeport',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	/* 2July2015 */
	$items['ajax/user/hometown'] = array(
	'page callback' => 'add_user_hometown',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	$items['ajax/user/occupation'] = array(
	'page callback' => 'add_user_occupation',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	$items['ajax/user/language'] = array(
	'page callback' => 'add_user_language',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	$items['user_profile'] = array(
	'page callback' => 'user_profile_section',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	$items['ajax/user/update_basic_info'] = array(
	'page callback' => 'update_basic_info',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	$items['ajax/user/update_Dp'] = array(
	'page callback' => 'updateDp',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	$items['user/editpassions'] = array(
	'page callback' => 'edit_user_passion',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	$items['ajax/user/deletelanguage'] = array(
	'page callback' => 'delete_user_language',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	
	$items['user/search'] = array(
	'page callback' => 'user_search',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	
	$items['user/account_settings'] = array(
	'page callback' => 'account_settings',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	$items['user/payout_preference'] = array(
	'page callback' => 'user_payout_preference',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	
	$items['user/transaction_history'] = array(
	'page callback' => 'user_transaction_history',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	/* RecommendLINK */
	$items['recommend_link'] = array(
	'page callback' => 'user_recommend_link',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	
	$items['generate_link'] = array(
	'page callback' => 'generate_link',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	$items['test_func'] = array(
	'page callback' => 'test_ip',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	$items['geoip'] = array(
	'page callback' => 'geoip',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);

	$items['ajax/user/add_phone_number'] = array(
	'page callback' => 'add_phone_number',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);
	$items['user/advisor_sharing'] = array(
	'page callback' => 'advisor_sharing',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);	
	//Reset link
	$items['reset_link'] = array(
	'page callback' => 'user_reset_link',
	'access callback' => TRUE,
	'type' => MENU_NORMAL_ITEM,
	);	
	/* End RecommendLINK */
	return $items;
}
function user_register() {
	global $user,$base_url;
	if(!$user->uid){
		$user_register_form = drupal_get_form('user_register_form');
		return theme( 'user_register', array( 'user_register_form' => $user_register_form ) );
	}else{
		drupal_goto();
	}	
}
function user_submit_form_register(){
	global $base_url;
	$email=trim(check_plain($_POST['mail']));
	$pass=trim(check_plain($_POST['pass']['pass1']));
	$firstname=trim(check_plain($_POST['field_first_name']['und'][0]['value']));	
	$lastname=trim(check_plain($_POST['field_last_name']['und'][0]['value']));
	$account = isset($form['#user']) ? $form['#user'] : (object) array('uid' => 0);
	  if ($account->uid == 0) {
		$account->roles = array(DRUPAL_AUTHENTICATED_RID => DRUPAL_AUTHENTICATED_RID);
	  }
	  if (isset($values['name'])) {
		$account->name = $values['name'];
	  }
	//$errPass=_password_policy_constraint_validate($pass,$account);
	$errPass='';
	if($errPass){
		drupal_goto('register');
	}
	
	//check with email user already register
	$user_Details=user_load_by_mail($email);
	
	if($user_Details)
	{
	drupal_goto('register');
	//user already exist	
	//$response['failure']='Err_already_exist';
	
		//form_set_error('email', 'Email alredy exists.');
		//return false;
	}else if($errPass){
	drupal_goto('register');
		$response['failure_pass']=$str_err;
		form_set_error('email', $str_err);
		return false;
		
	}else{	
	//drupal_goto('user/confirm');
	//generate unique username	
		$userName=explode("@",$email);
		$user_unique=$userName[0];
		//If already username  Exist		
		   $isUserExists = false;
		   do{
			   $user_unique = $user_unique.rand(0,9999);
			   $loadUserByName=user_load_by_name($user_unique);
			   if($loadUserByName)
			   {						
				  $isUserExists = true; 
			   }
			   else{				   
				   $isUserExists = false;
			   }
		   }while($isUserExists);
		   //save user in database; 
	   
		if($user_unique)
		{ 		
		  $fields = array(
				'name' => $user_unique,
				'mail' => $email,
				'pass' => $pass,
				'status' => 1,
				'init' => $email,
				'roles' => array(
				  DRUPAL_AUTHENTICATED_RID => 'authenticated user',
				),
			);
		$account = user_save('', $fields);
		$account->password = $fields['pass'];
		$variable_Random=generateRandomString(10);
		$verified_link=$base_url.'/user/confirm?confirmId='.$variable_Random;
		$to = $email;
		$title	=	'Welcome email';
		$body=            '<p style="text-align:left">Thanks '.$firstname.' for signing up and joining the tribe. We are happy to welcome you. Before we get to know a bit better, please confirm your email.<p><p style="text-align:left"><a href="#" style="color:#139ABC;text-decoration:none;" target="_blank">
		<p style="text-align:left"><a href="'.$verified_link.'" style="color:#139ABC;text-decoration:none;" target="_blank">Click here to confirm your email</a></p>
		</a>  </p>';	
		$module			=	'users';
		$key			=	'New register user';
		$to_email       =   $to;
		$subject		=	'Welcome in the tribe';		
		sendWelcomeEmail($module,$key,$to_email,$subject,$title,$body);
		if($account)
		{
				 //Login user after register 
				  if ($uid = user_authenticate($user_unique, $pass)) {
					  $form_state['uid'] = $uid;
					    /*********************Recommended user Data****************/
						$referId=trim(check_plain($_POST['refer']));
						$refered_uid=trim(check_plain($_POST['uid']));
						$refered_uid_decoded=base64_decode($refered_uid);
						//echo $refered_uid.'PPPPPPPPPPPPPPPPPPPPP'.$refered_uid_decoded;exit;
						$recomend_link=$base_url.'/recommend_link?refer='.$referId.'&ruid='.$refered_uid;
					
						if(($referId != '0') && ($refered_uid != '0')){
							
							//echo $refered_uid_encoded;
							$query_exists = db_select("gbl_recommend_link",'fu')
											->fields('fu')
											->condition('recommned_link',$recomend_link)
											->condition('uid',$refered_uid_decoded);
							$result_exist = $query_exists->execute();
							$result_exists_count = $result_exist->rowCount();
							
							if($result_exists_count===1){
								$recommend_user_add = db_insert("gbl_recommend_link_users")->fields(array('link_accept_person_uid'=>$uid,'recommend_link'=>$recomend_link,'link_share_person_uid'=>$refered_uid_decoded,'created'=>time()));
								$recommend_user_add_result = $recommend_user_add->execute();
								
								$query_Credits_check = db_select("gbl_credit_user",'cu')
												->fields('cu')
												->condition('uid',$refered_uid_decoded);
								$result_exist_check = $query_Credits_check->execute();
								$result_exists_count_check = $result_exist_check->fetchAll(PDO::FETCH_ASSOC);
								//echo "<pre>";Print_r($result_exists_count_check[0]['credits']);exit;
								//echo variable_get('credit_value_per_signup_throught_recommendation_link');
								if(!empty($result_exists_count_check)){
									$credits=($result_exists_count_check[0]['credits']+variable_get('credit_value_per_signup_throught_recommendation_link'));
									$credits_earned=($result_exists_count_check[0]['credits_earned']+variable_get('credit_value_per_signup_throught_recommendation_link'));
									$recommend_user_update_credits = db_update("gbl_credit_user")
															->fields(array('credits'=>$credits,'credits_earned'=>$credits_earned,'modified'=>time()))
															->condition('uid',$refered_uid_decoded);
									$recommend_user_update_credits_result = $recommend_user_update_credits->execute();
								}else{
									$recommend_user_add_credits = db_insert("gbl_credit_user")
															->fields(array('uid'=>$refered_uid_decoded,'credits'=>$credits,'credits_earned'=>$credits_earned,'create'=>time()));
									$recommend_user_add_credits_result = $recommend_user_add_credits->execute();

								
								}
							}
						}
					  /*********************END Recommended user Data**************/
						$query = db_update("gbl_users_meta")
							->fields(array('first_name'=>$firstname,'last_name'=>$lastname,'confirmation_id'=>$variable_Random))
							->condition('uid',$uid);
						$result = $query->execute();
					$query_exists = db_select("field_data_field_first_name",'fu')->fields('fu')->condition('entity_id',$uid);
					$result_exist = $query_exists->execute();
					$result_exists_count = $result_exist->rowCount();
					if($result_exists_count ==1){
						$query2 = db_update("field_data_field_first_name")->fields(array('field_first_name_value'=>$firstname))->condition('entity_id',$uid);
						$result2 = $query2->execute();
						$query3 = db_update("field_revision_field_first_name")->fields(array('field_first_name_value'=>$firstname))->condition('entity_id',$uid);
						$result3 = $query3->execute();
					}else{
							
						$query2 = db_insert("field_data_field_first_name")->fields(array('entity_type'=>'user','bundle'=>'user','deleted'=>'0','entity_id'=>$uid,'revision_id'=>$uid,'language'=>'und','delta'=>'0','field_first_name_value'=>$firstname,'field_first_name_format'=>NULL));
						$result2 = $query2->execute();
						$query3 = db_insert("field_revision_field_first_name")->fields(array('entity_type'=>'user','bundle'=>'user','deleted'=>'0','entity_id'=>$uid,'revision_id'=>$uid,'language'=>'und','delta'=>'0','field_first_name_value'=>$firstname,'field_first_name_format'=>NULL));
						$result3 = $query3->execute();
					}
					$query_exists = db_select("field_data_field_last_name",'fu')->fields('fu')->condition('entity_id',$uid);
					$result_exist = $query_exists->execute();
					$result_exists_count = $result_exist->rowCount();
					if($result_exists_count ==1){
						$query2 = db_update("field_data_field_last_name")->fields(array('field_last_name_value'=>$lastname))->condition('entity_id',$uid);
						$result2 = $query2->execute();
						$query3 = db_update("field_revision_field_last_name")->fields(array('field_last_name_value'=>$lastname))->condition('entity_id',$uid);
						$result3 = $query3->execute();
					}else{

						$query2 = db_insert("field_data_field_last_name")->fields(array('entity_type'=>'user','bundle'=>'user','deleted'=>'0','entity_id'=>$uid,'revision_id'=>$uid,'language'=>'und','delta'=>'0','field_last_name_value'=>$lastname,'field_last_name_format'=>NULL));
						$result2 = $query2->execute();
						$query3 = db_insert("field_revision_field_last_name")->fields(array('entity_type'=>'user','bundle'=>'user','deleted'=>'0','entity_id'=>$uid,'revision_id'=>$uid,'language'=>'und','delta'=>'0','field_last_name_value'=>$lastname,'field_last_name_format'=>NULL));
						$result3 = $query3->execute();
					
					}

					  $variable_Random='';					  
                      user_login_submit(array(), $form_state);
					  $response['success']='1';
					  drupal_goto('user/confirm');
   	                 // echo json_encode($response);		
					  drupal_flush_all_caches();		  
					 // die;
					  
					}
					
				 /******************************************************/ 
			}
		}
		 drupal_goto('user/confirm');
  	}



}

/************alter table after insert,update and Delete**********/

function users_user_insert(&$edit, $account, $category) {
	
	if(isset($_REQUEST["invitedBy"]) && $_REQUEST["invitedBy"] != ""){
			$userID = base64_decode($_REQUEST["invitedBy"]);
			
			$query = db_update("users")
					 ->fields(array('invited_by'=>$userID))
					->condition('uid',$account->uid);
			$result = $query->execute();
		}
	$type = "";
	$types = array();
	$result = db_insert('gbl_users_meta')->fields(array('uid'=>$account->uid,'name'=>$account->name,'first_name'=>$account->field_first_name['und'][0]['value'],
								'last_name'=>$account->field_last_name['und'][0]['value'],'mail'=>$account->mail,'created'=>time()
								)					   
							   )                 
							   ->execute();
	
}
function users_user_update(&$edit, $account, $category) {

if(strpos($_SERVER['REQUEST_URI'],'/user') !== false){
	if(is_numeric(arg(1))){
		$uid = arg(1);
		$account=$_REQUEST;
	 }	
}

//$form,&$form_state\
//echo "here";
//echo "<pre>";print_r($account);exit;
$phone=$country=$state=$city=$role=$type = $about_yourself="";
$types = array();
$fid=0;
/*foreach($account['field_account_type']['und'] as $key=>$value){
	$types[$key] = $value['value'];
}*/

$type=$types[0];
if(!empty($account['field_city']))
{
$city=$account['field_city']['und'][0]['value'];
}
if(!empty($account['field_state']))
{
$state=$account['field_state']['und'][0]['value'];
}
if(!empty($account['field_country']))
{
$country=$account['field_country']['und'];
}
if(!empty($account['field_about_yourself']))
{
$about_yourself=$account['field_about_yourself']['und'][0]['value'];
}
if($account['field_phone_number']){
$phone=$account['field_phone_number']['und'][0]['value'];
}

//echo "<pre>";print_r($about_yourself);exit;
$result = db_update('gbl_users_meta')
                           ->fields(array('name'=>$account['name'],'first_name'=>$account['field_first_name']['und']['0']['value'],
						    'last_name'=>$account['field_last_name']['und'][0]['value'],'mobile'=>$phone,'mail'=>$account['mail'],
							'city'=>$city,'state'=>$state,'country'=>$country,'about_yourself'=>$about_yourself,
							'user_type'=>$type,'modified'=>time(),/* 'role'=>$role */
							)  		   
						   )
                           ->condition('uid', $uid,'=')
                           ->execute();

$query_exists = db_select("field_revision_field_about_yourself",'fu')->fields('fu')->condition('entity_id',$uid);
$result_exist = $query_exists->execute();
$result_exists_count = $result_exist->rowCount();
if($result_exists_count >=1){
$query2 = db_update("field_revision_field_about_yourself")->fields(array('field_about_yourself_value'=>$about_yourself))->condition('entity_id',$uid);
$result2 = $query2->execute();
$query3 = db_update("field_data_field_about_yourself")->fields(array('field_about_yourself_value'=>$about_yourself))->condition('entity_id',$uid);
$result3 = $query3->execute();
//echo "Successfully updated";
}else{
$query2 = db_insert("field_revision_field_about_yourself")->fields(array('entity_type'=>'user','bundle'=>'user','deleted'=>'0','entity_id'=>$uid,'revision_id'=>$uid,'language'=>'und','delta'=>'0','field_about_yourself_value'=>$about_yourself));
$result2 = $query2->execute();
$query3 = db_insert("field_data_field_about_yourself")->fields(array('entity_type'=>'user','bundle'=>'user','deleted'=>'0','entity_id'=>$uid,'revision_id'=>$uid,'language'=>'und','delta'=>'0','field_about_yourself_value'=>$about_yourself));
$result3 = $query3->execute();
//echo "Successfully Added";
}
               
/*if(($account['picture']) == 0)
	{
	//$fid=$account->original->picture->fid;
	$fid=$account['original']['picture']['fid'];
	}
	else
	{
	$fid=$account['picture'];
	}

if(empty($fid))
{
$fid=0;
}				   
$result1 = db_update('users')
	->fields(array('picture'=>$fid))
	->condition('uid', $uid,'=')
	->execute();*/
}

 function users_user_delete($account) {
  db_delete('gbl_users_meta')->condition('uid', $account->uid)->execute();
 } 

function user_custom_login() {
	
	global $user,$base_url;
	if($user->uid){
		
		if(isset($_SESSION['destination'])){
			if(strpos($_SESSION['destination'],'search')>-1){
				$des = $base_url.'/experience';
			}
			else{
				$des = $_SESSION['destination'];
			}
			unset($_SESSION['destination']);
			drupal_goto($des);
		}
		else{
			
             drupal_goto($base_url);
		}
	}
	else{
		
		return theme('user_login');
	}
	die;
}

function users_theme(&$existing, $type, $theme, $path){
  $module_path = drupal_get_path('module', 'users');

   return array(
    'user_register' => array(
      'template' => 'user_register',
      'path' => $module_path.'/templates',
    ),
    'user_login' => array(
      'template' => 'user_login',
      'path' => $module_path.'/templates',
    ),
    'user_dashboard' => array(
      'template' => 'user_dashboard',
      'path' => $module_path.'/templates',
    ),
    'user_profile' => array(
      'template' => 'profile',
      'path' => $module_path.'/templates',
    ),
    'invite_people' => array(
      'template' => 'invite_people',
      'path' => $module_path.'/templates',
    ),
	'user_profile_view' => array(
      'template' => 'user_profile_view',
      'path' => $module_path.'/templates',
    ),
	'privacy' => array(
      'template' => 'privacy',
      'path' => $module_path.'/templates',
    ),
	
   'user_edit' => array(
	  'path' => drupal_get_path('module', 'users').'/templates',
	  'template' => 'user_edit',
	  'render element' => 'form'
	),
   'user_password' => array(
	  'path' => drupal_get_path('module', 'users').'/templates',
	  'template' => 'user_password',
	  'render element' => 'form'
	),
	'user_profile_viewById' => array(
      'template' => 'user_profile_viewById',
      'path' => $module_path.'/templates',
    ),
	'my_profile' => array(
      'template' => 'my_profile',
      'path' => $module_path.'/templates',
    ),
	'my_past_trips' => array(
      'template' => 'my_past_trips',
      'path' => $module_path.'/templates',
    ),
    'my_dashboard' => array(
      'template' => 'my_dashboard',
      'path' => $module_path.'/templates',
    ),
	'user_passion' => array(
      'template' => 'user_passion',
      'path' => $module_path.'/templates',
    ),
    'whorecommended' => array(
      'template' => 'whorecommended',
      'path' => $module_path.'/templates',
    ),
	'about_yourself' => array(
      'template' => 'about_yourself',
      'path' => $module_path.'/templates',
    ),
	'Confirm_user' => array(
      'template' => 'Confirm_user',
      'path' => $module_path.'/templates',
    ),
	'user_passions' => array(
      'template' => 'user_passions',
      'path' => $module_path.'/templates',
    ),	
	'add_passeport_step' => array(
      'template' => 'add_passeport_step',
      'path' => $module_path.'/templates',
    ),
	'user_contact_information' => array(
      'template' => 'user_contact_information',
      'path' => $module_path.'/templates',
    ),	
	'test_profile' => array(
      'template' => 'profile_page_test',
      'path' => $module_path.'/templates',
    ),

	'email_template' => array(
      'template' => 'email_template',
      'path' => $module_path.'/templates',
    ),	
	'user_profile_section' => array(
      'template' => 'user_profile_section',
      'path' => $module_path.'/templates',
    ),
   	'passeport_dom_file' => array(
        'template' => 'passeport_dom_file',
        'path' => $module_path.'/templates',
    ),
	'account_settings' => array(
        'template' => 'account_settings',
        'path' => $module_path.'/templates',
    ),
	'user_payout_preference' => array(
        'template' => 'user_payout_preference',
        'path' => $module_path.'/templates',
    ),
    'user_transaction_history' => array(
        'template' => 'user_transaction_history',
        'path' => $module_path.'/templates',
    ),
	'user_password_reset' => array(
        'template' => 'user_password_reset',
        'path' => $module_path.'/templates',
    ),
	'recommend_user' => array(
		'template' => 'recommend_user',
        'path' => $module_path.'/templates',
	 ),
	'invitation_link' => array(
        'template' => 'invitation_link',
        'path' => $module_path.'/templates',
    ),
	
	
  );
}


function user_dashboard(){
	
	$userId=arg(1);

	unset($_SESSION['destination']);
	//$userListing=getuserlistdata();
	$query=db_select('gbl_user_passeport','gup');
	$query->fields('gup',array('location'));
	$query->condition('uid',$userId);
	$query->condition('description','I live there');
	$result1=$query->execute();
	$location=$result1->fetchField();
	$query1 = db_select('file_managed','f');
   	$query1->fields('f',array('uri'));
   	$query1->condition('uid',$userId);
   	$query1->condition('is_cover_pic','yes');
	$result4=$query1->execute();
	$cover_pic=$result4->fetchField();

	$reviewCount=getUserReviewsCount($userId);
	$allReviews=getListingReviewsAll($userId);
	$countriesVisited=countryVisited($userId);
	$OverviewData=getOverviewData($userListing['eid']);
	// $userpassion = getUserPassionList($userId);
	$TotalCredits =get_total_credits();
	//$travelguidedata = travel_guide();
	$query=db_select('gbl_user_passeport','p')
		  ->fields('p')
		  ->condition('uid',$userId);
	  $result=$query->execute();
	  $Passeports=$result->fetchAll(PDO::FETCH_ASSOC);
	$data=array('changePassForm'=>$changePassForm,
				'userListing'=>$userListing,
				'commisson'=>$commisson,
				'reviewCount'=>$reviewCount,
				'allReviews'=>$allReviews,
				'TotalCredits'=>$TotalCredits,
				//'travelguidedata'=>$travelguidedata,
				'countriesVisited'=>$countriesVisited,
				'loc'=>$location,
				'cover_pic'=>$cover_pic,
				'passeports'=>$Passeports
			);
	return theme('user_dashboard',$data);
}

function my_dashboard_data(){
global $user;
if(!$user->uid){
        $dest = drupal_get_destination();
        $_SESSION['destination']  = $dest["destination"];
        drupal_goto('login',$dest);
    }
$uid=$user->uid;
$test =my_dashboard();
$count_travel_guide = travel_guide_count();
$credit_used = credit_used();
$total_credit = total_credit();
$remaining_credit = ($total_credit - $credit_used);
$credit_data = credit_data();
$upcoming_trips = upcoming_trips();
$reviewCount=getUserReviewsCount($uid);
$latest_notification = latest_notification();
$recommended = recommended();
$monthly_booking = monthly_booking();
$monthly_income = monthly_income();
$data = array('totaltravelguide'=>$count_travel_guide,
			  'credit_used' =>$credit_used,
			  'total_credit' =>$total_credit,
			  'remaining_credit'=>$remaining_credit,
			  'credit_data'=>$credit_data,
			  'upcoming_trips'=>$upcoming_trips	,
			  'reviewCount' => $reviewCount,
			  'latest_notification'=>$latest_notification,
			  'recommended'=>$recommended,
			  'monthly_booking'=>$monthly_booking,
			  'monthly_income'=>$monthly_income
			  

			  		);
return theme('my_dashboard',$data);

}

function user_profile(){
	return theme('user_profile');
}

 function users_render_user_pass_change_form() {

    global $user;

    if (!user_is_logged_in()) {
        drupal_access_denied();
    }

    module_load_include('inc', 'user', 'user.pages');
    $form = drupal_get_form('user_profile_form', $user);

    $request_new = l(t('Request new password'), 'user/password', array('attributes' => array('title' => t('Request new password via e-mail.'))));
    $current_pass_description = t('Enter your current password to change the %pass. !request_new.', array('%pass' => t('Password'), '!request_new' => $request_new));

    $form['account']['current_pass']['#description'] = $current_pass_description;    

    unset(
      $form['account']['name'],
      $form['account']['mail'],
      $form['account']['status'],
      $form['account']['roles'],
      $form['field_acconut_type'],
      $form['field_city'],
      $form['field_u_s_state'],
      $form['field_zipcode'],
      $form['field_country'],
      $form['locale'],
      $form['l10n_client'],
      $form['picture'],
      $form['overlay_control'],
      $form['contact'],
      $form['timezone'],
      $form['ckeditor'],
      $form['metatags'],
      $form['redirect']
      );

    return $form;
}


function users_user_login(&$edit, $account){
global $user;	
// Don't redirect on password reset.
  $current_menu_item = menu_get_item();
  if ($current_menu_item['path'] == 'user/reset/%/%/%') {
    return;
  }

	
	$userDetails = user_load($user->uid);
	

	if($userDetails->access == 0){
	
		$query=db_insert('gbl_reward_points')
		  ->fields(array('uid'=>$user->uid,
						'travel_credits'=>10
			));	 
		$result=$query->execute();

		$query=db_select('users','u')
		  ->fields('u',array('invited_by'))
		  ->condition('uid',$user->uid);
		$result=$query->execute();
		$data = $result->fetchAssoc();
		if($data["invited_by"]){
			$query=db_insert('gbl_reward_points')
			  ->fields(array('uid'=>$data["invited_by"],
							'travel_credits'=>10
				));	 
			$result=$query->execute();			
		}
		
	}
	if(isset($_SESSION['destination'])){
		$_GET['destination'] = $_SESSION['destination'];
		unset($_SESSION['destination']);
	}
	else{
		$_GET['destination'] = '';
	}
}

 
function users_form_alter(&$form, &$form_state, $form_id){
global $user;

$uid=arg(1);

$userData=db_select('gbl_users_meta','es')->fields('es')->condition('uid',$uid)->execute();
$userData=$userData->fetchAll(PDO::FETCH_ASSOC);

//echo "<pre>";print_r($userData);exit;
$zipcode=$country=$city=$usState=$accountType=$phoneNumber="";
if($form_id == 'user_profile_form') {	

$about_yourself=$userData[0]['about_yourself'];
$city=$userData[0]['city'];
$state=$userData[0]['state'];
$accountType=$userData[0]['value'];
$phoneNumber=$userData[0]['mobile'];
$field_state=$userData[0]['state'];


/*$query = db_select('gbl_country_list', 'c')
->fields('c', array('country_name', 'iso_code'))
->condition('iso_code',$userData[0]['country'])
->execute();
$query1=$query->fetchAssoc();
echo "<pre>";
print_r($userData[0]['country']);exit;*/

    $country=$userData[0]['country'];
        
            
/*if(!empty($userData->field_about_yourself))
{
$about_yourself=$userData->field_about_yourself['und'][0]['value'];
}
if(!empty($userData->field_city))
{
$city=$userData->field_city['und'][0]['value'];
}
if(!empty($userData->field_state))
{
$state=$userData->field_state['und'][0]['value'];
}

if($userData->field_country)
{
$country=$userData->field_country['und'][0]['iso2'];
}

if(isset($userData->field_acconut_type))
{
$accountType=$userData->field_acconut_type['und'][0]['value'];
}
if(isset($userData->field_phone_number))
{
$phoneNumber=$userData->field_phone_number['und'][0]['value'];
}
if(isset($userData->field_state))
{
$field_state=$userData->field_state['und'][0]['value'];
}
*/

	$form['field_acconut_type']['und']['#default_value'] = $accountType;
	$form['field_country']['und']['#default_value'] = $country;
	$form['field_about_yourself']['und'][0]['value']['#default_value'] = $about_yourself;
	$form['field_city']['und'][0]['value']['#default_value'] = $city;
	$form['field_first_name']['und'][0]['value']['#default_value']=($userData[0]['first_name'])?$userData[0]['first_name']:'';
	$form['field_last_name']['und'][0]['value']['#default_value']=($userData[0]['last_name'])?$userData[0]['last_name']:'';						  		
	$form['field_phone_number']['und'][0]['value']['#default_value']=$phoneNumber;				  		
	$form['field_state']['und'][0]['value']['#default_value']=$field_state;		
	$form['account']['name']['#default_value']=($userData[0]['name'])?$userData[0]['name']:'';
	$form['account']['mail']['#default_value']=($userData[0]['mail'])?$userData[0]['mail']:'';	
	$form['account']['current_pass']['#access'] = FALSE;
	if($uid!=1){
		$form['account']['pass']['#access'] = FALSE;
	}		  		
	
}

	if($form['#form_id'] == 'user_login_block'){
	
	
	}
	/**************Remove description of fields from user register form**************************************/
if($form['#form_id'] == 'user_register_form') {

   
	$form['#attributes'] = array('class' => 'loin_form');
	$form['account']['mail'] = array(
		'#type' => 'textfield',
		'#prefix'=>'<fieldset>',
		'#suffix'=>'</fieldset>',
		'#maxlength' => EMAIL_MAX_LENGTH,
		'#description' => t('A valid e-mail address. All e-mails from the system will be sent to this address. The e-mail address is not made public and will only be used if you wish to receive a new password or wish to receive certain news or notifications by e-mail.'),
		'#required' => TRUE,
		'#default_value' => (!$register ? $account->mail : ''),
		'#attributes' => array('placeholder' =>'Enter Your Email-id'),
	);
	
	$form['field_first_name']['#prefix'] = '<fieldset><div class="col-lg-6 col-sm-6 paddinng_in_login">';
	$form['field_first_name']['und'][0]['value']['#title']=NULL;
	$form['field_first_name']['und'][0]['value']['#attributes']['placeholder']='First Name';
    $form['field_first_name']['#suffix'] = '</div>';

	$form['field_last_name']['#prefix'] = '<div class="col-lg-6 col-sm-6 paddinng_in_login">';
	$form['field_last_name']['und'][0]['value']['#attributes']['placeholder']='Last Name';
	$form['field_last_name']['und'][0]['value']['#title']=NULL;
    $form['field_last_name']['#suffix'] = '</div></fieldset>';
	$element['pass1']['#attributes']['placeholder'] = 'Password';
	//$form_state['redirect']=$base_url.'/user/confirm'; 
	$form['#action']=url('ajax/register');
	$form['actions']['terms'] = array(
			'#type' => 'checkbox',
			'#attributes' => array('class' => array('required error'),
							'id'=>'terms_and_conditions'),
			'#prefix'=>'<div class="submit_fld"><div class="col-lg-12 paddinng_in_login">
						<div class="checkbox_cus">',
			'#suffix'=>'</div><label><a href="/terms-and-conditions" target="_blank"> I agree on Gloobers Terms & Conditions </a></label></div>',
			
	);
	$form['actions']['submit'] = array(
			'#type' => 'submit',
			'#prefix'=>'<div class="col-lg-4 singupbtn">',
			'#suffix'=>'</div></div>',
			
	);

	unset($form['account']['name']['#description']);
	unset($form['account']['mail']['#description']);
	unset($form['account']['pass']['#description']);

	$form['actions']['submit']['#value']=t('Sign up');
  }
  	if($form['#form_id'] == 'user_pass') {
		

  	if ($user->uid == 0) {
	     $open='<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">';
		 $close='</div>';
		$offset = '<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12 ">';	 
	}
	else{
		$offset ='<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12 col-lg-offset-3">'; 
		}
		
		$form['name'] = array(
	    '#type' => 'textfield',
	    '#prefix'=>'<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">'.$open,
	    '#size' => 60,
	    '#maxlength' => max(USERNAME_MAX_LENGTH, EMAIL_MAX_LENGTH),
	    '#required' => TRUE,
	    '#suffix'=>$close,
	    '#default_value' => isset($_GET['name']) ? $_GET['name'] : '',
	  );
	  // Allow logged in users to request this also.
	  if ($user->uid > 0) {
	    $form['name']['#type'] = 'value';
	    $form['name']['#value'] = $user->mail;
	    $form['mail'] = array(
	      '#prefix' => '<p>',
	      '#markup' =>  t('Password reset instructions will be mailed to %email. You must log out to use the password reset link in the e-mail.', array('%email' => $user->mail)),
	      '#suffix' => '</p>',
	    );
	  }
	  $form['actions'] = array('#type' => 'actions');

	  $form['actions']['submit'] = array(
	  	'#type' => 'submit',
	  	'#prefix'=>$offset,
	  	'#suffix'=>'</div>',
	  	 '#value' => t('E-mail new password'),
	  	 '#attributes'=>array('class'=>array('button pull-right'))
	  	 );

	}
}  
function custom_pass($element)
{
    $element['pass1']['#title'] = NULL;
	$element['pass1']['#prefix'] = '<fieldset>';
	$element['pass1']['#attributes']['placeholder'] = 'Password';
	$element['pass1']['#suffix'] = '</fieldset>';
	$element['pass2']['#title'] = NULL;
	$element['pass2']['#prefix'] = '<fieldset>';
	$element['pass2']['#suffix'] = '</fieldset>';
    return $element;
}


/*
* Function pass_label_process_password_confirm() for editing label.
*/
function pass_label_process_password_confirm($element) {
  if ($element['#array_parents'][0] == 'account') {
    $element['pass1']['#title'] = 'New password';
    $element['pass2']['#title'] = 'Confirm new password';
  }
  return $element;
}

/* functions to send emails */
function sendNotificationEmail($module,$key,$to_email,$subject,$title,$body=NULL){

	$messageTitle		=	'<h3 style="font-weight:500;font-size:20px">'.$title.'</h3><br />';
	$messageHtml		=	'<div>'.$messageTitle.$body.'</div>';	
	$params				=	array('headers' => array(
									'Bcc' => 'patrickphp1@gmail.com'
								));
	//send this in email
	$from='noreply@gloobers.com';
	$message			=	drupal_mail($module,$key, $to_email, language_default(),$params, $from, FALSE);
	$message['subject'] = $subject;
    $message['body'] 	= array();
    $message['body'][] 	= $messageHtml;
	
	$message['headers']['MIME-Version'] ='1.0';
	$message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
	$message['headers']['Content-Transfer-Encoding'] = '8Bit';
	$message['headers']['X-Mailer'] = 'Drupal';
	
	$message['from']='noreply@gloobers.com';
	$system 			= 	drupal_mail_system($module, $key);
	$message = $system->format($message);
	if($system->mail($message))
	{
		return true; 
		//TRUE true new float int double var 
	}
	else{
		return FALSE;
	}
}

/* functions to send emails */
function sendWelcomeEmail($module,$key,$to_email,$subject,$title,$body=NULL){

	//$messageTitle		=	'<h3 style="font-weight:500;font-size:20px">'.$title.'</h3><br />';
	$messageHtml		=	'<div>'.$body.'</div>';	
	$params				=	array();
	//send this in email
	$from='noreply@gloobers.com';
	$message			=	drupal_mail($module,$key, $to_email, language_default(),$params, $from, FALSE);
	$message['subject'] = $subject;
    $message['body'] 	= array();
    $message['body'][] 	= $messageHtml;
	
	$message['headers']['Bcc'] = 'patrickphp1@gmail.com';
	
	$message['headers']['MIME-Version'] ='1.0';
	$message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
	$message['headers']['Content-Transfer-Encoding'] = '8Bit';
	$message['headers']['X-Mailer'] = 'Drupal';
	
	$message['from']='welcome@gloobers.com'; 
	$system 			= 	drupal_mail_system($module, $key);
	$message = $system->format($message);
	if($system->mail($message))
	{
		return true;
	}
	else{
		return FALSE;
	}
}

function send_invitation(){

	global $user,$base_url;
	
	$query=db_insert('gbl_invited_users')
	  ->fields(array('invited_by'=>$user->uid,
					'invited_to_email'=>"product_subscription_data",
					'invited_date'=>time()
		));	 
	$result=$query->execute();

	$title	=	'Hello,<br/>';
	$body			=	ucfirst($user->name).' has invited you to join Gloobers.<br/>
						 If you are interested follow the below link to join<br/> 
						   <a href="'.$base_url.'/user/register">Join Gloobers </a><br/>Thanks<br/>Gloobers Team';
	$module			=	'users';
	$key			=	'invitation_to_outside_user_to_join_gloobers';
	//$to_email 		= 	'testing.testing139@gmail.com';
	$to_email       = 'developer.deftsoft@gmail.com';
	$subject		=	'Invitation to join Gloobers';		
	if(sendNotificationEmail($module,$key,$to_email,$subject,$title,$body)){
		echo "Invitation sent"; die;
	}
	else{
		echo "Error in sending invitation"; die;
	}
			
}

function invite_people(){
	$invitationForm = drupal_get_form('invite_people_form');
	return theme( 'invite_people',array('invitationForm'=>$invitationForm));
}

function invite_people_form($form, &$form_state){

 $form['emails'] = array(
    '#type' => 'textfield',
	'#description' => t('Seperate multiple emails with commas'),
    '#default_value' => isset($form_state["values"]['emails']) ?$form_state["values"]['emails']: '',
	  '#attributes' => array(
		'class' => array('form-control'),
		'placeholder' => "Add friend's email addresses"
	  ),
  ); 

  $form['send'] = array(
    '#type' => 'submit',
    '#value' => t('Send'),
	  '#attributes' => array(
		'class' => array('btn-sign'),
	  ),	
  );
  
  return $form;
}

function invite_people_form_submit($form, &$form_state){
	global $user,$base_url;
	
	$emails = $form_state["values"]["emails"];
	$emails = explode(",",$emails);
	$invitedEmails = array();
	foreach($emails as $key=>$value){
	
		$query=db_select('gbl_invited_users','i')
		  ->fields('i')
		  ->condition('invited_by',$user->uid)
		  ->condition('invited_to_email',$value,'like');
		$result=$query->execute();
		if(!$result->rowCount()){
			$query=db_insert('gbl_invited_users')
			  ->fields(array('invited_by'=>$user->uid,
							'invited_to_email'=>$value,
							'invited_date'=>time()
				));	 
			$result=$query->execute();
			
			$userDetails = user_load($user->uid);
			
			$uID = $user->uid;
			$hash = base64_encode($uID);  

			$title	=	'Invited By '.$userDetails->name.'<br/>';
			$body ='<tr style="padding-bottom:40px; ">
        	<td style="text-align:center;">
            	<p style="float:left; text-align:left; font-size:14px; padding:5px 152px; color:#606060; font-weight:normal; font-family:Verdana, Geneva, sans-serif;">You Have Been Invited To Join Gloobers Account</p> </td>
			</tr>
			 <tr align="center" style="padding-top:40px;">
        	<td style="text-align:center; ">
            	<a style="display:inline-block; margin-top:20px; color:#dd4f36; text-decoration:underline; font-size:14px; font-weight:600;" href="#">What is Gloobers?</a>
            </td>
        </tr>
        <tr>
        	<td style="padding:40px 0; text-align:center;">
            	 <span style="float:left; width:80%; margin:0px 10%; text-align:center; "><img style="max-width:100%;" src="http://dev.gloobers.com/sites/default/files/border.png" alt="border" /></span>
                 
            </td>
        </tr>
        <tr style="padding-bottom:40px; ">
        	<td style="text-align:center;">
            	<p style="float:left; text-align:left; font-size:14px; padding:5px 20px; color:#606060; font-weight:normal; font-family:Verdana, Geneva, sans-serif;">Already use Gloobers?You\'ll be able to use same login to join gloobers account.Or,you can create a new login to join this account.</p> 
<table width="40%" align="center" cellspacing="0" cellpadding="0" border="0">
  <tbody><tr>
    <td style="background:#06c6ed; color:#fff; padding:15px 10px; cursor:pointer; text-align:center;"><a style="color:#fff; text-decoration:none; font-weight:bold; display:block; text-align:center;" href="'.$base_url.'/login?invitedBy='.$hash.'">JOIN GLOOBERS</a></td>
  </tr>
</tbody></table>
                
            </td>
       </tr>
       <tr>
        	<td style="text-align:center;">
            	<span style="float:left; width:80%; margin:0px 10%; margin-top:20px;"><img style="max-width:100%;" src="http://dev.gloobers.com/sites/default/files/border.png" alt="border" /></span>
               
            </td>
        </tr>';
			$module			=	'users';
			$key			=	'invitation_to_outside_user_to_join_gloobers';
			$to_email 		= 	$value;
			$subject		=	'Invitation to join Gloobers';		
			sendNotificationEmail($module,$key,$to_email,$subject,$title,$body);
		}
		else{
			$invitedEmails[] = $value;
		}
	}
	if(count($invitedEmails)>0){
		drupal_set_message('You have already invited few of your friends.');
	}
	else{
		drupal_set_message('You have successfully invited your friends.');
	}
}
/************************************************************************************************/
function user_profile_view()
{
$messages=getMessageList();
$messageCount=getNewMessageListCount();
return theme('user_profile_view',array('messages'=>$messages,'messageCount'=>$messageCount));
}

function getMessageList()
{
global $user;
$message=array();
$query=db_select('pm_message','pm');
$query->join('pm_index', 'pi', 'pm.mid = pi.mid');
$query->fields('pm')
      ->fields('pi');
$query->condition('pi.recipient',$user->uid,'=')
       ->condition('pi.deleted',0,'=')
	   ->condition('author',$user->uid,'!=');
$query->orderBy('timestamp','DESC');
$query->groupBy('thread_id');
$result=$query->execute();
while($data=$result->fetchAssoc())
{
$message[]=$data;
}	   
	return $message;  
}
function getNewMessageListCount()
{
global $user;
$message=array();
$query=db_select('pm_message','pm');
$query->join('pm_index', 'pi', 'pm.mid = pi.mid');
$query->fields('pm')
      ->fields('pi');
$query->condition('pi.recipient',$user->uid,'=')
       ->condition('pi.deleted',0,'=') 
       ->condition('is_new',1,'=')  
	   ->condition('author',$user->uid,'!=');
$result=$query->execute();   
return $result->rowCount();  
}

function privacy()
{
return theme('privacy');
}

function user_edit_profile(){
	global $user;

	return theme('user_edit');
}

function user_request_password(){
	
	global $user;
	$user_password_reset_form=drupal_get_form('user_password_reset_form');
	return theme('user_password_reset',array('user_pass_reset_form'=>$user_password_reset_form));
}
function user_password_reset_form(){

		$form['HTML-REQPASS']=array('#prefix'=>'<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">');
		$form['useremail'] = array(
	    '#type' => 'textfield',
	    '#prefix'=>'<div class="col-lg-8 col-md-8 col-sm-6 col-xs-12 ">',
		'#attributes'=>array('placeholder'=>'Your Email'),
	    '#size' => 60,
	    '#required' => TRUE,
	    '#suffix'=>'</div>',
		);
	   $form['submit'] = array(
	  	'#type' => 'submit',
	  	'#prefix'=>'<div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 ">',
	  	'#suffix'=>'</div>',
	  	 '#value' => t('Email new password'),
	  	 '#attributes'=>array('class'=>array('button pull-right margin_top0'))
	  	 );
		$form['HTML-REQPASS-END']=array('#prefix'=>'</div>');
		
		return $form;
}
function user_password_reset_form_submit(&$form,&$formset){
	global $base_url;
	$useremail=$_POST['useremail'];
	$getEmail=db_select('users','u')
				->fields('u',array('mail','uid'))
				->condition('mail',$useremail);
	$result=$getEmail->execute();
	$result=$result->fetchAssoc();	
	
	$mail=$result['mail'];
	$uid=$result['uid'];
	
	$reset_token=generateRandomString(30);
	$reset_link_for_one_day=$base_url.'/reset_link?token='.$reset_token.'&uid='.$uid;
	//Check Link exists 
	$linkAlready=db_select('gbl_reset_password_link','rl')->fields('rl')->condition('uid',$uid)->execute();
	$linkAlready=$linkAlready->fetchAll(PDO::FETCH_ASSOC);
	if($linkAlready){
		//Update link
		$updateLink=db_update('gbl_reset_password_link')->fields(array('reset_link'=>$reset_token,'link_status'=>'0','created'=>date('Y-m-d H:i:s')))->condition('uid',$uid)->execute();
	}else{
		//Insert link
		$insertLink=db_insert('gbl_reset_password_link')->fields(array('reset_link'=>$reset_token,'uid'=>$uid,'link_status'=>'0','created'=>date('Y-m-d H:i:s')))->execute();
	}
	$to = $useremail;
	$from =  'no-reply@example.com';
	$subject = 'Password Reset';
    $body= '<p style="text-align:left">A request to reset the password for your account has been made on gloobers.com.</p><p style="text-align:left">Please click on the link to reset your password.</p><p style="text-align:justify">This is your one day Link : <b><a target="_blank" href='.$reset_link_for_one_day.'>'.$reset_link_for_one_day.'</a></b></p>';
	$title = 'Password Reset';
    $module = 'users';
    $key = 'Reset Your Password';
    $to_email = $to;
    $subject = 'Reset Your Password:';
    $send_email =sendNotificationEmail($module, $key, $to_email, $subject, $title, $body);
	drupal_set_message('Password reset link email has been sent to your registered email.');
	drupal_goto('login');
}
function user_password_reset_form_validate(&$form,&$form_state){

	$email  = $form_state['values']['useremail'];
	
	$query=db_select('users','p')
		  ->fields('p',array('mail'))
		  ->condition('mail',$email);
	$result=$query->execute();
	$data=$result->fetchField();
	if($data == ''){
		form_set_error('password', t('Invalid Email'));
	}/* else{
		drupal_set_message('Email successfully send . Please check your email');
	} */
		

}

function user_change_password(){
	
	global $user;
	if(!$user->uid){
	drupal_goto('login');
	} 
	$user_change_pass_form=drupal_get_form('user_change_password_form');
	return theme('user_password',array('user_pass_form'=>$user_change_pass_form));
}
function user_change_password_form(){
	
		$form['HTML-PASS']=array('#prefix'=>'<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">');
		$form['password'] = array(
	    '#type' => 'password',
	    '#prefix'=>'<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12 ">',
		'#attributes'=>array('placeholder'=>'New Password'),
	    '#size' => 60,
	    '#required' => TRUE,
	    '#suffix'=>'</div>',
	 
	  );
	  $form['confirm_password'] = array(
	    '#type' => 'password',
	    '#prefix'=>'<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12 ">',
	    '#attributes'=>array('placeholder'=>'Confirm Password'),
	    '#size' => 60,	 
	    '#required' => TRUE,
	    '#suffix'=>'</div>'	    
	  );
	  
	  $form['actions'] = array('#type' => 'actions');

	   $form['actions']['submit'] = array(
	  	'#type' => 'submit',
	  	'#prefix'=>$offset,
	  	'#suffix'=>'</div>',
	  	 '#value' => t('Change password'),
	  	 '#attributes'=>array('class'=>array('button pull-right'))
	  	 );

	return $form;
}
function user_change_password_form_submit(&$form,&$form_state){
	
	global $user,$base_url;
	if($_GET['uid']){
	$uid=$_GET['uid'];
	$user_data=user_load($uid);
	$user->mail=$user_data->mail;
	$redirect_url=$base_url.$_SERVER['REQUEST_URI'];
	}else{
	$uid=$user->uid;
	$redirect_url='user/changepassword';
	}
	$password=$_POST['password'];
	$confirm_password=$_POST['confirm_password'];
	require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
    $new_pass = user_hash_password(trim($password));
	$result = db_update('users')
			->fields(array('pass'=>$new_pass))
			->condition('uid', $uid,'=')
			->execute();
	
	
	$email=$user->mail;
	$to = $email;
	$from =  'no-reply@example.com';
	$subject = 'Change Password';         
	$body= '<p style="text-align:left">A request to change the password for your account has been made on gloobers.com.</p><p style="text-align:left">You can log in by new password now.</p><p style="text-align:justify">This is your new changed password : <b>'.$password.'</b></p>';
	$title = 'Password Change';
    $module = 'users';
    $key = 'Change Your Password';
    $to_email = $to;
    $subject = 'Change Your Password:';
    $send_email =sendNotificationEmail($module, $key, $to_email, $subject, $title, $body);
	/* $body = "text to display in e-mail body";
     $HtmlBody = "<html>
	<head>
	<title>Change Password</title>
	</head>
	<body>
		<p>This email contains HTML Tags!</p>
		<table width='674px' cellspacing='0' cellpadding='0' border='0' align='center' style='font-family:Tahoma,Geneva,sans-serif;background:#f4f4f4;width:674px'>
			<tbody>
				<tr>
					<td style='width:100%;background:#333;text-align:left;padding:10px 10px'>
						<h1 style='color:#fff;text-transform:uppercase;margin:0'>
							<img class='img-responsive' alt='Gloobers' src=''>
						</h1>
					</td>
				</tr>
				<tr>
					<td style='padding-top:40px;text-align:center'>
						 Your password has been changed successfully.          
					</td>
				</tr>
				<tr>
					<td style='padding-top:40px;text-align:center'>
						 This is your new changed password ".$password."           
					</td>
				</tr>
				<tr>
					<td style='padding-top:40px;text-align:center'>
						Now you can login with your new password.
					</td>
				</tr>
				<tr>
					<td style='padding:20px;text-align:center'>
						<p style='margin:0;padding:0 20px;font-size:12px;color:#606060;text-align:left'><i>&copy; 2015 copyright. All right reserved.</i></p>
					</td>
			   </tr>
			</tbody>
		</table>
	</body>
	</html>";  
	
	$HtmlBody1 = htmlspecialchars_decode($HtmlBody); 
	

	$headers = "From: <noreply@gmail.com>\r\n"; 
    $headers.= "MIME-version: 1.0\n";
	$headers.= "Content-type: text/html; charset= iso-8859-1\n";
	
	$mail=mail($to,$subject,$HtmlBody1,$headers); */
	drupal_set_message('Password changed successfully.');
	drupal_goto($redirect_url);

}
function user_change_password_form_validate(&$form,&$form_state){
	
	 $password = $form_state['values']['password'];
	 $password_length=strlen($password);
	 $con_password = $form_state['values']['confirm_password'];
	 $account = isset($form['#user']) ? $form['#user'] : (object) array('uid' => 0);
	  if ($account->uid == 0) {
		$account->roles = array(DRUPAL_AUTHENTICATED_RID => DRUPAL_AUTHENTICATED_RID);
	  }
	  if (isset($values['name'])) {
		$account->name = $values['name'];
	  }
	
	if($password != $con_password){
		form_set_error('password', t('Password and Confirm password not matched.'));
	 }

	 
	/* $containsLetter  = preg_match('/[a-zA-Z]/',    $password);
	 if(!$containsLetter){
		form_set_error('password', t('Password must contains atleast one alphabet.'));
	 }
	 $containsNumber  = preg_match('/[0-9]/',    $password);
	 if(!$containsNumber){
		form_set_error('password', t('Password must contains atleast one number.'));
	 }*/

	/*  $errPass=_password_policy_constraint_validate($password,$account);
	 if ($errPass) {
      form_set_error('pass', t('Your password has not met the following requirement(s):') . '<ul><li>' . implode('</li><li>', $errPass) . '</li></ul>');
    } */
}
function pager_array_splice($data, $limit = 9, $element = 0) {
  global $pager_page_array, $pager_total, $pager_total_items;
  $page = isset($_GET['page']) ? $_GET['page'] : '';

  // Convert comma-separated $page to an array, used by other functions.
  $pager_page_array = explode(',', $page);

  // We calculate the total of pages as ceil(items / limit).
  $pager_total_items[$element] = count($data);
  $pager_total[$element] = ceil($pager_total_items[$element] / $limit);
  $pager_page_array[$element] = max(0, min((int)$pager_page_array[$element], ((int)$pager_total[$element]) - 1));
  return array_slice($data, $pager_page_array[$element] * $limit, $limit, TRUE);
}

function users_form_user_pass_alter(&$form,&$form_state){
	$form['#submit'][] = 'users_user_pass_submit';
}
function users_user_pass_submit(&$form,&$form_state){
global $language;
  $account = $form_state['values']['account'];
 $mail = _user_mail_notify('password_reset', $account, $language);
  if (!empty($mail)) {
    watchdog('user', 'Password reset instructions mailed to %name at %email.', array('%name' => $account->name, '%email' => $account->mail));
  }
	$form_state['redirect'] = 'login';
	return;
}
/*********************************************************************************/
function user_profile_viewById()
{
global $user,$base_url;
if(!$user->uid){
drupal_goto('login');
}
$userId=arg(2);
$userDetails=getUserDetails($userId);
$userPassions=getUserPassionList($userId);
$pastTrips=getPastTrips($userId);
$listings=getAllListingByuser($userId);
return theme('user_profile_viewById',array('userDetails'=>$userDetails,'userPassions'=>$userPassions,'pastTrips'=>$pastTrips,'listings'=>$listings));
}
/***********************************************************************************/
function getUserDetails($userId)
{
$query=db_select('gbl_users_meta','gum')
       ->fields('gum')
	   ->condition('uid',$userId);
$result=$query->execute();
return $result->fetchAssoc();	   
	   
}
/***********************Added for jcrop on 9 dec******************************************************/
function users_pics_form($form, &$form_state) {
  
  // Attach User Picture upload
	$form['profile_picture'] = array(
	'file_managed_container' => array(
		'file_managed_element' => array(
			'#type' => 'managed_file',
			'#title' => t('Profile picture'),
			'#description' => t('Allowed extensions: png,jpg,jpeg'),
			'#default_value' => (isset($foo->picture->fid) ? $foo->picture->fid : ''),
			'#upload_location' => 'public://users/pictures',
			'#upload_validators' => array(
			'file_validate_extensions' => array('png jpg jpeg'),
			),
		),
	),
	);

  $form['submit'] = array('#type' => 'submit','#value' => t('Submit'));

  return $form;
}
function users_pics_form_submit($form, &$form_state) { 
	global $user;
	if($form_state["values"]["file_managed_element"]){
		$result = db_update('users')
			->fields(array('picture'=>$form_state["values"]["file_managed_element"]))
			->condition('uid', $user->uid,'=')
			->execute();
		if ($result){
			drupal_set_message(t('Profile picture uploaded successfully.'));
		}
	}

}
/* function user_update_picture(){
	$random = rand();

	$dataUrl = $_POST['dataURL'];

$output_filename = $_SERVER["DOCUMENT_ROOT"].base_path()."sites/default/files/users/pictures/croppeduserImg_".$random;

$what = getimagesize($dataUrl);
$fileSize = $what['bits'];
switch(strtolower($what['mime']))
{
    case 'image/png':
       
		$type = '.png';
        break;
    case 'image/jpeg':
       
		$type = '.jpeg';
        break;
    case 'image/jpg':
       
		$type = '.jpeg';
        break;
    case 'image/gif':
        
		$type = '.gif';
        break;
    default: die('0');
}

	$image = explode('base64,',$dataUrl); 
	$decodedData = base64_decode($image[1]);
$fp = fopen($output_filename.$type, 'w');
$resultset = fwrite($fp, $decodedData);
fclose();
$viewPath = $base_url."/sites/default/files/users/pictures/croppeduserImg_".$random;
$uri = "public://users/pictures/croppeduserImg_".$random.$type;


	global $user; 
	if(!$resultset)
	{
		die('file writing failed');
	}
	else{
		$account = user_load($user->uid);
		
		if($account->picture->fid){
		
		 $file = file_load($account->picture->fid);
		 $path = $file->uri;
		 $url=drupal_realpath($path);
		 unlink($url);
		 
		$query=db_delete('file_managed')->condition('fid',$account->picture->fid,'=')->execute();
		}
		
		$query = db_insert("file_managed")
					 ->fields(array('uid'=>$user->uid,'filename'=>"croppeduserImg_".$random,'uri'=>$uri,'filemime'=>$what['mime'],'filesize'=>$fileSize,'status'=>1,'timestamp'=>time()));
			$result = $query->execute();	
			
			$query = db_update("users")
					 ->fields(array('picture'=>$result))
					 ->condition('uid',$user->uid);
			$result = $query->execute();
			echo $result; exit;
		
	}
} */
/*********************************************************************************************************/
function my_profile()
{
$descriptionForm=drupal_get_form('user_description_form');
$passionForm=drupal_get_form('user_passion_form');
return theme('my_profile',array('descriptionForm'=>$descriptionForm,'passionForm'=>$passionForm));
}
function getPassionList(){

	$passion=array();
	$query=db_select('gbl_passions','gp')
	       ->fields('gp');
	$result =$query->execute();
	while($data=$result->fetchAssoc())
	{
	$passion[]=$data;
	} 
	return $passion;  
}

function user_description_form($form,&$form_state)
{
global $user;
$userData=getUserDetails($user->uid);
//echo "<pre>";print_r($userData);exit;
$form = array();
$form['about_yourself'] = array(
	'#type' => 'textarea',
	'#title'=>t('About Yourself'),
	'#size' => '30',
    '#default_value'=>($userData['about_yourself'])?$userData['about_yourself']:'',
	'#required'=>true
	
	);
	$form['save'] = array(
	'#type' => 'submit',
	'#attributes' => array('class'=>array('btn-bg')),
	'#value' => 'save'
	);

	return $form;
}
function user_description_form_submit($form,&$form_state)
{
global $user;
$query=db_update('gbl_users_meta')
       ->fields(array('about_yourself'=>$form_state['values']['about_yourself']))
	   ->condition('uid',$user->uid); 
$result=$query->execute();
if($result)
{
drupal_set_message('Description Data Saved Successfully');
}	   

}
function user_passion_form($form,&$form_state)
{
global $user;
$form = array();
$passions=getPassionList();
$userPassions=getUserPassionList($user->uid);
foreach($userPassions as $uPassion)
{
$up[]=$uPassion['pid'];
}
$form['passion']['title']=array(
'#prefix'=>'<div class="passions"><h2>Choose Your Passions</h2>'
);
foreach($passions as $passion)
{

if($passion['fid'])
	{
	$file = file_load($passion['fid']);
	$imgsrc='<img src="'.file_create_url($file->uri).'" alt="passion logo" width="50px">';
	}
	else
	{
	$imgsrc='<img src="" alt="No passion logo">';
	}
$form['passion'][$passion['pid']] = array(
'#type' => 'checkbox',
'#value'=>(in_array($passion['pid'],$up))?1:0,
'#title'=>$imgsrc.$passion['passion'],
'#name' => $passion['pid'],

);
}
if($userPassions)
{
$form['submit'] = array(
'#type' => 'submit',
'#value' => t('Update'),
);
}
else
{
$form['submit'] = array(
'#type' => 'submit',
'#value' => t('Save'),
);
$form['passion']['titleEnd']=array(
'#suffix'=>'</div>'
);
}
return $form;
}
function user_passion_form_submit($form,&$form_state)
{
global $user;
if($form_state["values"]["op"]=="Update")
{
$query=db_delete('gbl_users_passions')
          ->condition('uid',$user->uid,'=')
          ->execute();
/*****************************************/
foreach($_REQUEST as $key=>$value)
	{
		if (is_numeric($key))
		{
		$query=db_insert('gbl_users_passions');
		$query->fields(array('uid'=>$user->uid,'pid'=>$key));
		$result=$query->execute();			
		}
	}
	  drupal_set_message('Passion data updated successfully');
/****************************************************************/

}
else
{
	foreach($_REQUEST as $key=>$value)
	{
		if (is_numeric($key))
		{
		$query=db_insert('gbl_users_passions');
		$query->fields(array('uid'=>$user->uid,'pid'=>$key));
		$result=$query->execute();			
		}
		
	}
	  drupal_set_message('Passion data saved successfully');
}	  
}
function getUserPassionList($userId=null)
{

$passion=array();
$query=db_select('gbl_users_passions','gup');
$query->join('gbl_passions', 'gp','gp.pid = gup.pid');
$query->fields('gup',array('pid'));
$query->fields('gp',array('passion','fid','fid_thumb'))
       ->condition('uid',$userId);
$result=$query->execute();
while($data=$result->fetchAssoc())
{
$passion[]=$data;
}   
return $passion;       
}
function my_past_trips()
{
global $user;
$bookings=getPastTrips($user->uid);
$bookingsCount=getPastTripsCount($user->uid);
$reviewForm=drupal_get_form('listing_review_form');
$output = '';
$bookings = pager_array_splice($bookings, 10);
$output .= theme('pager', array('quantity' => 10));
return theme('my_past_trips',array('bookings'=>$bookings,'bookingsCount'=>$bookingsCount,'pagination'=>$output,'reviewForm'=>$reviewForm));
}
//all trips whose arrival date is crossed and status is booked or complete
function getPastTrips($userId)
{
$bookings=array();
$query=db_select('gbl_experience_list','gel');
$query->join('gbl_booking', 'gb', 'gb.lid = gel.eid');
$query->fields('gel',array('title','list_type','city','state','zipcode','country','address1','address2','short_description'));
$query->fields('gb');
$query ->where("gb.arrive_at_date < now()");
$query->condition('gb.uid',$userId,'=');
$query->condition(db_or()->condition('gb.booking_status','refund_request','!=')->condition('gb.booking_status','refunded','!='));
$query->orderBy('gb.created','DESC');
$result=$query->execute();
while($data=$result->fetchAssoc())
{
$bookings[]=$data;
}
return $bookings;
}
function getPastTripsCount($userId)
{
$query=db_select('gbl_experience_list','gel');
$query->join('gbl_booking', 'gb', 'gb.lid = gel.eid');
$query->fields('gel',array('title','list_type','city','state','zipcode','country','address1','address2'));
$query->fields('gb');
$query ->where("gb.arrive_at_date < now()");
$query->condition('gb.uid',$userId,'=');
$query->condition(db_or()->condition('gb.booking_status','refund_request','!=')->condition('gb.booking_status','refunded','!='));
$query->orderBy('gb.created','DESC');
$result=$query->execute();
return $result->rowCount();
}
//12april2016
function getNotificationsCount()
{
global $user;
$query=db_select('gbl_notifications','uc');
	$query->fields('uc')
			->condition('uc.recipient_id',$user->uid)
			->condition('uc.read_status',0);
	$result = $query->execute();
	$noti_count = $result->rowCount();
	return $noti_count;
}
function getNotifications($range=null)
{

global $user;
$query=db_select('gbl_notifications','uc');
	$query->fields('uc')
			->condition('recipient_id',$user->uid)
			->orderBy('nid','DESC');
	if($range)
    {	
    $query->range(0,$range);
	}
	$result = $query->execute();
	$record = $result->fetchAll(PDO::FETCH_ASSOC);
	return $record;
}
function users_user_logout()
{
	drupal_set_message(t('Thanks for visiting, come again!'));
    session_destroy();
    drupal_goto();
}
/*****Login user through ajax************************/
function ajaxlogin($user=null,$pass=null)
{
	$response=array();
	$email=trim(check_plain($_POST['user']));
	$userDetail=user_load_by_mail($email);
	if(empty($userDetail))
	{
	 $response['failure']='ERR_email';
   	 echo json_encode($response);
	 die;
	}
	$username=$userDetail->name;
	$password =trim(check_plain($_POST['pass']));	
	 if ($uid = user_authenticate($username, $password)) {
      global $user;
      $user = user_load($uid);
      $login_array = array ('name' => $username);
      user_login_finalize($login_array);
	  $query=db_select('gbl_users_meta','m');
	  $query->fields('m',array('confirm_status'))->condition('uid',$uid);
	  $result=$query->execute();
	  $res=$result->fetchField();
	  if($res=='yes'){
		$response['success']='1';
	  }else{
		$response['success']='2';
	  }
	  echo json_encode($response);
	  die;
    }
  else 
  {
	 $response['failure']='0';
   	 echo json_encode($response);
	 die;
  }	
}
/*****************************Disable password strenther in user register form*****************************/
function users_form_user_register_form_alter(&$form, &$form_state) {
  $form['#attached']['js'][] = drupal_get_path('module', 'users') . '/js/pass_strength_disable.js';
  }
/**********************************************************************************/
function ajax_register($email=null,$pass=null,$firstname=null,$lastname=null)
{ 
    global $base_url;
	$email=trim(check_plain($_POST['email']));
	$pass=trim(check_plain($_POST['pass']));
	$firstname=trim(check_plain($_POST['firstname']));	
	$lastname=trim(check_plain($_POST['lastname']));
	$account = isset($form['#user']) ? $form['#user'] : (object) array('uid' => 0);
	  if ($account->uid == 0) {
		$account->roles = array(DRUPAL_AUTHENTICATED_RID => DRUPAL_AUTHENTICATED_RID);
	  }
	  if (isset($values['name'])) {
		$account->name = $values['name'];
	  }
	//$errPass=_password_policy_constraint_validate($pass,$account);

	/* $str_err='';
	
	foreach($errPass as $errPas){
		
	  $str_err .=$errPas;
	} */
	$errPass='';
	//check with email user already register
	$user_Details=user_load_by_mail($email);
	
	if($user_Details)
	{
	//user already exist	
	$response['failure']='Err_already_exist';
	echo json_encode($response);
	die;
	}else if($errPass){
		$response['failure_pass']=$str_err;
		echo json_encode($response);
		die;
	}else{	
	//generate unique username	
		$userName=explode("@",$email);
		$user_unique=$userName[0];
		//If already username  Exist		
		   $isUserExists = false;
		   do{
			   $user_unique = $user_unique.rand(0,9999);
			   $loadUserByName=user_load_by_name($user_unique);
			   if($loadUserByName)
			   {						
				  $isUserExists = true; 
			   }
			   else{				   
				   $isUserExists = false;
			   }
		   }while($isUserExists);
		   //save user in database; 
	   
		if($user_unique)
		{ 		
		  $fields = array(
				'name' => $user_unique,
				'mail' => $email,
				'pass' => $pass,
				'status' => 1,
				'init' => $email,
				'roles' => array(
				  DRUPAL_AUTHENTICATED_RID => 'authenticated user',
				),
			);
		$account = user_save('', $fields);
		$account->password = $fields['pass'];
		$variable_Random=generateRandomString(10);
		$verified_link=$base_url.'/user/confirm?confirmId='.$variable_Random;
		$to = $email;
		$title	=	'Welcome email'; 



		$body= '<p style="text-align:left">Thanks '.$firstname.' for signing up and joining the tribe. We are happy to welcome you. Before we get to know a bit better, please confirm your email.<p><p style="text-align:left"><a href="#" style="color:#139ABC;text-decoration:none;" target="_blank">
		<p style="text-align:left"><a href="'.$verified_link.'" style="color:#139ABC;text-decoration:none;" target="_blank">Click here to confirm your email</a></p>
		</a>  </p>';
		$module			=	'users';
		$key			=	'New register user';
		$to_email       =   $to;
		$subject		=	'Welcome in the tribe';		
		sendWelcomeEmail($module,$key,$to_email,$subject,$title,$body);
		if($account)
		{
			//Login user after register
				  if ($uid = user_authenticate($user_unique, $pass)) {
					  $form_state['uid'] = $uid;
					    /* Recommended user Data */
						$referId=trim(check_plain($_POST['refer']));
						$refered_uid=trim(check_plain($_POST['uid']));
						$refered_uid_decoded=base64_decode($refered_uid);
						$recomend_link=$base_url.'/recommend_link?refer='.$referId.'&ruid='.$refered_uid;
						if(($referId != '0') && ($refered_uid != '0')){
							
							$query_exists = db_select("gbl_recommend_link",'fu')
											->fields('fu')
											->condition('recommned_link',$recomend_link)
											->condition('uid',$refered_uid_decoded);
							$result_exist = $query_exists->execute();
							$result_exists_count = $result_exist->rowCount();
							
							if($result_exists_count===1){
								$recommend_user_add = db_insert("gbl_recommend_link_users")->fields(array('link_accept_person_uid'=>$uid,'recommend_link'=>$recomend_link,'link_share_person_uid'=>$refered_uid_decoded,'created'=>time()));
								$recommend_user_add_result = $recommend_user_add->execute();
								
								$query_Credits_check = db_select("gbl_credit_user",'cu')
												->fields('cu')
												->condition('uid',$refered_uid_decoded);
								$result_exist_check = $query_Credits_check->execute();
								$result_exists_count_check = $result_exist_check->fetchAll(PDO::FETCH_ASSOC);
								
								if(!empty($result_exists_count_check)){
									$credits=($result_exists_count_check[0]['credits']+variable_get('credit_value_per_signup_throught_recommendation_link'));
									$credits_earned=($result_exists_count_check[0]['credits_earned']+variable_get('credit_value_per_signup_throught_recommendation_link'));
									$recommend_user_update_credits = db_update("gbl_credit_user")
															->fields(array('credits'=>$credits,'credits_earned'=>$credits_earned,'modified'=>time()))
															->condition('uid',$refered_uid_decoded);
									$recommend_user_update_credits_result = $recommend_user_update_credits->execute();
								}else{
									$recommend_user_add_credits = db_insert("gbl_credit_user")
															->fields(array('uid'=>$refered_uid_decoded,'credits'=>$credits,'credits_earned'=>$credits_earned,'create'=>time()));
									$recommend_user_add_credits_result = $recommend_user_add_credits->execute();

								
								}
							}
						}
					  /*********************END Recommended user Data**************/
					$query = db_update("gbl_users_meta")
							->fields(array('first_name'=>$firstname,'last_name'=>$lastname,'confirmation_id'=>$variable_Random))
							->condition('uid',$uid);
					$result = $query->execute();
					$query_exists = db_select("field_data_field_first_name",'fu')->fields('fu')->condition('entity_id',$uid);
					$result_exist = $query_exists->execute();
					$result_exists_count = $result_exist->rowCount();
					if($result_exists_count ==1){
						$query2 = db_update("field_data_field_first_name")->fields(array('field_first_name_value'=>$firstname))->condition('entity_id',$uid);
						$result2 = $query2->execute();
						$query3 = db_update("field_revision_field_first_name")->fields(array('field_first_name_value'=>$firstname))->condition('entity_id',$uid);
						$result3 = $query3->execute();
					}else{
							
						$query2 = db_insert("field_data_field_first_name")->fields(array('entity_type'=>'user','bundle'=>'user','deleted'=>'0','entity_id'=>$uid,'revision_id'=>$uid,'language'=>'und','delta'=>'0','field_first_name_value'=>$firstname,'field_first_name_format'=>NULL));
						$result2 = $query2->execute();
						$query3 = db_insert("field_revision_field_first_name")->fields(array('entity_type'=>'user','bundle'=>'user','deleted'=>'0','entity_id'=>$uid,'revision_id'=>$uid,'language'=>'und','delta'=>'0','field_first_name_value'=>$firstname,'field_first_name_format'=>NULL));
						$result3 = $query3->execute();
					}
					$query_exists = db_select("field_data_field_last_name",'fu')->fields('fu')->condition('entity_id',$uid);
					$result_exist = $query_exists->execute();
					$result_exists_count = $result_exist->rowCount();
					if($result_exists_count ==1){
						$query2 = db_update("field_data_field_last_name")->fields(array('field_last_name_value'=>$lastname))->condition('entity_id',$uid);
						$result2 = $query2->execute();
						$query3 = db_update("field_revision_field_last_name")->fields(array('field_last_name_value'=>$lastname))->condition('entity_id',$uid);
						$result3 = $query3->execute();
					}else{

						$query2 = db_insert("field_data_field_last_name")->fields(array('entity_type'=>'user','bundle'=>'user','deleted'=>'0','entity_id'=>$uid,'revision_id'=>$uid,'language'=>'und','delta'=>'0','field_last_name_value'=>$lastname,'field_last_name_format'=>NULL));
						$result2 = $query2->execute();
						$query3 = db_insert("field_revision_field_last_name")->fields(array('entity_type'=>'user','bundle'=>'user','deleted'=>'0','entity_id'=>$uid,'revision_id'=>$uid,'language'=>'und','delta'=>'0','field_last_name_value'=>$lastname,'field_last_name_format'=>NULL));
						$result3 = $query3->execute();
					
					}
					
					if(($referId != '0') && ($refered_uid != '0')){
						/** 
						* @Email sent to user who refer this invitation link 
						* @So that he/she can know user is registered from his Link
						* Accepted invitation
						**/
						$registeredUserId=$uid;
						$invitationSenderUid=trim(check_plain($_POST['uid']));
						$invitationSenderUid=base64_decode($invitationSenderUid);
						$registeredUser_Data=user_load($registeredUserId);
						$invitationSender_Data=user_load($invitationSenderUid);
						$registeredUser_Data_DpID=$registeredUser_Data->picture->fid;
						if ($registeredUser_Data->picture != ""){
							$registeredUser_file = file_load($registeredUser_Data_DpID);
							$registeredUser_file_imgpath = $registeredUser_file->uri;
							$registeredUser_style = "new-reservation";
							$registeredUser_DpImage_path=image_style_url($registeredUser_style, $registeredUser_file_imgpath);
							//$registeredUser_DpImage= '<img src="'.image_style_url($registeredUser_style, $registeredUser_file_imgpath) . '" alt="" title="" style="border-radius:100%;border:2px solid #efefef;width:70px;height:70px" />';

							$registeredUser_DpImage='<img src="'.image_style_url($registeredUser_style, $registeredUser_file_imgpath) . '" alt="" title="" style="border-radius:50%;border:2px solid #efefef" />';
						}else{
							$registeredUser_DpImage_path=$base_url.'/'.drupal_get_path('theme', $GLOBALS['theme']) . '/images/no-profile-male-img.jpg';
							//$registeredUser_DpImage=  '<img src="' . base_path().drupal_get_path('theme', $GLOBALS['theme']) . '/images/no-profile-male-img.jpg" alt="" title="" style="border-radius:100%;border:2px solid #efefef;width:70px;height:70px" />';

							$registeredUser_DpImage='<img height="63px" width="62px" src="' .$base_url.'/'.drupal_get_path('theme', $GLOBALS['theme']) . '/images/no-profile-male-img.jpg" alt="" title="" style="border-radius:50%;border:2px solid #efefef" />';
						}
						if($firstname!='' || $lastname!=''){
							$registeredUser_Data_name = $firstname.' '.$lastname;
						}else if(!empty($registeredUser_Data ->field_first_name['und'][0]['value'])){

							$registeredUser_Data_name =  $registeredUser_Data->field_first_name['und'][0]['value'];
						}else{
							$registeredUser_Data_name =  $registeredUser_Data->name;
						}
						
						if(!empty($invitationSender_Data ->field_first_name['und'][0]['value'])){

							$invitationSender_Data_name =  $invitationSender_Data->field_first_name['und'][0]['value'];
						}else{
							$invitationSender_Data_name =  $invitationSender_Data->name;
						}						
	
						$body='<tr><td>
						<center>'.$registeredUser_DpImage.' </center>
						<p><a href="'.$base_url.'/profile/'.$registeredUser_Data->uid.'"  style="color:#139ABC;text-decoration:none;" target="_blank"><center style="color:#139ABC;">View profile</center></a></p>
						</td>
						</tr>

						<tr>
						<td><h3 style="font-size:18px;font-weight:600;margin:10px 0"><center style="color:#000;">'.$registeredUser_Data_name.' accepted your invitation !</center></h3></td>
						</tr>

						<tr>
						<td>
						<p style="text-align:left; color:#000;">Good news '.$invitationSender_Data_name.',<br />
						Your friend '.$registeredUser_Data_name.' just joined the tribe thanks to the invitaion you sent. From now on, you will be passively rewarded for every trip '.$registeredUser_Data_name.' will book, every followed recommendation '.$registeredUser_Data_name.' will give and/or every reservation '.$registeredUser_Data_name.' will receive.</p>

						<p style="text-align:left; color:#000;">If you have any question regarding Gloobers passive rewards please feel free to consult our <a href="'.$base_url.'/help" style="color:#139ABC;text-decoration:none;" target="_blank">Help center</a> </p>
						</td>
						</tr>';

						$module = 'user';
						$key = 'Invitation_Owner_email';
						$to_email = $invitationSender_Data->mail;
						//$to_email = 'testing.testing139@gmail.com';
						$subject = 'Invitation accepted';
						$send_email =sendWelcomeEmail($module, $key, $to_email, $subject, $title, $body);
						// End email code
					}
					  $variable_Random='';					  
                      user_login_submit(array(), $form_state);
					  $response['success']='1';
   	                  echo json_encode($response);		
					  drupal_flush_all_caches();		  
					  die;
					  
					}
			}
		}
  	}
}
function passionView(){

	$passionlist=getPassionList();
	$data=array('passionlist'=>$passionlist);
	return theme('user_passion',$data);

}
/***********************************18march*********************************/
function getcountryname($iso2){
	$query=db_select('countries_country','c');
	$query->fields('c',array('name'))->condition('iso2',$iso2);
	$result=$query->execute();
	$res=$result->fetchAssoc();
	return $res;
}
function getuserlistdata($userId=null){
	global $user;
	//$userId=$user->uid;
	$query=db_select('gbl_experience_list','e');
	$query->fields('e')
			->condition('uid',$userId)
			->orderBy('eid', 'DESC'); //ORDER BY eid
			//->range(0,3);//LIMIT to 3 records
	$result=$query->execute();
	while($res=$result->fetchAssoc()){
		$data[]=$res;
	}
	return $data;
}

function googleMap($country="", $territory="", $city="", $address="")
{	
	$country = urlencode($country);
	$territory = urlencode($territory);
	$city = urlencode($city);
	$address = urlencode($address);
	$loc = "$country,+$territory,+$city,+$address";
	$zoom = 15;
	
	// build iframe
	$build = "<iframe class='g_map' frameborder='0' scrolling='no' width='800' height='500'";
	$build .= "src='https://maps.google.com/maps?f=q&amp;source=s_q&amp;hl=en&amp;q=$loc&amp;t=h&amp;ie=UTF8&amp;hnear=$loc&amp;z=$zoom&amp;output=embed'>Loading</iframe></span>";
	// build link
	$build .= "<br/><small><a href='https://maps.google.com/maps?f=q&amp;source=embed&amp;hl=en&amp;q=$loc&amp;t=h&amp;ie=UTF8&amp;hnear=$loc&amp;z=$zoom";
	$build .= " target='_blank'>View on Google&#8482; Maps</a></small>";
	return $build;
}

function getListingReviewsAll($uid = null) {

    $reviews = array();
		$query = db_select('gbl_listing_reviews', 'r');
        $query->join('users', 'user', 'user.uid = r.uid');
		//$query->leftJoin('gbl_experience_list', 'e', 'user.uid = e.uid');
        $query->join('file_managed', 'file', 'file.fid = user.picture');
        $query->fields('r')
            ->fields('user')
			//->fields('e')
            ->fields('file',array('uri'));
        $query->addField('r', 'created', 'rcreated');		
		$query->condition('r.uid', $uid);
		//$query->range(0, 3);
		$result = $query->execute();
    while ($data = $result->fetchAssoc()) {
        $reviews[] = $data;
    }

    return $reviews;
}
function countryVisited($uid){
	$event_table = db_select('gbl_experience_list', 'e');
	$event_table->join('gbl_booking', 'b', 'e.eid = b.lid');
	$event_table->fields('e',array('country'))
				->fields('b',array('lid'));
	$event_table->condition('b.uid', $uid);
	$event_table->groupBy("e.country");
	$result = $event_table->execute();
	$countriesVisited=array();
	while($result_event_table = $result->fetchAssoc()){
        $countriesVisited[] = $result_event_table;
    }
	return $countriesVisited;
}
function facebook_count($username){
	$username1='rbkool';
	$url = "https://graph.facebook.com/".$username1;
	$fbData = json_decode(file_get_contents($url), true);
	return intval($fbData['likes']);
}

function travel_guide($uid){
   global $user;
   	$query=db_select('gbl_trevel_guide','c');
	$query->fields('c');
	$query->condition('owner',$uid,'=');
	$result=$query->execute();
	
	$travel_guide_data=array();
	while($result_data = $result->fetchAssoc()){
        $travel_guide_data[] = $result_data;
    }
	return $travel_guide_data;

}

function travel_guide_count(){
	global $user;
   	$uid=$user->uid;
  	$query=db_select('gbl_trevel_guide','c');
	$query->fields('c',array('owner'));
	$query->condition('owner',$uid,'=');
	$result=$query->execute();
	$count = $result->rowCount();
	return $count;	
}

function credit_used(){
	global $user;
   	$uid=$user->uid;
  	$query=db_select('gbl_credit_used');
  	$query->addExpression('SUM(credit_used)', 'sum');
	$query->condition('uid', $uid, '=');
	$result = $query->execute();
	
	$used=$result->fetchField();
    return $used;
}

function total_credit(){
	global $user;
   	$uid=$user->uid;
   	$query=db_select('gbl_credit_user' ,'c');
  	$query->fields('c',array('credits'));
  	$query->condition('uid', $uid, '=');
  	$result = $query->execute();
	$total_credit=$result->fetchField();
    return $total_credit;		
}

function credit_data(){
	global $user;
   	$uid=$user->uid;
   	$query=db_select('gbl_credit_user' ,'c');
  	$query->fields('c',array('credits_earned','credits'));
  	$query->condition('uid', $uid, '=');
  	$result = $query->execute();
	$credits_data=$result->fetchAll();
    return $credits_data;		
}

function upcoming_trips(){
	global $user;
   	$uid=$user->uid;
 	/*$today = date('y-m-d');
 	$today =strtotime($today);
	$query=db_select('gbl_booking','c');
	$query->fields('c',array('booking_status'));
	$query->condition('uid',$uid);
	$query->condition('booking_status','booked');
	$query->condition('created', $today,'>');
	$result=$query->execute();
	$count = $result->rowCount();
	return $count;	
*/
	  	
	$query = db_query("Select count(*) as count FROM gbl_booking where uid = '".$uid."' and DATE_FORMAT(arrive_at_date,'%Y-%m-%d')>= DATE_FORMAT(NOW(),'%Y-%m-%d')");
  	$total=$query->fetch(PDO::FETCH_ASSOC);  	
  	$count = $total['count'];
	return $count;	
  	

}

function my_dashboard(){

	global $user,$base_url;
	if(empty($user->uid)){
		drupal_goto($base_url."/login");
	}
}

function latest_notification(){

	global $user;
   	$uid=$user->uid;
   	$query=db_select('gbl_notifications','c');
	$query->fields('c',array('noti_msg'));
	$query->condition('recipient_id',$uid);
	$query->orderBy('nid','DESC');
	$query->range(0,1);
	$result=$query->execute();
	$used=$result->fetchField();
	return $used;
}
// change of 29/05/2015 

function  recommended(){

	global $user;
   	$uid=$user->uid;
   	$query = db_query("Select listings from gbl_trevel_guide where owner = '".$uid."' and listings !='' ");
    $total=$query->fetchAll(PDO::FETCH_ASSOC);
    $listings=array();
    foreach($total as $tot){

		$tot['listings']=explode(',',$tot['listings']);
		$listings[]=$tot['listings'];

    }
    $output=array();
    foreach($listings as $list){

		$output=array_merge($output,$list);
	}

   	return count($output);

}

function whorecommended(){

	global $user;
   	$uid=$user->uid;
   	$query = db_query("Select recommend_for_uid from gbl_trevel_guide where owner = '".$uid."' and listings !='' ");
  	$total=$query->fetchAll(PDO::FETCH_ASSOC);
  	
  	$details = array();
  	foreach ($total as $key =>  $value) {
        
     	$details[] =user_load($value['recommend_for_uid']);
     		
    } 
	return theme('whorecommended',array('details'=>$details ));

}

// end work of 29 /5 / 2015

//--------   30-5-2015   ----------------------------------//

function monthly_booking(){

	global $user;
   	$uid=$user->uid;
   	$query = db_query("SELECT count(*) FROM gbl_booking WHERE MONTH(from_unixtime(created)) = MONTH(CURDATE()) and booking_status = 'booked' and uid = '".$uid."'  ");
   	$booked=$query->fetchField();
    return $booked;

}

function monthly_income(){
	global $user;
	$uid = $user->uid;
	$query = db_query("SELECT sum(total_cost) FROM gbl_booking WHERE MONTH(from_unixtime(created)) = MONTH(CURDATE())  and uid = '".$uid."'  ");
   	$total=$query->fetchField();
   	$total = sprintf('%.2f', $total);
   	return $total;

}

/**************************************Steps 1 to 5 Function****************************************/
function about_yourself(){

	$About_yourself = drupal_get_form('about_yourself_form');
	
	$About_yourself=drupal_render($About_yourself);
	
	return theme('about_yourself',array('About_yourself'=>$About_yourself));

}
function about_yourself_form($form, &$form_state){

	global $base_url,$user;
	if(!$user->uid){
		drupal_goto('login');
	}
	$userData=user_load($user->uid);
	
	//$userData=getUserDetails($user->uid);
	//echo "<pre>";print_r($userData);die;
	$about_yourself=$userData->field_about_yourself['und'][0]['value'];
	$form=array();
	// Attach User Picture upload
	$form['image-html'] = array(
    '#prefix' => '<div class="simple-cropper-images"><div class="profile_text"></div><div class="cropme" id="dp">
	
	<img src="'.image_style_url('reservation_popup_listing_img' ,$userData->picture->uri).'"></div>',
	 '#suffix'=>'<div class="cropme_2">'
    );
	 $form['profile_picture'] = array(
    '#type' => 'hidden',
    );
	$form['End-image-html'] = array(
     '#suffix'=>'</div></div>'
    );
	//,'onfocus'=>"if (this.value != '') {this.value = '';}",'onblur'=>"if (this.value == ''){this.value = '".$about_yourself."'; }"
	$form['about_yourself'] = array(
	'#type' => 'textarea',
	'#size' => '30',
	'#prefix'=>'<div class="about_profile"><div class="textarea">',
	'#suffix'=>'</div>',
	'#attributes'=>array('onblur'=>'getImgsrc();','placeholder'=>'About Yourself'),
    '#default_value'=>($about_yourself)?$about_yourself:'',
	'#required'=>true
	);
	
	  $form['submit'] = array(
	  '#type' => 'submit',
	  '#value' => t('Next'),
	  '#attributes'=>array('class'=>array('button', 'pull-right')),
	  '#prefix'=>'<div class="row submitrow"><div class="pull-right"><a class="latter" href="'.$base_url.'/user/step3">Do this later </a>',
	  '#suffix'=>'</div></div></div>'
	  );

  return $form;
}
function about_yourself_form_submit($form, &$form_state){

	global $user,$base_url;
	$image_url=trim($form_state['input']['Profile_picture']);
	$about_yourself=trim($form_state['input']['about_yourself']);
	
	$query=db_select('field_revision_field_about_yourself','u')
		  ->fields('u')
		  ->condition('entity_id',$user->uid);
	$result=$query->execute();
	$num_of_results = $result->rowCount();
	if($num_of_results==1){

	$query = db_update("gbl_users_meta")->fields(array('about_yourself'=>$about_yourself))->condition('uid',$user->uid);
		$result = $query->execute();
		$query2 = db_update("field_revision_field_about_yourself")->fields(array('field_about_yourself_value'=>$about_yourself))->condition('entity_id',$user->uid);
		$result2 = $query2->execute();
		$query3 = db_update("field_data_field_about_yourself")->fields(array('field_about_yourself_value'=>$about_yourself))->condition('entity_id',$user->uid);
		$result3 = $query3->execute();
		 drupal_flush_all_caches();
		
	}else{
			$query = db_update("gbl_users_meta")->fields(array('about_yourself'=>$about_yourself))->condition('uid',$user->uid);
			$result = $query->execute();
			$query2 = db_insert("field_revision_field_about_yourself")->fields(array('entity_type'=>'user','bundle'=>'user','deleted'=>'0','entity_id'=>$user->uid,'revision_id'=>$user->uid,'language'=>'und','delta'=>'0','field_about_yourself_value'=>$about_yourself));
			$result2 = $query2->execute();
			$query3 = db_insert("field_data_field_about_yourself")->fields(array('entity_type'=>'user','bundle'=>'user','deleted'=>'0','entity_id'=>$user->uid,'revision_id'=>$user->uid,'language'=>'und','delta'=>'0','field_about_yourself_value'=>$about_yourself));
			$result3 = $query3->execute();

	}
	/**************Saving Profile Picture********************/
	if($image_url){
		$image_name='/picture-'.$user->uid.'-'.REQUEST_TIME.'.jpg';
		$data = $image_url;
	    list($type, $data) = explode(';', $data);
	    list(, $data)      = explode(',', $data);
	    $data_decode = base64_decode($data);
	  	$picture_directory =  file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures');
		file_prepare_directory($picture_directory, FILE_CREATE_DIRECTORY);
        $destination = file_stream_wrapper_uri_normalize($picture_directory . $image_name);
        
		$success = file_put_contents($destination,  $data_decode);
	
		
	$query=db_select('file_managed','f')
		  ->fields('f')
		  ->condition('uid',$user->uid)
		  ->condition('is_profile_pic','yes');
	$result=$query->execute();
	$num_of_results = $result->rowCount();
	if($num_of_results==1){
		$query = db_update("file_managed")->fields(array('uri'=>$destination))->condition('uid',$user->uid)->condition('is_profile_pic','yes');
				$result = $query->execute();

		$query=db_select('file_managed','f')
				  ->fields('f',array('fid'))
				  ->condition('uid',$user->uid)
				  ->condition('is_profile_pic','yes');
			$result=$query->execute();
			$FId_id = $result->fetchField();
		$query = db_update("users")->fields(array('picture'=>$FId_id))->condition('uid',$user->uid)->execute();
		$result='submit';
	}else{
		
		$Fid= db_insert('file_managed')->fields(array('uid'=>$user->uid,'uri'=>$destination,'is_profile_pic'=>'yes','timestamp'=>time()))->execute();
		$query = db_update("users")->fields(array('picture'=>$Fid))->condition('uid',$user->uid)->execute();
		$result='submit';	
	}
	}else{
		$result='submit';	
	}
	drupal_flush_all_caches();
	if($result='submit'){
			
		drupal_goto('user/step3');

	}
}
/************************15June2015***********************/
function Confirm_user(){
		global $user,$base_url;
		$uid=$user->uid;
		
		if(!$user->uid){
		drupal_goto('login');
		}
		/**************Facebook Logged in user***********************/
		
		$query=db_select('fboauth_users','fb');
		$query->fields('fb',array('uid','fbid'));
		$query->condition('uid',$uid);
		$result=$query->execute();
		$facebook_login=$result->fetchAssoc();
		if(!empty($facebook_login)){
	
			drupal_goto('user_profile');
		}else{ 
		/************************************************************/
		
		$query=db_select('gbl_users_meta','u');
		$query->fields('u',array('confirmation_id','confirm_status'));
		$query->condition('uid',$uid);
		$result=$query->execute();
		$data_confirm=$result->fetchAssoc();
	if(isset($_REQUEST['confirmId'])){
		$confirmation_id=$data_confirm['confirmation_id'];
		if($_REQUEST['confirmId']==$confirmation_id){
			$query = db_update("gbl_users_meta")->fields(array('confirm_status'=>'yes'))->condition('uid',$user->uid);
			$result=$query->execute();
			$text = "Account Confirmed Successfully. You’re now a gloober, welcome to the tribe and enjoy!";
			$data=array('result'=>$text,'confirm_status'=>'yes');
			//drupal_goto('user/step2');
			drupal_goto('user_profile');
		}else{
			$text = "Wrong Link hit by User Please Try again.";
			$data=array('result'=>$text,'confirm_status'=>'no');
			
		}
	}
	else{	
		$confirm_status=$data_confirm['confirm_status'];
		if($confirm_status == 'yes'){
			drupal_goto('user_profile');
			//drupal_goto('user/step2');
			$text = "We have already sent you a confirmation email.";
			$data=array('result'=>$text,'confirm_status'=>'yes');
		}
		else{
			$text = "We have just sent you a confirmation email. Please click on the link you received. <br/>
					If you do not see any email from us within a few minutes, check out your junk box.";
			$data=array('result'=>$text,'confirm_status'=>'no');
			
		}
	}
	return theme('Confirm_user',$data);
	}
}
function Confirming_user(){
	global $user;
	$uid=$user->uid;
	$query=db_select('gbl_users_meta','u');
	$query->fields('u',array('confirmation_id'));
	$query->condition('uid',$uid);
	$result=$query->execute();
	$confirmation_id=$result->fetchField();
	if($_REQUEST['confirmId']==$confirmation_id){
		$query = db_update("gbl_users_meta")->fields(array('confirm_status'=>'yes'))->condition('uid',$user->uid);
		$result=$query->execute();
		$text = "Account Confirmed Successfully. Please proceed for next step.";
		$data=array('result'=>$text,'confirm_status'=>'yes');
		return theme('Confirm_user',$data);
	}else{
		$text = "Wrong Link hit by User Please Try again.";
		$data=array('result'=>$text,'confirm_status'=>'no');
		return theme('Confirm_user',$data);
	}
}
function generateRandomString($length = 10) {
    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $charactersLength = strlen($characters);
    $randomString = '';
    for ($i = 0; $i < $length; $i++) {
        $randomString .= $characters[rand(0, $charactersLength - 1)];
    }
    return $randomString;
}

/************************end15June2015********************/
/************************22June2015***********************/
function add_user_passion(){
   global $user;
   if(!$user->uid){
		drupal_goto('login');
	}
   $passionlist=getPassionList();
   $data=array('passionlist'=>$passionlist);
   return theme('user_passions',$data);
}
function edit_user_passion(){
	global $user;
	if(!$user->uid){
		drupal_goto('login');
	}
   $passionlist=getPassionList();
   $data=array('passionlist'=>$passionlist);
   return theme('user_passions',$data);
}
function add_passeport(){

	global $user;
	if(!$user->uid){
		drupal_goto('login');
	}

  
  $query=db_select('gbl_user_passeport','p')
		  ->fields('p')
		  ->condition('uid',$user->uid);
  $result=$query->execute();
  $Passeports=$result->fetchAll(PDO::FETCH_ASSOC);
  $passeport_types=get_passeport_types();
  $data=array('passeports'=>$Passeports,'passeport_types'=>$passeport_types);

  return theme('add_passeport_step',$data);

}
function get_passeport_types(){

  $query=db_select('gbl_passeport_type','p')
		  ->fields('p',array('description'));
  $result=$query->execute();
  $Passeports_type=$result->fetchAll(PDO::FETCH_ASSOC);
  return $Passeports_type;
}
function add_user_passeport(){

  global $user;
  $location=trim($_REQUEST['location']);
  //echo $_REQUEST['location'];exit;
  $description=trim($_REQUEST['description']);
  $query=db_select('gbl_user_passeport','p')
		  ->fields('p')
		  ->condition('uid',$user->uid)
		  ->condition('location',$location);
  $result=$query->execute();
  $data = $result->fetchAssoc();
	
	
	if(empty($data)){
	
		if(trim($description)=='I live there'){
		
			$query=db_select('gbl_user_passeport','p')
				  ->fields('p')
				  ->condition('uid',$user->uid)
				  ->condition('description',$description);
				 
			$result=$query->execute();
			$data_homeTown = $result->fetchAssoc();
		
			if(empty($data_homeTown)){
			
				$result = db_insert('gbl_user_passeport')->fields(array('uid'=>$user->uid,'location'=>$location,'description'=>$description,'created'=>time()))->execute();
			}else{
				$result = db_update('gbl_user_passeport')->fields(array('uid'=>$user->uid,'location'=>$location,'description'=>$description)) ->condition('uid',$user->uid)->condition('description',$description)->execute();
			}
		}else{
			$result = db_insert('gbl_user_passeport')->fields(array('uid'=>$user->uid,'location'=>$location,'description'=>$description,'created'=>time()))->execute();
		}
		$query=db_select('gbl_user_passeport','p')
		  ->fields('p')
		  ->condition('uid',$user->uid);
		  $result2=$query->execute();
		  $alldata = $result2->fetchAll(PDO::FETCH_ASSOC);
		$str='';
		foreach($alldata as $alldat){
			$str .='<span class="tagmanagerTag" tag="'.$alldat['location'].'">'.$alldat['location'].'<a class="tagmanagerRemoveTag" onclick="Delete_passeport(this)"  title="Remove" href="javascript:void(0);">x</a></span>';
		}		 
		echo $str;exit;
		$result='inserted';
		
	}else{
	
		$query=db_select('gbl_user_passeport','p')
			  ->fields('p')
			  ->condition('uid',$user->uid);
			  $result2=$query->execute();
			  $alldata = $result2->fetchAll(PDO::FETCH_ASSOC);
			$str='';
			foreach($alldata as $alldat){
				$str .='<span class="tagmanagerTag" tag="'.$alldat['location'].'">'.$alldat['location'].'<a class="tagmanagerRemoveTag" onclick="Delete_passeport(this)"  title="Remove" href="javascript:void(0);">x</a></span>';
			}
		echo $str;exit;
		
	}
}
function del_user_passeport(){
	global $user;
	$query=db_delete('gbl_user_passeport') 
			  ->condition('uid',$user->uid)
			  ->condition('location',$_REQUEST['location'])
			  ->execute();
	 $query=db_select('gbl_user_passeport','p')
		  ->fields('p')
		  ->condition('uid',$user->uid);
	$result=$query->execute();
	$data=$result->fetchAll(PDO::FETCH_ASSOC);

	$renderedHtml='';
	if(!empty($data)){ 
			foreach($data as $passeport)
			{
				$renderedHtml .= '<span  class="tagmanagerTag" tag="'.$passeport['location'].'">'.$passeport['location'].'<a class="tagmanagerRemoveTag" title="Remove" onclick="Delete_passeport(this)" id="'.$passeport['location'].'"  href="javascript:void(0);">x</a></span>';
			
			}
	}
	echo $renderedHtml;exit;
}
function get_user_passeport(){
global $user;
$query=db_select('gbl_user_passeport','p')
		  ->fields('p')
		  ->condition('uid',$user->uid);
	$result=$query->execute();
	$data=$result->fetchAll(PDO::FETCH_ASSOC);
	$location=array();
	$description=array();
	$location=array();
	$description=array();
	foreach($data as $dat){
	
		$location[]= $dat['location'];
		$description[]=$dat['description'];
		
		
	}
	echo json_encode($location).'|'.json_encode($description);exit;
}
/***********************end22june2015********************/

/*********25June2015***************/
function user_contact_information_form($form, &$form_state){
		
		global $user,$base_url;
		if(!$user->uid){
			drupal_goto('login');
		}
		$countrydata = array();
		$query=db_select('gbl_country_list','u');
		$query->fields('u',array('country_name','phone_code'));
		$result=$query->execute();
		$countries=$result->fetchAll(PDO::FETCH_ASSOC);
		
		$options=array();
		foreach ($countries as $country) {
			$options['+'.$country['phone_code']]=$country['country_name'].'(+'.$country['phone_code'].')';
		}
		natsort($options);
	 $form['FORM_HTML_START'] =	 array(
	 '#prefix'=>'<div class="row"><div class="search_place"><div class="row">'
	 );
	 $form['country_code'] = array(
       '#type' => 'select',
       '#attributes'=>array('class'=>array('select', 'select_box')),
       '#prefix'=>'<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">',
       '#suffix'=>'</div>',
       '#options' => $options,
       '#default_value' => 'Area Code',
   	);


	$form['phone'] = array(
      '#type' => 'textfield',
      '#prefix'=>'<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">',
      '#attributes'=>array('maxlength'=>16,'placeholder'=>'Your phone number'),
      '#suffix'=>'</div>',
      '#default_value' => '',
      '#required' => false,
    );
	$form['END-FORM_HTML_START'] =	 array(
	 '#prefix'=>'</div></div></div>',
	 '#suffix'=>'<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12 col-lg-offset-3 col-md-offset-3 col-sm-offset-3"></div>'
	 );
    $form['submit'] = array(
  	'#type' => 'submit',
  	'#value' => t('Next'),
	'#attributes'=>array('class'=>array('button', 'pull-right')),
  	'#prefix'=>'<div class="row submitrow"><div class="pull-right mar_top">',
  	'#suffix'=>'</div></div>'
  );

	return $form;
}
function user_contact_information_form_validate($form, &$form_state) {

  $phoneno = $form_state['values']['phone'];

  $phonenumber_length = strlen($form_state['values']['phone']);
  if($phonenumber_length > 16){
  	form_set_error('phone', t('Phone number digits must be less than 16'));
  }
  $formats = array('###-###-####', '####-###-###',
                 '(###) ###-###', '####-####-####',
                 '##-###-####-####', '####-####', '###-###-###',
                 '#####-###-###', '##########','#########' , '###########');

	$number = $phoneno;

	if(!validate_telephone_number($number, $formats))
		{
		 form_set_error('phone number',t('Please enter valid phone number'));
	}
	
}

function user_contact_information_form_submit(){
	global $user;
   	$uid=$user->uid;

   	$phone = $_POST['phone'];
   	$country_code = $_POST['country_code'];
   	$query=db_select('gbl_users_meta','u');
	$query->fields('u',array('country_code','mobile'));
	$query->condition('uid',$uid);
	$result=$query->execute();
	$count = $result->rowCount();
	
	if($count == '1'){
		$query = db_update("gbl_users_meta")->fields(array('mobile'=>$phone,'country_code'=>$country_code))->condition('uid',$uid);
		$result=$query->execute();
		drupal_goto('user/step2');

	}
	else{
		
		$query=db_insert('gbl_users_meta');
		$query->fields(array('mobile'=>$phone,'country_code'=>$country_code,'uid'=> $uid));
		$result=$query->execute();
		drupal_goto('user/step2');
		
	}
} 

function user_contact_information(){
	
	$contact_information = drupal_get_form('user_contact_information_form');
	$contact_information=drupal_render($contact_information);
	return theme('user_contact_information',array('contact_information'=>$contact_information));

}


/************end25june2015**********/
/**************29June2015************/
function test_profile(){
drupal_flush_all_caches();
return theme('test_profile',array('contact_information'=>$contact_information));
}

function email_template(){
	return theme('email_template');

}

/************2july2015*****************/
/// ----------------------User Profile Section-----------------------//


function user_profile_section(){
	
	global $user;
	/*if(!$user->uid){
        $dest = drupal_get_destination();
        $_SESSION['destination']  = $dest["destination"];
        drupal_goto('login',$dest);
    }*/
	if(strpos($_SERVER['HTTP_USER_AGENT'], 'facebookexternalhit')!==false){
		//$mayText='Here1\n';
	}else{
	
		//$mayText='NoHere1\n';
		if((!$user->uid)){
			$dest = drupal_get_destination();
			$_SESSION['destination']  = $dest["destination"];
			drupal_goto('login',$dest);
		}
	}
   	$uid=$user->uid;
	

   	$query=db_select('gbl_users_meta','u');
	$query->fields('u',array('occupation','confirm_status','language','mobile','about_yourself'));
	$query->condition('uid',$uid);
	$result=$query->execute();
	$Main_user_data=$result->fetchAll(PDO::FETCH_ASSOC);
	

	$query=db_select('gbl_user_passeport','gup');
	$query->fields('gup',array('location'));
	$query->condition('uid',$uid);
	$query->condition('description','I live there');
	$result1=$query->execute();
   	$location=$result1->fetchField();
   	

   	$query = db_select('gbl_languages','l');
   	$query ->fields('l');
   	$result2 = $query->execute();
   	$language=$result2->fetchAll(PDO::FETCH_ASSOC);

   	

   	$query = db_select('file_managed','f');
   	$query->fields('f',array('uri'));
   	$query->condition('uid',$uid);
   	$query->condition('is_profile_pic','yes');
	$result3=$query->execute();
	$profile_pic=$result3->fetchField();
   	
	$query = db_select('file_managed','f');
   	$query->fields('f',array('uri'));
   	$query->condition('uid',$uid);
   	$query->condition('is_cover_pic','yes');
	$result4=$query->execute();
	$cover_pic=$result4->fetchField();
   	

	$query=db_select('gbl_user_passeport','p')
		  ->fields('p')
		  ->condition('uid',$user->uid);
	  $result=$query->execute();
	  $Passeports=$result->fetchAll(PDO::FETCH_ASSOC);
	$user_passion = getUserPassionList($uid);
	$passeport_types=get_passeport_types();
	$passeportListDOM = theme('passeport_dom_file',array('passeports'=>$Passeports,'passeport_types'=>$passeport_types));

	return theme('user_profile_section',array('passeportListDOM'=>$passeportListDOM ,'Main_user_data'=>$Main_user_data ,
		'loc'=>$location,'language'=>$language,'passeports'=>$Passeports,'profile_pic'=>$profile_pic,'cover_pic'=>
		$cover_pic,'passionlist'=>$user_passion,'selected_language'=> $selected_language));
}


/// --------------------------------End -------------------------------//

function add_user_hometown(){
 global $user;
 $uid=$user->uid;
 $hometown = $_POST['homtown'];
 $query_get=db_select('gbl_user_passeport','u')->fields('u')->condition('uid',$uid)->condition('description','I live there');
 $result1=$query_get->execute();
 $result =$result1->rowCount();

  if($result==1){
	$query = db_update("gbl_user_passeport")->fields(array('location'=>$hometown))->condition('uid',$uid)->condition('description','I live there');
	 $result=$query->execute();
  }else{
  	$query = db_insert("gbl_user_passeport")->fields(array('location'=>$hometown,'uid'=>$uid,'description'=>'I live there'));
	$result=$query->execute();
  }
  
	$query_get=db_select('field_revision_field_city','u')->fields('u')->condition('entity_id',$uid);
	$result1=$query_get->execute();
	$result =$result1->rowCount();

  if($result==1){
	$query = db_update("field_revision_field_city")->fields(array('field_city_value'=>$hometown))->condition('entity_id',$uid);
	 $result=$query->execute();
  }else{
  	$query = db_insert("field_revision_field_city")->fields(array('field_city_value'=>$hometown,'entity_id'=>$uid));
	$result=$query->execute();
  }
 
  $query_get=db_select('field_data_field_city','u')->fields('u')->condition('entity_id',$uid);
	$result1=$query_get->execute();
	$result =$result1->rowCount();

  if($result==1){
	$query = db_update("field_data_field_city")->fields(array('field_city_value'=>$hometown))->condition('entity_id',$uid);
	 $result=$query->execute();
  }else{
  	$query = db_insert("field_data_field_city")->fields(array('field_city_value'=>$hometown,'entity_id'=>$uid));
	$result=$query->execute();
  }
  
	$query = db_update("gbl_users_meta")->fields(array('city'=>$hometown))->condition('uid',$uid);
	$result=$query->execute();
	drupal_flush_all_caches();
    echo "Done";exit; 
}
function add_user_occupation(){
 global $user;
 $uid=$user->uid;
 $occupation = $_POST['occupation'];
 $query = db_update("gbl_users_meta")->fields(array('occupation'=>$occupation))->condition('uid',$uid);
 $result=$query->execute();
if($result){
 	echo "Data updated";
 }
 else{
 	echo "Error ";
 }
}

function add_user_language(){
	global $user;
	$uid=$user->uid;
	$new_languages=array();
	$language = $_POST['language'];
	$new_languages[]=$language;


	$query_get=db_select('gbl_users_meta','u')->fields('u',array('language'))->condition('uid',$uid);
	$result_get=$query_get->execute();
	$data = $result_get->fetchAssoc();
	
	if($data['language']){
		
		$already_languages=unserialize($data['language']);
	
		if (in_array($language, $already_languages)) {
			$already_languages=$already_languages;
			$result='alreadyexists';
	
		}else{
			$already_languages=array_merge($new_languages,$already_languages);
			$result='updated';
		}
	}else{

		$already_languages = $new_languages;

	}
	$already_languages=serialize($already_languages);
	$query = db_update("gbl_users_meta")->fields(array('language'=>$already_languages))->condition('uid',$uid);
	$result=$query->execute();

	$query_get_all=db_select('gbl_users_meta','u')->fields('u',array('language'))->condition('uid',$uid);
	$result_get_all=$query_get_all->execute();
	$data_all = $result_get_all->fetchAssoc();
	$all_data=unserialize($data_all['language']);
	$lang='';
	foreach($all_data as $all_dat){
		$lang .='<span class="tagmanagerTag" tag="'.$all_dat.'">'.$all_dat.'<a class="tagmanagerRemoveTag" onclick="Delete_language(this)"  title="Remove" href="javascript:void(0);">x</a></span>';
	}
	echo $lang;exit;
}
function update_basic_info(){

	global $user;
	$about_yourself=trim($_REQUEST['about_me']);
	$query=db_select('gbl_users_meta','u')
		  ->fields('u')
		  ->condition('uid',$user->uid);
	$result=$query->execute();
	$num_of_results = $result->rowCount();
	if($num_of_results==1){
		$query = db_update("gbl_users_meta")->fields(array('about_yourself'=>$about_yourself))->condition('uid',
			$user->uid);
		$result = $query->execute();
		$query_exists = db_select("field_revision_field_about_yourself",'fu')->fields('fu')->condition('entity_id',$user->uid);
		$result_exist = $query_exists->execute();
		$result_exists_count = $result_exist->rowCount();
		if($result_exists_count >=1){
			$query2 = db_update("field_revision_field_about_yourself")->fields(array('field_about_yourself_value'=>$about_yourself))->condition('entity_id',$user->uid);
			$result2 = $query2->execute();
			$query3 = db_update("field_data_field_about_yourself")->fields(array('field_about_yourself_value'=>$about_yourself))->condition('entity_id',$user->uid);
			$result3 = $query3->execute();
			echo "Successfully updated";
		}else{
			$query2 = db_insert("field_revision_field_about_yourself")->fields(array('entity_type'=>'user','bundle'=>'user','deleted'=>'0','entity_id'=>$user->uid,'revision_id'=>$user->uid,'language'=>'und','delta'=>'0','field_about_yourself_value'=>$about_yourself));
			$result2 = $query2->execute();
			$query3 = db_insert("field_data_field_about_yourself")->fields(array('entity_type'=>'user','bundle'=>'user','deleted'=>'0','entity_id'=>$user->uid,'revision_id'=>$user->uid,'language'=>'und','delta'=>'0','field_about_yourself_value'=>$about_yourself));
			$result3 = $query3->execute();
			echo "Successfully Added";
		}
		drupal_flush_all_caches();
	}
	
	exit;
}

function delete_user_language(){
	global $user;
	$uid=$user->uid;
	$language = $_POST['language'];
	$query_get=db_select('gbl_users_meta','u')->fields('u',array('language'))->condition('uid',$uid);
	$result_get=$query_get->execute();
	$data = $result_get->fetchAssoc();

	if($data['language']){
		$languages=unserialize($data['language']);
		$key = array_search($language, $languages);
		unset($languages[$key]);
		$query = db_update("gbl_users_meta")->fields(array('language'=>serialize($languages)))->condition('uid',$uid);
		$result=$query->execute();
		
		$query_get_all=db_select('gbl_users_meta','u')->fields('u',array('language'))->condition('uid',$uid);
		$result_get=$query_get_all->execute();
		$data_get_all = $result_get->fetchAssoc();
		$langs_all=unserialize($data_get_all['language']);
		$lng='';
		foreach($langs_all as $langs_al){
			$lng .='<span class="tagmanagerTag" tag="'.$langs_al.'">'.$langs_al.'<a class="tagmanagerRemoveTag" onclick="Delete_language(this)"  title="Remove" href="javascript:void(0);">x</a></span>';
		}
		echo $lng;exit;
	}
}

function updateDp(){
	global $user;
	if($_POST['profile_pic'] !='0'){ 
		$image_name='picture-'.$user->uid.'-'.REQUEST_TIME.'.jpg';
		$data = $_POST['profile_pic'];
	    list($type, $data) = explode(';', $data);
	    list(, $data)      = explode(',', $data);
	    $data_decode = base64_decode($data);
	  	$picture_directory =  file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures');
		file_prepare_directory($picture_directory, FILE_CREATE_DIRECTORY);
        $destination = file_stream_wrapper_uri_normalize($picture_directory.'/'. $image_name);
        
		$success = file_put_contents($destination,  $data_decode);
			
			$query=db_select('file_managed','u')
			  ->fields('u')
			  ->condition('is_profile_pic','yes')
			  ->condition('uid',$user->uid);
			$result=$query->execute();
			$num_of_results = $result->rowCount();
		
			if($num_of_results==1){
		
				$update_Dp = db_update("file_managed")
							->fields(array('uri'=> $destination,'filename'=>$image_name))
							->condition('uid',$user->uid)
							->condition('is_profile_pic','yes');
				$update=$update_Dp->execute();
				
				$update_Dp_id = db_select("file_managed",'f')
							->fields('f',array('fid'))
							->condition('uid',$user->uid)
							->condition('is_profile_pic','yes');
				$update_Dp_res=$update_Dp_id->execute();
				$update_Dp_res_id=$update_Dp_res->fetchField();
				
				$update_user_Dp = db_update("users")
							->fields(array('picture'=>$update_Dp_res_id))
							->condition('uid',$user->uid);
				$update_user=$update_user_Dp->execute();
				$result='1';
				
			}else{
			
				$insert_Dp = db_insert("file_managed")->fields(array('uri'=>$destination,'filename'=>$image_name,'uid'=>$user->uid,'is_profile_pic'=>'yes','status'=>'1'));
				$lastId=$insert_Dp->execute();
				$update_user_Dp = db_update("users")
							->fields(array('picture'=>$lastId))
							->condition('uid',$user->uid);
				$update_user=$update_user_Dp->execute();
				$result='0';
			}
	}
	
	if($_POST['cover_pic'] !='0'){
	
		$image_name='cover-picture-'.$user->uid.'-'.REQUEST_TIME.'.jpg';
		$data = $_POST['cover_pic'];
	    list($type, $data) = explode(';', $data);
	    list(, $data)      = explode(',', $data);
	    $data_decode = base64_decode($data);
	  	$picture_directory =  file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures');
		file_prepare_directory($picture_directory, FILE_CREATE_DIRECTORY);
        $destination = file_stream_wrapper_uri_normalize($picture_directory.'/'. $image_name);
        
		$success = file_put_contents($destination,  $data_decode);
		
		$query=db_select('file_managed','u')
		  ->fields('u')
		  ->condition('is_cover_pic','yes')
		  ->condition('uid',$user->uid);
		$result=$query->execute();
		$num_of_results = $result->rowCount();
		if($num_of_results==1){
			$update_Cp = db_update("file_managed")->fields(array('uri'=>$destination,'filename'=>$image_name))->condition('uid',$user->uid)->condition('is_cover_pic','yes');
			$updateId=$update_Cp->execute();
			
			$update_Cp_id = db_select("file_managed",'f')
							->fields('f',array('fid'))
							->condition('uid',$user->uid)
							->condition('is_cover_pic','yes');
			$update_Cp_res=$update_Cp_id->execute();
			$update_Cp_res_id=$update_Cp_res->fetchField();
			
			$update_user_Cp = db_update("gbl_users_meta")
							->fields(array('cover_pic'=>$update_Cp_res_id))
							->condition('uid',$user->uid);
			$update_user=$update_user_Cp->execute();
			$result='1';
		}else{
			$insert_Cp = db_insert("file_managed")
							->fields(array('uri'=>$destination,
											'uid'=>$user->uid,
											'filename'=>$image_name,
											'is_cover_pic'=>'yes',
											'status'=>'1')
									);
			$lastId=$insert_Cp->execute();
			$update_user_Cp = db_update("gbl_users_meta")
							->fields(array('cover_pic'=>$lastId))
							->condition('uid',$user->uid);
			$update_user=$update_user_Cp->execute();
			$result='0';
		}
	} 
	echo "Updated";exit;
}

function user_search(){
	global $user;
	return theme('user_search');
}

function get_user_passeport_hometown(){
	global $user;
	
	$query=db_select('gbl_user_passeport','p')
		  ->fields('p',array('location'))
		  ->condition('description','I live there')
		  ->condition('uid',$user->uid);
	$result=$query->execute();
	$data=$result->fetchField();
	return $data;

}

function account_settings(){
	global $user;
    if(!$user->uid){
        $dest = drupal_get_destination();
        $_SESSION['destination']  = $dest["destination"];
        drupal_goto('login',$dest);
    }

$account_settings_form=drupal_get_form('account_settings_form');

return theme('account_settings',array('account_settings_form'=>$account_settings_form));

}

function account_settings_form($form, &$form_state){
	
	global $user,$base_url;
	$userdetail=user_load($user->uid);
	if(!$user->uid){drupal_goto('login');}
	$count_log2=0;
	require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
	$enc_pass=user_check_password($userdetail->pass, $user);
	$query=db_select('gbl_users_meta','u');
	$query->fields('u',array('mobile','country_code'));
	$query->condition('uid',$user->uid);
	$result=$query->execute();
	$mob_info=$result->fetchAll(PDO::FETCH_ASSOC);
	
	$countrydata = array();
	$query=db_select('gbl_country_list','u');
	$query->fields('u',array('country_name','phone_code'));
	$result=$query->execute();
	$countries=$result->fetchAll(PDO::FETCH_ASSOC);
	$options=array();
	foreach ($countries as $country) {
			
			$options['+'.$country['phone_code']]=$country['country_name'].'(+'.$country['phone_code'].')';
		}

	natsort($options);

	$form['first_name'] = array(
    '#type' => 'textfield',
    '#attributes' => array(  ),
	'#default_value'=>($userdetail->field_first_name['und'][0]['value'])?$userdetail->field_first_name['und'][0]['value']:'',
	'#prefix'=>'<div class="row"><fieldset class="col-lg-4 col-sm-6"><label>'.t('First name').'<span class="form-required"> *</span></label>',
	'#suffix'=>'</fieldset>'
	); 

	$form['last_name'] = array(
    '#type' => 'textfield',
    '#attributes' => array(  ),
	'#default_value'=>($userdetail->field_last_name['und'][0]['value'])?$userdetail->field_last_name['und'][0]['value']:'',
	'#prefix'=>'<fieldset class="col-lg-4 col-sm-6"> <label>'.t('Last name').'<span class="form-required"> *</span></label>',
	'#suffix'=>'</fieldset></div>'
	);
	$form['email'] = array(
    '#type' => 'textfield',
    '#attributes' => array(),
	'#default_value'=>$userdetail->mail,
	'#prefix'=>'<div class="row"><fieldset class="col-lg-4 col-sm-6"><label>'.t('Email').'<span class="form-required"> *</span></label>',
	'#suffix'=>'</fieldset>'
	);
	
	$form['current_password'] = array(
    '#type' => 'password',
    '#attributes' => array('readonly'=>'true','value'=>'********' ),
	'#prefix'=>'<fieldset class="col-lg-4 col-sm-6"><label>'.t('Current password').'</label>',
	'#suffix'=>'</fieldset><fieldset class="col-lg-4"><label></label><a href="'.$base_url.'/user/changepassword" class="latter">'.t('Change password').'</a></fieldset> </div>',
	);
	$form['country_code'] = array(
    '#type' => 'select',
	'#options'=>$options,
    '#attributes' => array('class'=>array('select_box'),'id'=>'Yh' ),
	'#default_value'=>($mob_info[0]['country_code'])?$mob_info[0]['country_code']:'',
	'#prefix'=>'<div class="row"><fieldset class="col-lg-6 col-sm-12"> <label>'.t('Phone number').'<span class="form-required"> *</span></label><div class="row"><div class="col-lg-5 col-sm-6">',
	'#suffix'=>'</div>'
	);
	$form['phone_number'] = array(
    '#type' => 'textfield',
	'#attributes' => array('maxlength'=>16),
	'#prefix'=>'<div class="col-lg-7 col-sm-6 paddng_left">',
	'#suffix'=>'</div></div></fieldset></div>',
	'#default_value'=>($mob_info[0]['mobile'])?$mob_info[0]['mobile']:'',
	
	);
	
	$form['Submit'] = array(
    '#type' => 'submit',
	'#attributes' => array( 'class'=>array('button','pull-right') ),
	'#value'=>'Save',
	'#prefix'=>'<div class="row col-lg-10 col-md-10 col-sm-10 col-xs-12"><fieldset class="col-lg-4 pull-right">',
	'#suffix'=>'</fieldset></div>'
	);
	
  return $form;
}


function account_settings_form_validate($form, &$form_state) {

	$firstname=$form_state['values']['first_name'];
	$lastname=$form_state['values']['last_name'];
	$phoneno=$form_state['values']['phone_number'];
	$Email=$form_state['values']['email'];
	$isEmail=valid_email_address($Email);
	if(!$isEmail){
		form_set_error('Email',t('Please enter valid email address.'));	
	}
	$phonenumber_length = strlen($phoneno);
	 
	$formats = array('###-###-####', '####-###-###',
                 '(###) ###-###', '####-####-####',
                 '##-###-####-####', '####-####', '###-###-###',
                 '#####-###-###', '##########','#########' , '###########');

	$number = $phoneno;

	  if(!validate_telephone_number($number, $formats)){
		form_set_error('phone number',t('Please enter valid phone number.'));
	  }
		
	  if($firstname ==''){
		form_set_error('first name', t('Please add your first name.'));
	  }
	  if($lastname ==''){
		form_set_error('last name', t('Please add your last name.'));
	  }
	  if($phoneno ==''){
		form_set_error('phone number', t('Please add your Phone number.'));
	  }
  
	 if($phonenumber_length >17){
		form_set_error('phone number', t('Phone number length cannot be greater than 16.'));
	  }
}
function validate_telephone_number($number, $formats)
{
	$format = trim(ereg_replace("[0-9]", "#", $number));
	return (in_array($format, $formats)) ? true : false;
}
function account_settings_form_submit($form, &$form_state){
	
	global $user;
	$uid=$user->uid;
	$username=$user->name;
	$firstname=trim($_POST['first_name']);
	$lastname=trim($_POST['last_name']);
	$email=trim($_POST['email']);
	$current_password=trim($_POST['current_password']);
	$country_code=trim($_POST['country_code']);
	$phone_number=trim($_POST['phone_number']);
	
	/*Update Email */
	$Update_userEmail= db_update("users")
				 ->fields(array('mail'=>$email))
				->condition('uid',$uid);
    $result_email = $Update_userEmail->execute();
	/*End Update Email */
	
	$Update_user_meta_info= db_update("gbl_users_meta")
				 ->fields(array('first_name'=>$firstname,'last_name'=>$lastname,'country_code'=>$country_code,'mobile'=>$phone_number))
				->condition('uid',$uid);
    $result = $Update_user_meta_info->execute();
	
	$query_exists = db_select("field_data_field_first_name",'fu')->fields('fu')->condition('entity_id',$uid);
	$result_exist = $query_exists->execute();
	$result_exists_count = $result_exist->rowCount();
	if($result_exists_count ==1){
		$query2 = db_update("field_data_field_first_name")->fields(array('field_first_name_value'=>$firstname))->condition('entity_id',$uid);
		$result2 = $query2->execute();
		$query3 = db_update("field_revision_field_first_name")->fields(array('field_first_name_value'=>$firstname))->condition('entity_id',$uid);
		$result3 = $query3->execute();
	}else{
		$query2 = db_insert("field_data_field_first_name")->fields(array('entity_type'=>'user','bundle'=>'user','deleted'=>'0','entity_id'=>$uid,'revision_id'=>$uid,'language'=>'und','delta'=>'0','field_first_name_value'=>$firstname,'field_first_name_format'=>NULL));
		$result2 = $query2->execute();
		$query3 = db_insert("field_revision_field_first_name")->fields(array('entity_type'=>'user','bundle'=>'user','deleted'=>'0','entity_id'=>$uid,'revision_id'=>$uid,'language'=>'und','delta'=>'0','field_first_name_value'=>$firstname,'field_first_name_format'=>NULL));
		$result3 = $query3->execute();
	}
	
	$query_exists = db_select("field_data_field_last_name",'fu')->fields('fu')->condition('entity_id',$uid);
	$result_exist = $query_exists->execute();
	$result_exists_count = $result_exist->rowCount();
	if($result_exists_count ==1){
		$query2 = db_update("field_data_field_last_name")->fields(array('field_last_name_value'=>$lastname))->condition('entity_id',$uid);
		$result2 = $query2->execute();
		$query3 = db_update("field_revision_field_last_name")->fields(array('field_last_name_value'=>$lastname))->condition('entity_id',$uid);
		$result3 = $query3->execute();
	}else{
        $query2 = db_insert("field_data_field_last_name")->fields(array('entity_type'=>'user','bundle'=>'user','deleted'=>'0','entity_id'=>$uid,'revision_id'=>$uid,'language'=>'und','delta'=>'0','field_last_name_value'=>$lastname,'field_last_name_format'=>NULL));
		$result2 = $query2->execute();
		$query3 = db_insert("field_revision_field_last_name")->fields(array('entity_type'=>'user','bundle'=>'user','deleted'=>'0','entity_id'=>$uid,'revision_id'=>$uid,'language'=>'und','delta'=>'0','field_last_name_value'=>$lastname,'field_last_name_format'=>NULL));
		$result3 = $query3->execute();
	}

	/*************Check User input Password is right or wrong********************/
	
	//drupal_flush_all_caches();
	drupal_set_message(t('Account details saved successfully.'));
	drupal_goto('user/account_settings');
}

function user_payout_preference_form($form, &$form_state){
	global $user;
	$uid=$user->uid;
	
	if(!$user->uid){drupal_goto('login');}
	$data= getUserDetails($uid);
	
	$form['paypal_email'] = array(
      '#type' => 'textfield',
      '#prefix'=>'<div class="row"><fieldset class="col-lg-4"><h2>Paypal</h2><label>Email </label>',
      '#attributes'=>array('placeholder'=>'Enter Your Email '),
      '#suffix'=>'</fieldset><p class="col-lg-12">We are working on other ways to pay you. Thanks for your patience</p></div>',
      '#default_value' =>($data['paypal_email'])?$data['paypal_email']:'',
      '#required' => false,
    );

    $form['submit'] = array(
  	'#type' => 'submit',
  	'#value' => t('Save'),
	'#attributes'=>array('class'=>array('button', 'pull-left')),
  	'#prefix'=>'<div class="row col-md-10"><fieldset class="col-lg-4 pull-right">',
  	'#suffix'=>'<fieldset></div>'
  );
   return $form;
}

function user_payout_preference_form_submit(){
	global $user;
   	$uid=$user->uid;
   	$paypal_email = $_POST['paypal_email'];

   	$query=db_update('gbl_users_meta')
					->fields(array('paypal_email'=>$paypal_email))
					->condition('uid',$user->uid);	 
	$result=$query->execute();
	if($result){
	
		drupal_set_message(t('Paypal email has been successfully saved.'), 'status');
	}
}

function user_payout_preference(){
	
	$payout_preference = drupal_get_form('user_payout_preference_form');
	$payout_preference=drupal_render($payout_preference);
	return theme('user_payout_preference',array('payout_preference'=>$payout_preference));
}
function user_payout_preference_form_validate($form, &$form_state){
	$mail = $form_state['values']['paypal_email'];
	if (!valid_email_address($mail)) {
  		form_set_error('[submit][paypal_email]', t('The email address appears to be invalid.'));
  	}	
}
function user_transaction_history(){
    global $user;
   	$uid=$user->uid;
	if(!$user->uid){drupal_goto('login');}
   	$type="";
   	$transaction_status ="";
	$bookings = getAllBookingsTransactionsHistory();
	$output = '';
	$bookings = pager_array_splice($bookings, 10);
	$output .= theme('pager', array('quantity' => 10));
//echo "<pre>";Print_r($bookings);exit;
	return theme('user_transaction_history',array('booking'=>$bookings,'pagination'=>$output));
}
function humanTiming($time)
{
	
    $time = time() - $time; // to get the time since that moment

    $tokens = array (
        31536000 => 'year',
        2592000 => 'month',
        604800 => 'week',
        86400 => 'day',
        3600 => 'hour',
        60 => 'minute',
        1 => 'second'
    );

    foreach ($tokens as $unit => $text) {
        if ($time < $unit) continue;
        $numberOfUnits = floor($time / $unit);
        return $numberOfUnits.' '.$text.(($numberOfUnits>1)?'s':'');
    }

}
function generate_link(){
		
		global $user,$base_url;
		$query=db_select('gbl_recommend_link','r')
		  ->fields('r')
		  ->condition('uid',$user->uid);
		$result=$query->execute();
		$rowCount = $result->fetchAssoc();
		if(!empty($rowCount) && is_array($rowCount)){
			//Recommend Link
			return $rowCount['recommned_link'];
		}else{
			$RandomString=generateRandomString(30);
			$userid=base64_encode($user->uid);
			$recommend_link=$base_url.'/recommend_link?refer='.$RandomString.'%26ruid='.$userid;		
			$query=db_insert('gbl_recommend_link')
			  ->fields(array('uid'=>$user->uid,'recommned_link'=>$recommend_link,'created'=>time()));
			$result=$query->execute();
			return $recommend_link;
		}
		
}


function user_recommend_link(){

	global $user;
	/* if($user->uid){
	drupal_goto('');
	} */
	$refer_token=$_REQUEST['refer'];
	$uid=base64_decode($_REQUEST['uid']);
	return theme('recommend_user');
}
function geoip(){
	$location = file_get_contents('http://freegeoip.net/json/'.$_SERVER['REMOTE_ADDR']);
	$location=json_decode($location);
	print_r($location);
	exit;
}

function add_phone_number(){
	global $user;

	$phone = trim($_POST['phone']);
	

	$phonenumber_length = strlen($phone);
  	if($phonenumber_length > 16){
  		$response['message'] = 'Phone number cannot contain more than 16';
        $response['status'] = 'error';
        echo json_encode($response);
    	exit; 
  	}
  	$formats = array('###-###-####', '####-###-###',
                 '(###) ###-###', '####-####-####',
                 '##-###-####-####', '####-####', '###-###-###',
                 '#####-###-###', '##########','#########' , '###########');

	$number = $phone;

	if(!validate_telephone_number($number, $formats)){
		$response['message'] = 'Invalid phone number.';
        $response['status'] = 'error';
        echo json_encode($response);
    	exit;
	}
	

	$query = db_update("gbl_users_meta")
					 ->fields(array('mobile'=>$phone))
					->condition('uid',$user->uid);
			$result = $query->execute();
	$response['message'] = 'Successfully updated.';
	$response['status'] = 'success';

	/*if($result){
        $response['message'] = 'Successfully updated.';
        $response['status'] = 'success';
    }else{
        $response['message'] = 'There is some error occour.';
        $response['status'] = 'error';    
    }*/
    echo json_encode($response);
    exit;
	
}
/*********************8Aug2015************************/
function add_invitation_link(){
global $user;
	/* if((strpos($_SERVER['HTTP_USER_AGENT'], 'facebookexternalhit')!==FALSE)){
		drupal_goto('http://staging.gloobers.net'.$_SERVER['REQUEST_URI']);
	}else{
		if((!$user->uid)){
			$dest = drupal_get_destination();
			$_SESSION['destination']  = $dest["destination"];
			drupal_goto('login',$dest);
		}
	} */
	if(strpos($_SERVER['HTTP_USER_AGENT'], 'facebookexternalhit')!==false){
		//$mayText='Here1\n';
	}else{
	
		//$mayText='NoHere1\n';
		if((!$user->uid)){
			$dest = drupal_get_destination();
			$_SESSION['destination']  = $dest["destination"];
			drupal_goto('login',$dest);
		}
	}
	$recommendation_link=generate_link();
	return theme('invitation_link');
}

function getcoverpic($uid){
	global $user;
	$query1 = db_select('file_managed','f');
   	$query1->fields('f',array('uri'));
   	$query1->condition('uid',$uid);
   	$query1->condition('is_cover_pic','yes');
   	$result4=$query1->execute();
	$cover_pic=$result4->fetchField();
	return ($cover_pic);
}

function advisor_sharing(){
	echo "test"; exit;
}
function updatefirstLastnameFb($facebook_user_name_first,$facebook_user_name_last,$facebook_loginId){
$Update_user_meta_info= db_update("gbl_users_meta")
				 ->fields(array('first_name'=>$facebook_user_name_first,'last_name'=>$facebook_user_name_last))
				->condition('uid',$facebook_loginId);
		$resultMeta = $Update_user_meta_info->execute();
		$query_exists = db_select("field_data_field_first_name",'fu')->fields('fu')->condition('entity_id',$facebook_loginId);
		$result_exist = $query_exists->execute();
		$result_exists_count = $result_exist->rowCount();
		if($result_exists_count ==1){
			$query2 = db_update("field_data_field_first_name")->fields(array('field_first_name_value'=>$facebook_user_name_first))->condition('entity_id',$facebook_loginId);
			$result2 = $query2->execute();
			$query3 = db_update("field_revision_field_first_name")->fields(array('field_first_name_value'=>$facebook_user_name_first))->condition('entity_id',$facebook_loginId);
			$result3 = $query3->execute();
		}else{
			$query2 = db_insert("field_data_field_first_name")->fields(array('entity_type'=>'user','bundle'=>'user','deleted'=>'0','entity_id'=>$facebook_loginId,'revision_id'=>$facebook_loginId,'language'=>'und','delta'=>'0','field_first_name_value'=>$facebook_user_name_first,'field_first_name_format'=>NULL));
			$result2 = $query2->execute();
			$query3 = db_insert("field_revision_field_first_name")->fields(array('entity_type'=>'user','bundle'=>'user','deleted'=>'0','entity_id'=>$facebook_loginId,'revision_id'=>$facebook_loginId,'language'=>'und','delta'=>'0','field_first_name_value'=>$facebook_user_name_first,'field_first_name_format'=>NULL));
			$result3 = $query3->execute();
		}
		
		$query_exists = db_select("field_data_field_last_name",'fu')->fields('fu')->condition('entity_id',$facebook_loginId);
		$result_exist = $query_exists->execute();
		$result_exists_count = $result_exist->rowCount();
		if($result_exists_count ==1){
			$query2 = db_update("field_data_field_last_name")->fields(array('field_last_name_value'=>$facebook_user_name_last))->condition('entity_id',$facebook_loginId);
			$result2 = $query2->execute();
			$query3 = db_update("field_revision_field_last_name")->fields(array('field_last_name_value'=>$facebook_user_name_last))->condition('entity_id',$facebook_loginId);
			$result3 = $query3->execute();
		}else{
			$query2 = db_insert("field_data_field_last_name")->fields(array('entity_type'=>'user','bundle'=>'user','deleted'=>'0','entity_id'=>$facebook_loginId,'revision_id'=>$facebook_loginId,'language'=>'und','delta'=>'0','field_last_name_value'=>$facebook_user_name_last,'field_last_name_format'=>NULL));
			$result2 = $query2->execute();
			$query3 = db_insert("field_revision_field_last_name")->fields(array('entity_type'=>'user','bundle'=>'user','deleted'=>'0','entity_id'=>$facebook_loginId,'revision_id'=>$facebook_loginId,'language'=>'und','delta'=>'0','field_last_name_value'=>$facebook_user_name_last,'field_last_name_format'=>NULL));
			$result3 = $query3->execute();
		}
	drupal_flush_all_caches();
	return 1;

}
function user_reset_link(){

 	global $user;
	if($user->uid){
	session_destroy();
	} 	
	
	$link_exists=db_select('gbl_reset_password_link','rl')->fields('rl')->condition('reset_link',$_GET['token'])->condition('uid',$_GET['uid']);
	$link_exists=$link_exists->execute();
	$link_exists=$link_exists->fetchAll(PDO::FETCH_ASSOC);
	//echo "<pre>";Print_r($link_exists);exit;
	//Check Link exists or not
	if($link_exists){
		global $user;
		$user_change_pass_form=drupal_get_form('user_change_password_form');
		return theme('user_password',array('user_pass_form'=>$user_change_pass_form));
	} else {
		$user_change_pass_form='';
		return theme('user_password',array('user_pass_form'=>$user_change_pass_form));
	}
}
?>