<?php

class Hotelbeds
{
    private $apiKeyHotels;
    private $signatureHotels;
    private $apiKeyActivities;
    private $signatureActivities;
    private $mode;
    private $url;
    const HOTELS_LIMIT_PER_PAGE = 6;

    public function __construct()
    {
        $this->apiKeyHotels = variable_get('hotel_api_key', NULL);
        $this->signatureHotels = variable_get('hotel_signature', NULL);
        $this->apiKeyActivities = variable_get('activities_api_key', NULL);
        $this->signatureActivities = variable_get('activities_signature', NULL);
        $this->mode = variable_get('apitude_mode', NULL);
        $this->url = $this->mode == 'test' ? variable_get('apitude_test_url', NULL) : variable_get('apitude_live_url', NULL);
    }

    protected function hotelbeds_connect($apiKey, $signature, $url, $method, $data = [], $headers = [], $format = 'json')
    {
        $definedHeaders = [
            "Api-Key" => $apiKey,
            "X-Signature" => $signature,
            "Accept" => 'application/' . $format
        ];
        $options['headers'] = array_merge($definedHeaders, $headers);
        $options['data'] = $data;
        $options['method'] = $method;
        $response = drupal_http_request($url, $options);

        if ($response->code == '200') {
            switch ($format) {
                case 'json':
                    return json_decode($response->data);
                    break;
                default:
                    return $response->data;
            }
        } else {
            var_dump(json_decode($response->data));die;
        }
    }

    protected function hotelbeds_activities_api_connect($url, $method, $data = [], $headers = [], $accept = 'json')
    {
        return $this->hotelbeds_connect($this->apiKeyActivities, $this->signatureActivities, $url, $method, $data, $headers, $accept);
    }

    protected function hotelbeds_hotels_api_connect($url, $method, $data = [], $headers = [], $accept = 'json')
    {
        return $this->hotelbeds_connect($this->apiKeyHotels, $this->signatureHotels, $url, $method, $data, $headers, $accept);
    }

    public function hotelbeds_get_activity_types()
    {
        return $this->hotelbeds_activities_api_connect(
            $this->url . 'activity-content-api/3.0/segments/en',
            'GET'
        );
    }

    public function hotelbeds_get_hotel_types()
    {
        return $this->hotelbeds_hotels_api_connect(
            $this->url . 'hotel-content-api/1.0/types/segments?fields=all&language=ENG',
            'GET'
        );
    }

    public function hotelbeds_get_countries()
    {
        return $response = $this->hotelbeds_activities_api_connect(
            $this->url . 'activity-content-api/3.0/countries/en',
            'GET'
        );
    }

    public function hotelbeds_get_destinations($country)
    {
        return $this->hotelbeds_activities_api_connect(
            $this->url . 'activity-content-api/3.0/destinations/es/' . $country,
            'GET'
        );
    }

    function hotelbeds_get_languages()
    {
        return $this->hotelbeds_activities_api_connect(
            $this->url . 'activity-content-api/3.0/languages',
            'GET'
        );
    }

    function hotelbeds_get_hotels_facilities()
    {
        return $this->hotelbeds_hotels_api_connect(
            $this->url . 'hotel-content-api/1.0/types/ratecommentdetails',
            'GET'
        );
    }

    function hotelbeds_get_activities($data)
    {
        return $this->hotelbeds_activities_api_connect(
            $this->url . 'activity-api/3.0/activities',
            'POST',
            $data,
            ['Content-Type' => 'application/json']
        );
    }

    function hotelbeds_get_activities_by_gps($lat, $lon, $from, $to, $limit = 100, $page = 1, $persons = false)
    {
        $data = json_encode([
            "filters" => [
                0 => [
                    'searchFilterItems' => [
                        0 => [
                            "type" => "gps", "latitude" => $lat, "longitude" => $lon
                        ]
                    ]
                ]
            ],
            "from" => $from,
            "to" => $to,
            "language" => "en",
            "pagination" => [
                "itemsPerPage" => $limit,
                "page" => $page
            ]
        ]);
        $activitiesResponse = $this->hotelbeds_get_activities($data);

        if ($persons) {
            $activities = [];
            foreach ($activitiesResponse->activities as $activityResponse) {
                if (count($activityResponse->amountsFrom) == $persons) {
                    $activities[] = $activityResponse;
                }
            }
            $activitiesResponse->activities = $activities;
        }
        return $activitiesResponse;
    }

    /*  function hotelbeds_get_hotels($data)
      {
          return $this->hotelbeds_activities_api_connect(
              $this->url . 'hotel-content-api/3.0/hotels/',
              'GET',
              $data,
              ['Content-Type' => 'application/json']
          );
      }*/

    function hotelbeds_hotels($data)
    {
        return $this->hotelbeds_hotels_api_connect(
            $this->url . 'hotel-api/1.0/hotels/',
            'POST',
            $data,
            ['Content-Type' => 'application/json']
        );
    }

    function hotelbeds_get_hotels_info($data)
    {
        return $this->hotelbeds_hotels_api_connect(
            $this->url . 'hotel-content-api/1.0/hotels?' . $data,
            'GET'
        );
    }

    function hotelbeds_get_hotels_info_by_codes($hotelsCodes, $to, $from = 1,  $fields = 'all', $segmentCodes='')//segmentCodes=31&
    {
        $hotelsCodesString = implode(',', $hotelsCodes);
        $hotelsInfoRequestData = [
            'fields' => $fields,
            'language' => 'ENG',
            'codes' => $hotelsCodesString,
            'segmentCodes'=>$segmentCodes,
            'from' => $from,
            'to' => $to
        ];
        $hotelsInfoRequestString = http_build_query($hotelsInfoRequestData);
        $hotelsInfo = $this->hotelbeds_get_hotels_info($hotelsInfoRequestString);
        return $hotelsInfo->hotels;
    }

    function hotelbeds_get_hotels($latitude, $longitude, $checkIn, $checkOut, $rooms, $adults, $children = 0, $minRate = null, $maxRate = null, $page = 1)
    {
        $radius = 50;
        $hotelsRequestData = [
            'stay' => [
                'checkIn' => $checkIn,
                'checkOut' => $checkOut
            ],
            'occupancies' => [
                 [
                    'rooms' => $rooms,
                    'adults' => $adults,
                    'children' => $children
                ]
            ],
            'geolocation' => [
                'latitude' => $latitude,
                'longitude' => $longitude,
                'radius' => $radius,
                'unit' => 'km'
            ]
        ];

        if ($minRate) {
            $hotelsRequestData['filter']['minRate'] = $minRate;
        }
        if ($maxRate) {
            $hotelsRequestData['filter']['maxRate'] = $maxRate;
        }

        $hotelsRequestDataEncoded = json_encode($hotelsRequestData);
        $hotelsResponse = $this->hotelbeds_hotels($hotelsRequestDataEncoded);
        $hotels = $hotelsResponse->hotels->hotels;
        $hotelsCodes = array_column($hotels, 'code');
        $hotelsMinPrices = array_column($hotels, NULL,'code');
        $hotelsResponseResult['total'] = $hotelsResponse->hotels->total;
        $hotelsResponseResult['hotels'] = [];
        if(count($hotelsCodes)>0) {
            $page = (int)$page;
            if($page>0) {
                $checkLimit = ($page*self::HOTELS_LIMIT_PER_PAGE) - $hotelsResponseResult['total'];
                if($checkLimit<=self::HOTELS_LIMIT_PER_PAGE) {
                    $offset = ($page - 1) * self::HOTELS_LIMIT_PER_PAGE;
                    $hotelsCodesSliced = array_slice($hotelsCodes, $offset, self::HOTELS_LIMIT_PER_PAGE);
                    $hotelsResponseResult['hotels'] = $this->hotelbeds_get_hotels_info_by_codes($hotelsCodesSliced, self::HOTELS_LIMIT_PER_PAGE);
//                var_dump($hotelsResponseResult['hotels']);die;
                    foreach ($hotelsResponseResult['hotels'] as $key => $hotelItem) {
                        $hotelsResponseResult['hotels'][$key]->minRate = $hotelsMinPrices[$hotelItem->code]->minRate;
                        $hotelsResponseResult['hotels'][$key]->currency = $hotelsMinPrices[$hotelItem->code]->currency;
                    }
                }
            }
        }
//        var_dump($hotelsResponseResult);die;
        return $hotelsResponseResult;
    }
}