<?php
function listing_menu() {
    $items = array();
    $items['search-hotel/%'] = array(
        'page callback' => 'hotel_result_listing',
         'access callback' => true,
         'type' => MENU_NORMAL_ITEM,
     );
     $items['Hotels/%'] = array(
        'page callback' => 'hotels_listing',
         'access callback' => true,
         'type' => MENU_NORMAL_ITEM,
     );
    $items['experience'] = array(
        'page callback' => 'experience_listing',
        'access arguments' => array('access container'),
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );

    $items['experience/view/%'] = array(
        'page callback' => 'experience_listing_view',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );

    $items['listing/review'] = array(
        'page callback' => 'getListingReviewsAjax',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );

    $items['listing/review/form'] = array(
        'page callback' => 'listing_review',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );

    $items['listing/review/data'] = array(
        'page callback' => 'listing_review_data',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );

    $items['add/wishlist'] = array(
        'page callback' => 'add_wishlist',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );

    $items['wishlist'] = array(
        'page callback' => 'my_wishlist',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['listing'] = array(
        'page callback' => 'my_listing',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['availability'] = array(
        'page callback' => 'confirm_booking',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['booking/summary'] = array(
        'page callback' => 'booking_summary',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['booking/hotel/summary'] = array(
        'page callback' => 'booking_hotel_summary',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['booking/success'] = array(
        'page callback' => 'booking_success',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['hotel_booking/success/%'] = array(
        'page callback' => 'hotel_booking_success',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['type/autocomplete'] = array(
        'title' => t('AutoComp Menu'),
        'page callback' => 'selectAllTypes',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['session/timings'] = array(
        'page callback' => 'get_session_timings',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['experience/pricing'] = array(
        'title' => t('AutoComp Menu'),
        'page callback' => 'get_experience_pricing',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['bookings'] = array(
        'page callback' => 'bookings_details',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['experience/updateViewsCount'] = array(
        'page callback' => 'update_views_count',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['transactions/history'] = array(
        'page callback' => 'transactions_history',
        'access callback' => 'user_is_logged_in',
        'type' => MENU_NORMAL_ITEM,
    );
    $items['mytrips'] = array(
         'page callback' => 'bookings_history_by_traveller',
         'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['income/details'] = array(
        'page callback' => 'income_details',
        'access callback' => 'user_is_logged_in',
        'type' => MENU_NORMAL_ITEM,
    );
    $items['product/ajax/getList'] = array(
        'page callback' => 'getAllAjaxListingsBylistType',
        'access arguments' => TRUE,
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    
    /* Added on 11 feb 2015 */
    //will redirect search form on homepage results
    $items['search-destination/%'] = array(
        'page callback' => 'search_listings_results',
        'page arguments' => array(1),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    /* experience page view */
    $items['experience/%'] = array(
        //'title' => 'hotels',
        'page callback' => 'experience_listing_details',
        //'access arguments' => array('access container'),
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );

    /* AJAX CALL FOR ORDER SUMMARY */
    $items['experience/ajax/getOrder'] = array(
        'page callback' => 'getOrderPricingDetails',
        'access arguments' => TRUE,
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
     $items['experience/ajax/updateCart'] = array(
        'page callback' => 'getOrderUpdate',
        'access arguments' => TRUE,
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    
    /* 9March_2015 */
    $items['booking/confirmation'] = array(
        'page callback' => 'booking_confirmation',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );
    /* 12March_2015 */
    $items['booking/mailsendtoprovider/%'] = array(
        'page callback' => 'mailSendtoProviderTraveller',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );
    
    $items['experience/getcalender'] = array(
        'page callback' => 'getCalenderViewPort',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['company'] = array(
        'page callback' => 'coming_soon',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['jobs'] = array(
        'page callback' => 'coming_soon',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['blog'] = array(
        'page callback' => 'coming_soon',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['sitemap'] = array(
        'page callback' => 'coming_soon',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['how_it_works'] = array(
        'page callback' => 'coming_soon',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['help'] = array(
        'page callback' => 'coming_soon',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['best_practices'] = array(
        'page callback' => 'coming_soon',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['terms_and_conditions'] = array(
        'page callback' => 'terms_and_conditions',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['learn_more'] = array(
        'page callback' => 'coming_soon',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['invite_your_friends'] = array(
        'page callback' => 'coming_soon',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );

    $items['recommend_professional'] = array(
        'page callback' => 'coming_soon',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );

    // 27 Aug 2015 //
      $items['add-listing/%/%'] = array(
        'page callback' => 'add_listings_results',
        'page arguments' => array(2),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );

    // end  //  

    // Add listing to guide  //

    $items['add_listing_to_guide/%/%'] = array(
        'page callback' => 'add_listing_to_guide',
        'page arguments' => array(2),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );    
    $items['ajax/SavePriceSessionCart'] = array(
        'page callback' => 'SavePriceSessionCart',
        //'page arguments' => array(2),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['experience/ajax/getNewPricingData'] = array(
        'page callback' => 'getNewPricingData',
        'access arguments' => TRUE,
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    // ---    16 OCT 2015 //
    $items['search-listing/advisors/%'] = array(
        'page callback' => 'search_listing_advisors',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );   
    $items['advisor_listing_results'] = array(
        'page callback' => 'advisor_listing_results',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );   
     $items['Gloobers/%'] = array(
        'page callback' => 'gloobers_users',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );  
    $items['travel_guides_listings/%'] = array(
        'page callback' => 'travel_guides_listings',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    ); 
    $items['experience/ajax/checkAvailableseats'] = array(
            'page callback' => 'checkAvailableseats',
            'access callback' => true,
            'type' => MENU_NORMAL_ITEM,
    );  
            
    $items['Gloobers/%'] = array(
        'page callback' => 'gloobers_users',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );  
    $items['experience/ajax/updateOfferPrice'] = array(
        'page callback' => 'updateOfferPrice',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    ); 
    $items['experience/ajax/creditsCalculations'] = array(
        'page callback' => 'creditsCalculations',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );

    $items['testReview'] = array(
        'page callback' => 'testReview',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    ); 
    $items['addreview/%'] = array(
        'page callback' => 'add_review_traveler',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    ); 
    $items['ajax/addReview'] = array(
        'page callback' => 'addReview',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    ); 

     $items['ajax/CheckAvailSeatsForSession'] = array(
        'page callback' => 'CheckAvailSeatsForSession',
        'access callback' => true,
        'type' => MENU_NORMAL_ITEM,
    );           
    
    $items['mytrips/cancel_booking'] = array(
    'page callback' => 'cancel_booking', 
    'page arguments' => array(1,2),
    'access arguments' => array('access content'), 
    'type' => MENU_CALLBACK,
  );  
    
    return $items;
}

function listing_theme() {
    $module_path = drupal_get_path('module', 'listing');

    return array(
        'hotels_listing' => array(
            'template' => 'hotels_listing',
            'path' => $module_path . '/templates',
        ),
        'experience_listing' => array(
            'template' => 'experience_listing',
            'path' => $module_path . '/templates',
        ),
        'experience_listing_view' => array(
            'template' => 'experience_listing_view',
            'path' => $module_path . '/templates',
        ),
        'wishlist' => array(
            'template' => 'my_wishlist',
            'path' => $module_path . '/templates',
        ),
        'my_listing' => array(
            'template' => 'my_listing',
            'path' => $module_path . '/templates',
        ),
        'listing_review' => array(
            'template' => 'listing_review',
            'path' => $module_path . '/templates',
        ),
        'confirm_booking' => array(
            'template' => 'confirm_booking',
            'path' => $module_path . '/templates',
        ),
       
        'booking_summary' => array(
            'template' => 'booking_summary_new',
            'path' => $module_path . '/templates',
        ),
        'booking_hotel_summary' => array(
            'template' => 'booking_hotel_summary',
            'path' => $module_path . '/templates',
        ),
        'booking_confirmation_new' => array(
            'template' => 'booking_confirmation_new',
            'path' => $module_path . '/templates',
        ),
        'booking_success' => array(
            'template' => 'booking_success',
            'path' => $module_path . '/templates',
        ),
        'hotel_booking_success' => array(
            'template' => 'hotel_booking_success',
            'path' => $module_path . '/templates',
        ),
        'bookings_details' => array(
            'template' => 'bookings_details',
            'path' => $module_path . '/templates',
        ),
        'transactions_history' => array(
            'template' => 'transactions_history',
            'path' => $module_path . '/templates',
        ),
        'booking_history' => array(
            'template' => 'booking_history',
            'path' => $module_path . '/templates',
        ),
        'income_details' => array(
            'template' => 'income_details',
            'path' => $module_path . '/templates',
        ),
        'results' => array(
            'template' => 'results',
            'path' => $module_path . '/templates',
        ),
        'experience_listing_details' => array(
            'template' => 'experience_listing_details',
            'path' => $module_path . '/templates',
        ),
        'coming_soon' => array(
            'template' => 'coming_soon',
            'path' => $module_path . '/templates', 
        ),
        'add_listings_results' => array(
            'template' => 'add_listings_results',
            'path' => $module_path . '/templates',
        ),
        'add_listing_to_guide' => array(
            'template' => 'add_listing_to_guide',
            'path' => $module_path . '/templates',
        ),
        'search_listing_advisors' => array(
            'template' => 'search_listing_advisors',
            'path' => $module_path . '/templates',
        ),
        'advisor_listing_results' => array(
            'template' => 'advisor_listing_results',
            'path' => $module_path . '/templates',
        ),
        'gloobers_users' => array(
            'template' => 'gloobers_users',
            'path' => $module_path . '/templates',
        ),
        'hotel_result_listing' => array(
            'template' => 'hotel_result_listing',
            'path' => $module_path . '/templates',
        ),
        'add_review' => array(
            'template' => 'add_review',
            'path' => $module_path . '/templates',
        ),        
        
    );
}

function hotels_listing() {
     menu_rebuild();
    return theme('hotels_listing');
}

function updateOfferPrice(){
//echo "<pre>";Print_r($_POST['grandTotal']);exit;
    /* $personPrize=$_SESSION['order']['subtotal']['person_total'];
    $itemPrize=$_SESSION['order']['subtotal']['item_total'];
    if(isset($itemPrize)){
        $grossPrice=$itemPrize;
    }else{
        $grossPrice=$personPrize;
    }
    $servicePrize=$_SESSION['order']['subtotal']['services_total'];

    $totalAmount=($grossPrice+$servicePrize); */
    //echo $_POST['grandTotal'];exit;
    //echo "<pre>";Print_r($_SESSION['order']['disscountOfferApply']);exit;
    if($_SESSION['order']['disscountOfferApply']){
        $dissCountBy=$_SESSION['order']['disscountOfferApply']['disscountBy'];
        $Amt=$_SESSION['order']['disscountOfferApply']['amount'];
        $OfferType=$_SESSION['order']['disscountOfferApply']['offerType'];
        if($dissCountBy=='%'){
            $disscountedAmount=(($Amt)*($_POST['grandTotal']/100));
        }else{
            $disscountedAmount=$Amt;
        }
    }
    $_SESSION['order']['disscountOfferApply']['disscountedAmount']=$disscountedAmount;
    echo json_encode($_SESSION['order']['disscountOfferApply']);exit;

}
function experience_listing() {
    $listings = array();
    unset($_SESSION['listing_id']);
    unset($_SESSION['product_id']);
    unset($_SESSION['postedData']);
    unset($_SESSION['participants']);
    unset($_SESSION['booking-on']);
    unset($_SESSION['booking-on_time']);
    unset($_SESSION['additional-services']);
    unset($_SESSION['additional-services-amount']);
    unset($_SESSION['Security']);
    unset($_SESSION['total_amount']);
    unset($_SESSION['duration']);
    unset($_SESSION['sub_total']);
    unset($_SESSION['discount']);

    $filter = $homeSearch = array();
    $type = '';
    global $user;
    if (isset($_POST["action"]) && $_POST["action"] == "filter") {
        $filter = $_POST;
    } else if (isset($_POST["action"]) && $_POST["action"] == "search") {
        $prepAddr = str_replace(' ', '+', $_POST["place"]);

        $geocode = file_get_contents('http://maps.google.com/maps/api/geocode/json?address=' . $prepAddr . '&sensor=false');

        $output = json_decode($geocode);
        $lat = $output->results[0]->geometry->location->lat;
        $homeSearch['lat'] = $lat;
        $long = $output->results[0]->geometry->location->lng;
        $homeSearch['long'] = $long;
        $city = $state_short = $country = $address = $state_long = '';
        foreach ($output->results[0]->address_components as $addressC) {
            if ($addressC->types[0] == "administrative_area_level_2") {
                $city = $addressC->long_name;
                $homeSearch['city'] = $city;
            } else if ($addressC->types[0] == "administrative_area_level_1") {
                $state_short = $addressC->short_name;
                $state_long = $addressC->long_name;
                $homeSearch['state_short'] = $state_short;
                $homeSearch['state_long'] = $state_long;
            } else if ($addressC->types[0] == "country") {
                $country = $addressC->long_name;
                $homeSearch['country'] = $country;
            } else if ($addressC->types[0] == "sublocality_level_1") {
                $address = $addressC->long_name;
                $homeSearch['address'] = $address;
            } else if ($addressC->types[0] == "continent") {
                $query = db_select('gbl_country_list', 'cl')
                        ->fields('cl', array('country_name'))
                        ->condition('continent', $addressC->long_name, '=');
                $result = $query->execute();
                while ($res = $result->fetchAssoc()) {
                    $countriesArray[] = $res['country_name'];
                }
                $homeSearch['continent'] = $addressC->long_name;
            }
        }
        $filter = $_POST;
        $homeSearch['search'] = $_POST;
    } else {

       drupal_goto($base_url);
    }
    if (isset($_POST['type'])) {
        $type = $_POST['type'];
    }

    $listings = getAllListings($filter, $type, $user->uid, $homeSearch, $countriesArray);
    $listingCount = getAllListingsCount($filter, $type, $user->uid, $homeSearch, $countriesArray);

    return theme('experience_listing', array('listings' => $listings, 'listingCount' => $listingCount));
}

function experience_listing_search_form($form, &$form_state) {
    $experienceType = getExperienceType();
    $experienceCategory = getExperienceCategory();
    $form['product_details']['type'] = array(
        '#type' => 'select',
        '#default_value' => isset($values['type']) ? $values['type'] : 0,
        '#attributes' => array(
            'class' => array('form-control'),
        ),
        '#options' => $experienceType,
        '#required' => TRUE
    );
    $form['product_details']['experiencehtml'] = array(
        '#type' => 'markup',
        '#markup' => '<h3>' . t('About your Experience') . '</h3>',
    );
    $form['product_details']['category'] = array(
        '#type' => 'select',
        '#default_value' => isset($values['category']) ? $values['category'] : 0,
        '#attributes' => array(
        'class' => array('form-control'),
        ),
        '#options' => $experienceCategory,
        '#required' => TRUE
    );

    return $form;
}

function experience_listing_view() {
    $listId = arg(2);

    if ($listId == "" || (is_numeric($listId) == false)) {
        drupal_not_found();
    }
    unset($_SESSION['listing_id']);
    unset($_SESSION['product_id']);
    unset($_SESSION['postedData']);
    unset($_SESSION['participants']);
    unset($_SESSION['booking-on']);
    unset($_SESSION['booking-on_time']);
    unset($_SESSION['additional-services']);
    unset($_SESSION['additional-services-amount']);
    unset($_SESSION['Security']);
    unset($_SESSION['total_amount']);
    unset($_SESSION['duration']);
    unset($_SESSION['sub_total']);
    unset($_SESSION['discount']);

    $reviews = getListingReviews(arg(2));
    $SuperAverage = getListingReviewsSuperAverage(arg(2));
    $SuperAverage1 = getListingReviewsSuperAverage(arg(2));
    $reviewsCount = getListingReviewsCount(arg(2));
    $reviewsAverage = getListingReviewsAverage(arg(2));
    $photos = getPhotosData(arg(2));
    $OverviewData = getOverviewData(arg(2));
    if (empty($OverviewData)) {
        drupal_not_found();
    }

    $userReviewsCount = getUserReviewsCount($OverviewData["uid"]);
    $amentiesdata = getAmentiesByproduct(arg(2));
    $amentiesdata = unserialize($amentiesdata["value1"]);
    $locationDetail = getListingData(arg(2));
    $pricingData = getPricingData(arg(2));
    $basePrice = getBasePrice(arg(2));
    $calendarDetail = getSchedulingData(arg(2));
    $scheduleSessionData = getScheduleSessionData(arg(2));
    $extras = getProductExtraData(arg(2));
    $rulesDetail = getRulesDetails(arg(2));
    $rulesDetail = unserialize($rulesDetail["value1"]);
    $nearPlaces = findNearByPlaces($OverviewData);
    $experienceType = getExperienceListingTypeById($OverviewData['experience_type']);
   
    return theme('experience_listing_view', array('scheduleSessionData' => $scheduleSessionData, 'basePrice' => $basePrice, 'SuperAverage1' => $SuperAverage1, 'SuperAverage' => $SuperAverage, 'reviewsCount' => $reviewsCount, 'userReviewsCount' => $userReviewsCount, 'reviewsAverage' => $reviewsAverage, 'reviews' => $reviews, 'nearPlaces' => $nearPlaces, 'experienceType' => $experienceType, 'photos' => $photos, 'OverviewData' => $OverviewData, 'amentiesdata' => $amentiesdata, 'locationDetail' => $locationDetail, 'pricingData' => $pricingData, 'calendarDetail' => $calendarDetail, 'extras' => $extras, 'rulesDetail' => $rulesDetail));
}

function findNearByPlaces($data = array()) {

    $center_lat = $data["latitude"];
    $center_lng = $data["longitude"];

    $radius = 10;

    $query = sprintf("SELECT eid,title,address1, latitude, longitude, city, ( 3959 * acos( cos( radians('%s') ) * cos( radians( latitude ) ) * cos( radians( longitude ) - radians('%s') ) + sin( radians('%s') ) * sin( radians( latitude ) ) ) ) AS distance FROM gbl_experience_list HAVING distance < '%s' ORDER BY distance LIMIT 0 , 20", mysqli_real_escape_string($center_lat), mysqli_real_escape_string($center_lng), mysqli_real_escape_string($center_lat), mysqli_real_escape_string($radius));

    $result = db_query($query);

    $records = array();
    foreach ($result as $places) {
        $records[] = $places;
    }

    return $records;
}

function getListingReviews($eid = "", $uid = null) {
    $reviews = array();
    $query = db_select('gbl_listing_reviews', 'r');
            $query->fields('r')
 /*        $query->join('users', 'user', 'user.uid = r.uid');
        $query->join('file_managed', 'file', 'file.fid = user.picture');
        $query->fields('r')
            ->fields('user',array('name','picture'))
            ->fields('file',array('uri')) */
            ->condition('listing_id', $eid);
    if ($uid != "") {
        $query->condition('uid', $uid, '=');
    }
    
    //$query->range(0, 2);
    $result = $query->execute();
    while ($data = $result->fetchAssoc()) {
        $reviews[] = $data;
    }
    //echo "<pre>";Print_r($reviews);exit;
    return $reviews;
}


function getListingReviewsCount($eid = "", $uid = null) {
    $reviews = array();
    $query = db_select('gbl_listing_reviews', 'r')
            ->fields('r', array('listing_id', 'uid', 'created', 'comments'))
            ->condition('listing_id', $eid);
    if ($uid != "") {
        $query->condition('uid', $uid, '=');
    }
    $result = $query->execute();
    return $result->rowCount();
}

function getListingReviewsAjax() {
    $pageSize = 2;
    global $base_url;
    $page = isset($_POST["page"]) ? $_POST["page"] : 1;
    $listing_id = isset($_POST["listing_id"]) ? $_POST["listing_id"] : arg(2);
    $limit = ($page - 1) * $pageSize;

    $str = "";
    $query = db_select('gbl_listing_reviews', 'r')
            ->fields('r', array('listing_id', 'uid', 'created', 'comments'))
            ->condition('listing_id', $listing_id)
            ->range($limit, $pageSize)
            ->execute();
    while ($data = $query->fetchAssoc()) {
        $userDetails = user_load($data["uid"]);
        if ($userDetails->field_first_name["und"][0]["value"] != "") {
            $name = $userDetails->field_first_name["und"][0]["value"] . " " . $userDetails->field_last_name["und"][0]["value"];
        } else {
            $name = $userDetails->name;
        }

        if ($userDetails->picture->fid != "") {
            $file = file_load($userDetails->picture->fid);
            $imgpath = $file->uri;
            $src = file_create_url($imgpath);
        } else {
            $src = $base_url . drupal_get_path('theme', 'gloobers') . "/images/no-profile-male-img.jpg";
        }
        $str .='<div class="blogger-block"><div class="blogger-profile">
            <div class="blogger-dp">
            <img alt="display pic" src="' . $src . '">
            </div>
            <a href="#">' . $name . '</a>
            </div>
            <div class="blog-description">
            <p>' . $data["comments"] . '</p> 
            <div class="description-detail">
            <span>' . date("F, Y", strtotime($data["created"])) . '</span>
            <a href="javascript:void(0)">+ More</a>                                     
            </div>
            </div></div>
            <script>
            jQuery(document).ready(function(){
                jQuery(".description-detail").each(function() {
                    var content = jQuery(this).prev("p").text();
                    if(content.length > 300){
                        jQuery(this).prev("p").css("height","90px").css("overflow", "hidden"); 
                        jQuery(this).addClass("rev-more");
                        jQuery(this).children("a").show();
                    }
                    else{
                        jQuery(this).children("a").hide();
                    }
                }); 
            });
            </script>';
    }
    echo $str;
    die;
}

function getListingReviewsAverage($eid = "") {
    $result = db_query("select AVG(accuracy) as accuracy_avg,AVG(communication) as communication_avg,AVG(cleanliness) as cleanliness_avg,AVG(location) as location_avg,AVG(check_in) as check_in,AVG(value) as value_avg from gbl_listing_reviews where listing_id = " . $eid);
    return $result;
}

function getListingReviewsSuperAverage($eid = "") {
    $result = db_query("select AVG(average) as average_avg from gbl_listing_reviews where listing_id = " . $eid);
    return $result;
}

function getUserReviewsCount($uid =null) {
    $query=db_select('gbl_experience_list','gel');
    $query->join('gbl_listing_reviews', 'gb', 'gb.listing_id = gel.eid');
    $query->fields('gel',array('eid'));
    $query->fields('gb');   
    $query->condition('gb.uid',$uid,'=');    
    $result=$query->execute();
    return $result->rowCount();
}

function listing_review() {
    $reviewform = drupal_get_form('listing_review_form');
    return theme('listing_review', array('reviewform' => $reviewform));
}

function listing_review_form($form, $form_state) {

    $form = array();
    $form['listId'] = array(
        '#type' => 'hidden',
        '#size' => '30',
        '#attributes' => array('class' => 'listid'),
    );

    $form['comment'] = array(
        '#title' => t('Comments'),
        '#type' => 'textarea',
        '#size' => '30',
        "#attributes" => array("required" => "required"),
        '#required' => TRUE,
    );

    $form['accuracy'] = array(
        '#type' => 'hidden',
        '#size' => '30',
        '#attributes' => array('class' => 'accuracy'),
    );

    $form['communication'] = array(
        '#type' => 'hidden',
        '#size' => '30',
        '#attributes' => array('class' => 'communication'),
    );

    $form['cleanliness'] = array(
        '#type' => 'hidden',
        '#size' => '30',
        '#attributes' => array('class' => 'cleanliness'),
    );

    $form['location'] = array(
        '#type' => 'hidden',
        '#size' => '30',
        '#attributes' => array('class' => 'location'),
    );

    $form['check_in'] = array(
        '#type' => 'hidden',
        '#size' => '30',
        '#attributes' => array('class' => 'check_in'),
    );

    $form['value'] = array(
        '#type' => 'hidden',
        '#size' => '30',
        '#attributes' => array('class' => 'value'),
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
    );

    return $form;
}

function listing_review_data() {
    $aResponse['error'] = false;
    $aResponse['message'] = '';

    $aResponse['server'] = '';

    if (isset($_POST['action'])) {
        if (htmlentities($_POST['action'], ENT_QUOTES, 'UTF-8') == 'rating') {
            $id = intval($_POST['idBox']);
            $rate = floatval($_POST['rate']);

            // YOUR MYSQL REQUEST HERE or other thing :)
            $success = true;
            // else $success = false;
            // json datas send to the js file
            if ($success) {
                $aResponse['message'] = 'Your rate has been successfuly recorded. Thanks for your rate :)';

                // ONLY FOR THE DEMO, YOU CAN REMOVE THE CODE UNDER
                $aResponse['server'] .= '<strong>Rate received :</strong> ' . $rate . '<br />';
                $aResponse['server'] .= '<strong>ID to update :</strong> ' . $id;
                // END ONLY FOR DEMO

                echo json_encode($aResponse);
            } else {
                $aResponse['error'] = true;
                $aResponse['message'] = 'An error occured during the request. Please retry';

                // ONLY FOR THE DEMO, YOU CAN REMOVE THE CODE UNDER
                $aResponse['server'] = '<strong>ERROR :</strong> Your error if the request crash !';
                // END ONLY FOR DEMO


                echo json_encode($aResponse);
            }
        } else {
            $aResponse['error'] = true;
            $aResponse['message'] = '"action" post data not equal to \'rating\'';

            // ONLY FOR THE DEMO, YOU CAN REMOVE THE CODE UNDER
            $aResponse['server'] = '<strong>ERROR :</strong> "action" post data not equal to \'rating\'';
            // END ONLY FOR DEMO


            echo json_encode($aResponse);
        }
    } else {
        $aResponse['error'] = true;
        $aResponse['message'] = '$_POST[\'action\'] not found';
        $aResponse['server'] = '<strong>ERROR :</strong> $_POST[\'action\'] not found';
        echo json_encode($aResponse);
    }
}

function listing_review_form_submit($form, $form_state) {

    global $user;
    $accuracy = $communication = $cleanliness = $location = $check_in = $value = $average = 0.0;

    $accuracy = ($form_state['values']['accuracy']) ? $form_state['values']['accuracy'] : 0;
    $communication = ($form_state['values']['communication']) ? $form_state['values']['communication'] : 0;
    $cleanliness = ($form_state['values']['cleanliness']) ? $form_state['values']['cleanliness'] : 0;
    $location = ($form_state['values']['location']) ? $form_state['values']['location'] : 0;
    $check_in = ($form_state['values']['check_in']) ? $form_state['values']['check_in'] : 0;
    $value = ($form_state['values']['value']) ? $form_state['values']['value'] : 0;
    $average = ($accuracy + $communication + $cleanliness + $location + $check_in + $value) / 6;

    $eid = $form_state['values']['listId'];

    $nid = db_insert('gbl_listing_reviews')
            ->fields(array(
                'listing_id' => $eid,
                'uid' => $user->uid,
                'comments' => trim($form_state['values']['comment']),
                'accuracy' => $accuracy,
                'cleanliness' => $cleanliness,
                'communication' => $communication,
                'location' => $location,
                'check_in' => $check_in,
                'value' => $value,
                'average' => $average
            ))
            ->execute();

    if ($nid) {
        $result = db_query("select AVG(average) as average_avg from gbl_listing_reviews where listing_id = " . $eid);

        foreach ($result as $rating) {
            $query = db_update('gbl_experience_list')
                    ->fields(array(
                        'average_ratings' => round($rating->average_avg, 1)
                    ))
                    ->condition('eid', $eid)
                    ->execute();
        }

        drupal_set_message(t('Review data saved successfully.'));
    }
}

function getAllListings($filter = array(), $type = '', $uid = '', $homeSearch = array(), $countriesArray = array()) {
 //echo "<pre>";Print_r($filter);exit;
    $pageLimitOffset  = ($_REQUEST['page']) ? ($_REQUEST['page']-1) : 0;
    $pageSize = 8;
    $pageLimitOffset  = $pageLimitOffset* $pageSize;
    $str = '';
    $listings = array();
    global $base_url;
    $filteredListing = array();
    $query = db_select('gbl_experience_list', 'el');

    if (isset($filter["search"])){
     
        $query->join('gbl_experience_list', 'el1', 'el1.city = el.city');
    }
    $query->join('users', 'u', 'u.uid = el.uid');
    $query->join('gbl_pricing', 'pr', 'el.eid = pr.listing_id');
    $query->leftJoin('gbl_experience_category', 'ec', 'ec.cid = el.experience_category');
    $query->join('gbl_experience_type', 'et', 'et.id = el.experience_type');
    $query->Join('gbl_scheduling_sessions', 'sh', 'el.eid = sh.listing_id');
    $query->leftJoin('gbl_listing_packages', 'pk', 'pk.id = el.package_id');
    if ($uid != "" && $type == 'my_wishlist') {
        $query->join('gbl_my_wishlist', 'w', 'el.eid = w.listing_id');
    }
    $query->fields('el', array('eid', 'title', 'latitude', 'longitude','address1','address2', 'city', 'state', 'country', 'average_ratings', 'uid','base_price','visibility_status','list_status'));
    $query->fields('pr', array('min_price', 'max_price'))
            ->fields('ec', array('category_name'))
            ->fields('et', array('experience_type'))
            ->fields('sh', array('endRepeatDate','avalability_max'))
            ->fields('pk', array('price'));
    if ($uid != "" && $type == 'my_wishlist') {
        $query->fields('w', array('in_wishlist'));
    }
    $query->condition('el.visibility_status', '1');
    $query->condition('el.list_status', '1');
    //$query->condition('sh.endDate',date('Y-m-d'),'>=' );
    if(empty($filter)) {
    $or = db_or()->condition('sh.endRepeatDate',date('Y-m-d'),'>=')->isNull('sh.endRepeatDate');
    $query->condition($or);
    }
    
    $query->groupBy('el.eid');
    $query->orderBy('pk.price', 'DESC');

    if ($uid != "" && $type == 'my_wishlist') {
     //echo "dsfsdfsd2222";exit;
        $query->orderBy('w.added', 'DESC');
        $query->condition('w.uid', $uid);
        $query->condition('w.in_wishlist', 1);
        $or = db_or()->condition('sh.startDate', date('Y-m-d'), '>=')->isNull('sh.startDate');
        $query->condition($or);
    } else if ($uid != "" && $type == 'my_listing') {
    // echo "32422";exit;
        $query->orderBy('el.created', 'DESC');
        
    } else {
     //echo "44444";exit;
        if (!isset($filter["search"])) {
            $query->orderBy('el.created', 'DESC');
        }
       
    }
     
    if (empty($filter)) {
        
        if (arg(1) != '') {
          
        }
        $query = $query->range($pageLimitOffset, $pageSize);
        $result = $query->execute();

        while ($record = $result->fetchAssoc()) {
            $record['state']=@str_replace("'"," ",$record['state']);
            $listings[] = $record;
        }
        
    //echo "<pre>sfrsfsdf";Print_r($listings);exit;
        return $listings;
    } else if (!empty($filter) && !isset($filter["offset"]) && !isset($filter["search"])) {
        
        if (isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && (!isset($filter["typeId"]) || $filter["typeId"] == 'all') && !isset($filter["catID"])) {
            $query->orderBy('el.average_ratings', 'DESC');
            $query->condition('el.average_ratings', $filter["rate"], '<=');
        } else if (!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && (!isset($filter["typeId"]) || $filter["typeId"] == 'all') && !isset($filter["catID"])) {
            $query->orderBy('el.base_price', 'ASC');
            $query->condition('el.base_price', array($filter["min"], $filter["max"]), 'BETWEEN');
        } else if (!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && (isset($filter["typeId"]) && $filter["typeId"] != 'all') && !isset($filter["catID"])) {
            $query->orderBy('el.base_price', 'ASC');
            $query->condition('el.base_price', array($filter["min"], $filter["max"]), 'BETWEEN');
            $query->condition('et.id', $filter["typeId"], '=');
        } else if (!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && (isset($filter["typeId"]) && $filter["typeId"] != 'all') && isset($filter["catID"])) {
            $query->orderBy('el.base_price', 'ASC');
            $query->condition('el.base_price', array($filter["min"], $filter["max"]), 'BETWEEN');
            $query->condition('et.id', $filter["typeId"], '=');
            $query->condition('ec.cid', $filter["catID"], '=');
        } else if (!isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && (isset($filter["typeId"]) && $filter["typeId"] != 'all') && !isset($filter["catID"])) {
            $query->condition('et.id', $filter["typeId"], '=');
        } else if (!isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && (isset($filter["typeId"]) && $filter["typeId"] != 'all') && isset($filter["catID"])) {
            $query->condition('et.id', $filter["typeId"], '=');
            $query->condition('ec.cid', $filter["catID"], '=');
        }
        
    /* 27 Jan 2016 */   
        if($filter["selectedstar"]!=''){
            $query->orderBy('el.average_ratings', 'DESC');
            $query->condition('el.average_ratings', $filter["selectedstar"], '<=');
        }
    /* END 27 Jan 2016 */   
        //echo "<pre>";print_r($homeSearch);exit;
        foreach ($homeSearch['search'] as $key => $value) {
            if ($key == "place") {
            
                if (isset($homeSearch["city"])) {
                
                    $or = db_or()->condition('el.city','%'.db_like($homeSearch["city"]).'%','LIKE')->condition('el.city','%'.db_like($value).'%','like')->condition('el.state', $homeSearch["state_short"], 'like')->condition('el.state', db_like($homeSearch["state_long"]), 'like')->condition('el.state',db_like($value),'like')->condition('el.country','%'.db_like($value).'%','like');
                    $query->condition($or);
                   
                } else if (isset($homeSearch["state_short"])) {                    

                    $or = db_or()->condition('el.state','%'.db_like($homeSearch["state_short"]).'%','like')->condition('el.state','%'.db_like($homeSearch["state_long"]).'%','like')->condition('el.state','%'.db_like($homeSearch["state_long"]).'%','COLLATE UTF8_GENERAL_CI like');
                    $query->condition($or);

                } else if (isset($homeSearch["country"])) {
                    $or = db_or()->condition('el.country', '%'.db_like($homeSearch["country"]).'%', 'like')->condition('el.state', $homeSearch["state_short"], 'like')->condition('el.state', db_like($homeSearch["state_long"]), 'like')->condition('el.state', $homeSearch["state_long"], 'like')->condition('el.country', '%'.db_like($homeSearch["country"]).'%', 'like')->condition('el.city',db_like($homeSearch["search"]),'like');
                    $query->condition($or);
                    
                }  else if (isset($homeSearch["continent"])) {
                    $query->addExpression('COUNT(el.city)', 'cnumber');
                    $query->orderBy('cnumber', 'DESC');
                    $query->condition('el.country', $countriesArray, 'in');
                    $query->where('el1.city = el.city');
                } 
            }
           
            if($key == "when"){
                if($value != ''){
                    $value = date('Y-m-d', strtotime($value));
                    $dates = array('sh.startDate', 'sh.endRepeatDate');
                    $query->condition(db_or()->condition('sh.startDate', $value, '<=')->isNull('sh.startDate'));
                    $query->condition(db_or()->condition('sh.endRepeatDate', $value, '>=')->isNull('sh.endRepeatDate'));
                }
            }

            if($key == "person"){
                if($value != ''){
                    $or = db_or()->isNull('sh.avalability_max')->condition('sh.avalability_max', $value, '>=');
                    $query->condition($or);
                }
            }
        }

        //print($query);exit;
       
        $query = $query->range($pageLimitOffset, $pageSize);
        $result = $query->execute();        
        $rKey = 0;
        $listingMapJson;

        //print_r($result->fetchAssoc());exit;
        
        while ($record = $result->fetchAssoc()){
            
            $offers = getOffersAndDiscountsData($record["eid"]);
            //echo "<pre>";Print_r($offers);exit;
            /*@description: check for offer filter search if offer found then execute code.
            * @otherwise break code accordinlgy
            * @param: ajax method with offer values
            */
            $offerStack = array();
             if (!empty($offers)) {
                //check for all conditions 24h , last min, Early bird
                $offerStack = checkOfferApply($offers,$record);
                //echo "<pre>";Print_r($offerStack);exit;
                $offerType= $offerStack['offer_type'];
                parse_str($_POST['offers'],$searchData);
                $stackOfferChoosen = ($searchData['offer']);
                $offerUriParam = (isset($offerStack['offer_type'])) ?  '?offer='.base64_encode($offerStack['offer_type']) : '';
                if (!in_array($offerType, $stackOfferChoosen) && !(empty($stackOfferChoosen))) {
                    continue;
                }
            }
            
            
            $listingMapJson[$rKey] = $record;
            $basePrice = getBasePrice($record["eid"]);
            $listingMapJson[$rKey]['price'] = $basePrice['price'];
            $photos = getPhotosData($record["eid"]);
            $userDetails = user_load($record["uid"]);
            
            $wstatus = getWishlistStatus($record["eid"]);
            $starPath = base_path() . drupal_get_path('theme', 'gloobers') . '/images/icons/stars.png';
            $wstatus = isset($wstatus["in_wishlist"]) ? $wstatus["in_wishlist"] : 0;
            $wstyle = '';
            if ($wstatus == 1) {
                $wstyle = "background:url(" . $base_url . "/" . drupal_get_path('theme', 'gloobers') . "/images/heart-ico-red.png";
            }
            if ($userDetails->picture != "") {
                $file = file_load($userDetails->picture->fid);
                $imgpath = $file->uri;
                $style = "user_small";
                $src = image_style_url($style, $imgpath);
            } else {
                $src = $base_url . '/' . drupal_get_path('theme', 'gloobers') . "/images/no-profile-male-img.jpg";
            }
 
            
            $str.='<div  class="col-xs-12 col-sm-4 col-md-4 nopadding listing listing_container_head">
                                <div class="block"> 
                                    <div class="flexslider">
                                        <ul class="slides">';
            if (count($photos) > 0) {
                foreach ($photos as $imgKey => $photo) {
                    $photo = unserialize($photo["value1"]);
                    $file = file_load($photo["fid"]);
                    $imgpath = $file->uri;
                    $style = 'listing_slider';
                    if($imgKey == 0){
                        $listingMapJson[$rKey]['photo'] = image_style_url($style, $imgpath);
                    }
                    
                    $str.='<li><a href="' . $base_url . '/experience/' . $record["eid"] . $offerUriParam. '" >
                                                            <img src="' . image_style_url($style, $imgpath) . '" alt="place" onError="imgError(this)" />
                                                        </a></li>';
                }
            } else {
                $str.='<li><a href="' . $base_url . '/experience/' . $record["eid"] . $offerUriParam. '" >
                                                    <img src="' . $base_url.'/'. drupal_get_path('theme', $GLOBALS['theme']) . '/images/img/place1.png" alt="place" />
                                                </a></li>';
            }

            $str.='</ul>
                                    </div> <!-- flex ends -->
                                    <div class="listdetail">
                                        <div class="click"><a href="#" class="listicon"><span></span><span></span><span></span></a></div>
                                        <div class="listview">
                                            <ul>';

            $status = getWishlistStatus($record["eid"]);
            $styleWishList = (isset($status["in_wishlist"]) && $status["in_wishlist"] == 1) ? 'style="border:1px solid #fff;color:#fff"' : 'style="border:1px solid #FFF;color:#FFF"';
            $styleWishListFlag = (isset($status["in_wishlist"]) && $status["in_wishlist"] == 1) ? '1' : '0';
            global $user;
            if (!$user->uid) {
                $str.='<li><a href="#" data-toggle="modal" data-target="#login" data-whatever=""><i' . $styleWishList . ' class="fa fa-heart"></i>Add to wishlist</a></li>';
            } else {
                $str.='<li><a href="#" class="add_to_wishlist" data-attr="' . $styleWishListFlag . ',' . $record["eid"] . '"><i ' . $styleWishList . ' class="fa fa-heart"></i>Add to wishlist</a></li>';
            }
           
            $str.='<li><a href="#"><i class="fa fa-eye"></i>View details</a></li>
                                            </ul>
                                        </div>
                                    </div>
                                    <div class="tagsec">';

            if (!empty($offers)) {
                $listingMapJson[$rKey]['base_price'] = $basePrice["base_price"];
                $str.= $offerStack['html'];
            }
            
            $str.='<div class="price">
                                            <p>$' . $basePrice["base_price"] . '</p>
                                        </div>
                                    </div>';
                                    
                                  //check for reviews
                                  $reviews = getListingReviews($record["eid"]);
                                  if(!empty($reviews)){ 
                                    $reviewString = (count($reviews)>1)?'reviews':'review';
                                    $str.='<div class="review">
                                        <p><span>'.count($reviews).'</span><br>
                                            '.$reviewString.'</p>
                                        <div class="botarrow"><img src="' . $base_url . '/' . drupal_get_path('theme', $GLOBALS['theme']) . '/images/arrow-cmnt.png" alt=" "></div>
                                    </div>';
                                  }
                                  $str.='<div class="clientpic">';

            $userDetails = user_load($record["uid"]);
            if ($userDetails->picture != "") {
                $file = file_load($userDetails->picture->fid);
                $imgpath = $file->uri;
                $str.='<img src="' . file_create_url($imgpath) . '" alt="display pic" />';
            } else {
                $str.='<img src="' . base_path() . drupal_get_path('theme', 'gloobers') . '/images/no-profile-male-img.jpg" alt="display pic" />';
            }
            $str.='</div>
                                </div>
                                <div class="headingsec">
                                    <h2><a href="' . $base_url . '/experience/' . $record["eid"] . '">' . ucwords($record["title"]) . '</a></h2>
                                    <p><span>' . ((strlen($record["city"])>12) ? (substr($record["city"],0,12).'..') : ($record["city"]))  . ', ' . $record["state"] . ' - </span><span>' . $record["experience_type"] . '</span></p>
                                </div>
                            </div>';

            $rKey++;
        }
        
        $count = getAllListingsCount($filter, $type, $uid, $homeSearch, $countriesArray);
        $filteredListing["count"] = $count;
        $filteredListing["string"] = $str . '<script> jQuery(document).ready(function($){jQuery(".flexslider").flexslider({slideshow: false}); listingClick(); addToWishList(); }); </script>';
       
        $filteredListing["mapString"] = json_encode($listingMapJson);
        echo json_encode($filteredListing);
        die;
    } else if (!empty($filter) && !isset($filter["offset"]) && isset($filter["search"])) {  

/*
    echo "<pre>";
    print_r($filter);exit;
*/
        $country=$filter["country"];
        $state=$filter["state_long"];
        $city=$filter["city"];            

        $search_text='';
        $filter["search"]=trim($filter["search"]);

        if($filter["search"]){

            if(strpos($filter["search"]," ")){

                $search_text=explode(' ', $filter["search"]);
                $search_text=trim($search_text[0],',');
           
            } else if(strpos($filter["search"],",")){

                $search_text=explode(',', $filter["search"]);
                $search_text=trim($search_text[0],',');
            
            } 
        }  


            if (!empty($country) && strpos(strtoupper($filter["search"]), strtoupper($country)) !== false) { 
                //echo "here1";    

                $or = db_or()->condition('el.country','%'.db_like($filter["country"]).'%','like');
                $query->condition($or);

            }elseif(!empty($state) && (strpos(strtoupper($filter["search"]), strtoupper($state)) !== false || strpos(strtoupper($state), strtoupper($filter["search"])) !== false)) {  
                 //echo "here2";    

                $or = db_or()->condition('el.state','%'.db_like($filter["state_short"]).'%','like')->condition('el.state','%'.db_like($filter["state_long"]).'%','like')->condition('el.state','%'.db_like($filter["search"]).'%','COLLATE UTF8_GENERAL_CI like');
                $query->condition($or);

            } else if(!empty($city) && (strpos(strtoupper($filter["search"]), strtoupper($city)) !== false || strpos(strtoupper($city), strtoupper($filter["search"])) !== false)) {        
            //echo "here3";       
                $or = db_or()->condition('el.city','%'.db_like($filter["city"]).'%','COLLATE UTF8_GENERAL_CI like')->condition('el.city','%'.db_like($filter["search"]).'%','COLLATE UTF8_GENERAL_CI like');
                $query->condition($or);

            } else {
               

                if($search_text) {

                $or = db_or()->
                condition('el.city','%'.db_like($filter["search"]).'%','COLLATE UTF8_GENERAL_CI like')->condition('el.city','%'.db_like($search_text).'%','COLLATE UTF8_GENERAL_CI like')->
                condition('el.state','%'.db_like($filter["search"]).'%','COLLATE UTF8_GENERAL_CI like')->condition('el.state','%'.db_like($search_text).'%','COLLATE UTF8_GENERAL_CI like')->
                condition('el.country','%'.db_like($filter["search"]).'%','COLLATE UTF8_GENERAL_CI like')->condition('el.country','%'.db_like($search_text).'%','COLLATE UTF8_GENERAL_CI like')->
                condition('el.address1','%'.db_like($filter["search"]).'%','COLLATE UTF8_GENERAL_CI like')->condition('el.address1','%'.db_like($search_text).'%','COLLATE UTF8_GENERAL_CI like')->
                condition('el.address2','%'.db_like($filter["search"]).'%','COLLATE UTF8_GENERAL_CI like')->condition('el.address2','%'.db_like($search_text).'%','COLLATE UTF8_GENERAL_CI like');
                } else {

                $or = db_or()->
                condition('el.city','%'.db_like($filter["search"]).'%','COLLATE UTF8_GENERAL_CI like')->
                condition('el.state','%'.db_like($filter["search"]).'%','COLLATE UTF8_GENERAL_CI like')->
                condition('el.country','%'.db_like($filter["search"]).'%','COLLATE UTF8_GENERAL_CI like')->
                condition('el.address1','%'.db_like($filter["search"]).'%','COLLATE UTF8_GENERAL_CI like')->
                condition('el.address2','%'.db_like($filter["search"]).'%','COLLATE UTF8_GENERAL_CI like');

                }                
               
                $query->condition($or);
            }

       
        $query = $query->range($pageLimitOffset, $pageSize);
        $result = $query->execute();
       
        while ($record = $result->fetchAssoc()) {
            $record['state']=@str_replace("'"," ",$record['state']);
            $record['title']=@str_replace("'"," ",$record['title']);
            
            $listings[] = $record;
        }
       
        return $listings;
        
    }
    // had removed old else case using nowhere. 03-13-2015
}
function getAllListingsCount($filter = array(), $type = '', $uid = '', $homeSearch = array(), $countriesArray1 = array()) {
    $pageSize = 8;
    $str = '';
    $listings = array();
    global $base_url;
    $filteredListing = array();
    $query = db_select('gbl_experience_list', 'el');
    $query->join('users', 'u', 'u.uid = el.uid');
    $query->join('gbl_pricing', 'pr', 'el.eid = pr.listing_id');
    $query->leftJoin('gbl_experience_category', 'ec', 'ec.cid = el.experience_category');
    $query->join('gbl_experience_type', 'et', 'et.id = el.experience_type');
    $query->leftJoin('gbl_scheduling_sessions', 'sh', 'el.eid = sh.listing_id');
    if ($uid != "" && $type == 'my_wishlist') {
        $query->join('gbl_my_wishlist', 'w', 'el.eid = w.listing_id');
    }
    $query->fields('el', array('eid', 'title', 'latitude', 'longitude', 'address1', 'address2', 'city', 'state', 'country', 'average_ratings', 'uid'));
   $query->fields('pr', array('min_price', 'max_price'))
           ->fields('ec', array('category_name'))
            ->fields('et', array('experience_type'))
            ->fields('sh', array('startDate', 'endDate','avalability_max'));
    if ($uid != "" && $type == 'my_wishlist') {
        $query->fields('w', array('in_wishlist'));
    }
    $query->condition('el.visibility_status', 1);
    $query->condition('el.list_status', 1);
    if(empty($filter)) {
    $or = db_or()->condition('sh.endRepeatDate',date('Y-m-d'),'>=')->isNull('sh.endRepeatDate');
    $query->condition($or);
    }
    $query->groupBy('el.eid');

    if ($uid != "" && $type == 'my_wishlist') {
        $query->orderBy('w.added', 'DESC');
        $query->condition('w.uid', $uid);
        $query->condition('w.in_wishlist', 1);
        $or = db_or()->condition('sh.startDate', date('Y-m-d'), '>=')->isNull('sh.startDate');
        $query->condition($or);
    } else if ($uid != "" && $type == 'my_listing') {
        $query->orderBy('el.created', 'DESC');
        $query->condition('el.uid', $uid);
    } else {
        $query->orderBy('el.created', 'DESC');
        
    }
    if (empty($filter)) {
       
        $result = $query->execute();
        while ($record = $result->fetchAssoc()) {
            $listings[] = $record;
        }
        return $listings;
    } else if (!empty($filter) && !isset($filter["offset"]) && !isset($filter["search"])) {
        
        if (isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && (!isset($filter["typeId"]) || $filter["typeId"] == 'all') && !isset($filter["catID"])) {
            $query->orderBy('el.average_ratings', 'DESC');
            $query->condition('el.average_ratings', $filter["rate"], '<=');
        } else if (!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && (!isset($filter["typeId"]) || $filter["typeId"] == 'all') && !isset($filter["catID"])) {
            $query->orderBy('el.base_price', 'ASC');
            $query->condition('el.base_price', array($filter["min"], $filter["max"]), 'BETWEEN');
        } else if (!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && (isset($filter["typeId"]) && $filter["typeId"] != 'all') && !isset($filter["catID"])) {
            $query->orderBy('el.base_price', 'ASC');
            $query->condition('el.base_price', array($filter["min"], $filter["max"]), 'BETWEEN');
            $query->condition('et.id', $filter["typeId"], '=');
        } else if (!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && (isset($filter["typeId"]) && $filter["typeId"] != 'all') && isset($filter["catID"])) {
            $query->orderBy('el.base_price', 'ASC');
            $query->condition('el.base_price', array($filter["min"], $filter["max"]), 'BETWEEN');
            $query->condition('et.id', $filter["typeId"], '=');
            $query->condition('ec.cid', $filter["catID"], '=');
        } else if (!isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && (isset($filter["typeId"]) && $filter["typeId"] != 'all') && !isset($filter["catID"])) {
            $query->condition('et.id', $filter["typeId"], '=');
        } else if (!isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && (isset($filter["typeId"]) && $filter["typeId"] != 'all') && isset($filter["catID"])) {
            $query->condition('et.id', $filter["typeId"], '=');
            $query->condition('ec.cid', $filter["catID"], '=');
        }
        foreach ($homeSearch['search'] as $key => $value) {
            if ($key == "place") {
            
                if (isset($homeSearch["city"])) {
                    $or = db_or()->condition('el.city','%'.db_like($homeSearch["city"]).'%','LIKE')->condition('el.city','%'.db_like($homeSearch["search"]).'%','like')->condition('el.state', $homeSearch["state_short"], 'like')->condition('el.state', db_like($homeSearch["state_long"]), 'like')->condition('el.state', $filter["state_long"], 'like')->condition('el.state',db_like($homeSearch["search"]),'like');
                    $query->condition($or);
                   
                } else if (isset($homeSearch["state_short"])) {
                    $or = db_or()->condition('el.state', $homeSearch["state_short"], 'like')->condition('el.state', $homeSearch["state_long"], 'like')->condition('el.city', $homeSearch["state_long"], 'like');
                    $query->condition($or);
                } else if (isset($homeSearch["country"])) {
                    $or = db_or()->condition('el.country', '%'.db_like($homeSearch["country"]).'%', 'like')->condition('el.state', $homeSearch["state_short"], 'like')->condition('el.state', db_like($homeSearch["state_long"]), 'like')->condition('el.state', $homeSearch["state_long"], 'like')->condition('el.country', '%'.db_like($homeSearch["country"]).'%', 'like')->condition('el.city',db_like($homeSearch["search"]),'like');
                    $query->condition($or);
                    
                }  else if (isset($homeSearch["continent"])) {
                    $query->addExpression('COUNT(el.city)', 'cnumber');
                    $query->orderBy('cnumber', 'DESC');
                    $query->condition('el.country', $countriesArray, 'in');
                    $query->where('el1.city = el.city');
                } 
            }
           
              if($key == "when"){
                if($value != ''){
                    $value = date('Y-m-d', strtotime($value));
                    $dates = array('sh.startDate', 'sh.endRepeatDate');
                    $query->condition(db_or()->condition('sh.startDate', $value, '<=')->isNull('sh.startDate'));
                    $query->condition(db_or()->condition('sh.endRepeatDate', $value, '>=')->isNull('sh.endRepeatDate'));
                }
            }
             if($key == "person"){
                if ($value != '') {
                    $or = db_or()->isNull('sh.avalability_max')->condition('sh.avalability_max', $value, '>=');
                    $query->condition($or);
                }
            }

        }
        
        $result = $query->execute();
        return  $result->rowCount();
    } else if (!empty($filter) && !isset($filter["offset"]) && isset($filter["search"])) {
        
        $country=$filter["country"];
        $state=$filter["state_long"];
        $city=$filter["city"];            

        $search_text='';
        $filter["search"]=trim($filter["search"]);

        if($filter["search"]){

            if(strpos($filter["search"]," ")){

                $search_text=explode(' ', $filter["search"]);
                $search_text=trim($search_text[0],',');
           
            } else if(strpos($filter["search"],",")){

                $search_text=explode(',', $filter["search"]);
                $search_text=trim($search_text[0],',');
            
            } 
        }  


            if (!empty($country) && strpos(strtoupper($filter["search"]), strtoupper($country)) !== false) { 
                //echo "here1";    

                $or = db_or()->condition('el.country','%'.db_like($filter["country"]).'%','like');
                $query->condition($or);

            }elseif(!empty($state) && (strpos(strtoupper($filter["search"]), strtoupper($state)) !== false || strpos(strtoupper($state), strtoupper($filter["search"])) !== false)) {  
                 //echo "here2";    

                $or = db_or()->condition('el.state','%'.db_like($filter["state_short"]).'%','like')->condition('el.state','%'.db_like($filter["state_long"]).'%','like')->condition('el.state','%'.db_like($filter["search"]).'%','COLLATE UTF8_GENERAL_CI like');
                $query->condition($or);

            } else if(!empty($city) && (strpos(strtoupper($filter["search"]), strtoupper($city)) !== false || strpos(strtoupper($city), strtoupper($filter["search"])) !== false)) {        
            //echo "here3";       
                $or = db_or()->condition('el.city','%'.db_like($filter["city"]).'%','COLLATE UTF8_GENERAL_CI like')->condition('el.city','%'.db_like($filter["search"]).'%','COLLATE UTF8_GENERAL_CI like');
                $query->condition($or);

            } else {
              

                if($search_text) {

                $or = db_or()->
                condition('el.city','%'.db_like($filter["search"]).'%','COLLATE UTF8_GENERAL_CI like')->condition('el.city','%'.db_like($search_text).'%','COLLATE UTF8_GENERAL_CI like')->
                condition('el.state','%'.db_like($filter["search"]).'%','COLLATE UTF8_GENERAL_CI like')->condition('el.state','%'.db_like($search_text).'%','COLLATE UTF8_GENERAL_CI like')->
                condition('el.country','%'.db_like($filter["search"]).'%','COLLATE UTF8_GENERAL_CI like')->condition('el.country','%'.db_like($search_text).'%','COLLATE UTF8_GENERAL_CI like')->
                condition('el.address1','%'.db_like($filter["search"]).'%','COLLATE UTF8_GENERAL_CI like')->condition('el.address1','%'.db_like($search_text).'%','COLLATE UTF8_GENERAL_CI like')->
                condition('el.address2','%'.db_like($filter["search"]).'%','COLLATE UTF8_GENERAL_CI like')->condition('el.address2','%'.db_like($search_text).'%','COLLATE UTF8_GENERAL_CI like');
                } else {

                $or = db_or()->
                condition('el.city','%'.db_like($filter["search"]).'%','COLLATE UTF8_GENERAL_CI like')->
                condition('el.state','%'.db_like($filter["search"]).'%','COLLATE UTF8_GENERAL_CI like')->
                condition('el.country','%'.db_like($filter["search"]).'%','COLLATE UTF8_GENERAL_CI like')->
                condition('el.address1','%'.db_like($filter["search"]).'%','COLLATE UTF8_GENERAL_CI like')->
                condition('el.address2','%'.db_like($filter["search"]).'%','COLLATE UTF8_GENERAL_CI like');

                }
                
               
                $query->condition($or);
            }
            

        $result = $query->execute();
        
        return $result->rowCount(); 
    }
}


function getWishlistStatus($listingId = "") {
    global $user;
    $query = db_select('gbl_my_wishlist', 'w')
            ->fields('w', array('in_wishlist'))
            ->condition('listing_id', $listingId)
            ->condition('uid', $user->uid)
            ->execute();
    return $query->fetchAssoc();
}

function add_wishlist() {
    global $user;

    $listingId = isset($_POST["listingId"]) ? $_POST["listingId"] : '';
    $status = isset($_POST["status"]) ? $_POST["status"] : '';

    if ($status == 0) {
        $status = 1;
    } else {
        $status = 0;
    }

    $query = db_select('gbl_my_wishlist', 'w')
            ->fields('w', array('id'))
            ->condition('listing_id', $listingId)
            ->condition('uid', $user->uid)
            ->execute();
    $result = $query->fetchAssoc();
    if (!empty($result)) {
        $nid = db_update('gbl_my_wishlist')
                ->fields(array(
                    'in_wishlist' => $status,
                    'modified' => time()
                ))
                ->condition('listing_id', $listingId)
                ->condition('uid', $user->uid)
                ->execute();
        if ($nid) {
            echo $status . "-" . $listingId;
            die;
        }
    } else {
        $nid = db_insert('gbl_my_wishlist')
                ->fields(array(
                    'listing_id' => $listingId,
                    'uid' => $user->uid,
                    'in_wishlist' => $status,
                    'added' => time()
                ))
                ->execute();
        if ($nid) {
            echo $status . "-" . $listingId;
            die;
        }
    }
}

function my_wishlist() {
    global $user;
    if (!$user->uid) {
        $_SESSION['destination'] = drupal_get_destination();
        drupal_goto('login');
    }
    $filter = array();
    if (isset($_POST["action"]) && $_POST["action"] == "filter") {
        $filter = $_POST;
    }
    $listings = getAllListings($filter, 'my_wishlist', $user->uid);
    return theme('wishlist', array('listings' => $listings));
}

function my_listing() {
    global $user;
    if (!$user->uid) {
        $_SESSION['destination'] = drupal_get_destination();
        drupal_goto('login');
    }
    $filter = array();
    if (isset($_POST["action"]) && $_POST["action"] == "filter") {
        $filter = $_POST;
    }
    $listings = getAllListings($filter, 'my_listing', $user->uid);
    return theme('my_listing', array('listings' => $listings));
}

function confirm_booking() {
    $scheduleSessionData = getScheduleSessionData(arg(1));
    return theme('confirm_booking', array('scheduleSessionData' => $scheduleSessionData));
}

function getBasePrice($eid = "") {
    $query = db_select('gbl_experience_list', 'p')
            ->fields('p', array('base_price'))
            ->orderBy('base_price')
            ->condition('eid', $eid)
            ->range(0, 1)
            ->execute();
    return $query->fetchAssoc();
}

function booking_summary() {
    session_start();
    if (isset($_POST["listing_id"])) {
        $_SESSION["listing_id"] = $_POST["listing_id"];
    }
    $listID = $_SESSION['order']['eid'];
    $postedData = $_REQUEST;
    $OverviewData = getOverviewData($listID);
    $pricingData = getPricingData($listID);
    $basePrice = getBasePrice($listID);
    $rulesDetail = getRulesDetails($listID);
    $rulesDetail = unserialize($rulesDetail["value1"]);
    $extras = getProductExtraData($listID);
    $scheduleSessionData = getScheduleSessionData($listID);
    $schedulingData = getSchedulingData($listID);
    return theme('booking_summary', array('extras' => $extras, 'schedulingData' => $schedulingData, 'scheduleSessionData' => $scheduleSessionData, 'postedData' => $postedData, 'OverviewData' => $OverviewData, 'pricingData' => $pricingData, 'basePrice' => $basePrice, 'rulesDetail' => $rulesDetail));
}
/**
 * booking process for hotel
 */
function booking_hotel_summary() {
    $hotel_room_cart_array = $_SESSION["hotel_room_cart"];
    return theme('booking_hotel_summary', array('cart_values' =>$hotel_room_cart_array));
}

function selectAllTypes($string = '') {
    $matches = array();

    if ($string) {
        $items = array_map('trim', explode(',', $string));
        $last_item = array_pop($items);
        $prefix = implode(', ', $items);

        $result = db_select('gbl_experience_type')->fields('gbl_experience_type', array('experience_type'))->condition('experience_type', '%' . db_like($last_item) . '%', 'LIKE')->range(0, 10)->execute();
        foreach ($result as $type) {
            if (!in_array($type->experience_type, $items)) {
                $value = !empty($prefix) ? $prefix . ', ' . $type->experience_type : $type->experience_type;
                $matches[$value] = check_plain($value);
            }
        }
    }

    drupal_json_output($matches);
}

function experience_homepage_search_form($form, $form_state) {
    $form = array();

    $form['destination'] = array(
        '#type' => 'textfield',
        '#size' => '30',
        "#attributes" => array("class" => array('loc'), 'id' => 'destination4', 'placeholder' => 'Paris, New York, Londre...'),
    );

    $form['type'] = array(
        '#type' => 'textfield',
        '#size' => '30',
        '#autocomplete_path' => 'type/autocomplete',
        "#attributes" => array("class" => array('exp'), 'placeholder' => 'Hiking, Sky Dinving...'),
    );

    $form['when'] = array(
        '#type' => 'textfield',
        '#size' => '30',
        "#attributes" => array("class" => array('cal'), 'id' => 'destination4', 'placeholder' => 'When?', 'id' => 'datepicker'),
    );

    $form['participants'] = array(
        '#type' => 'textfield',
        '#size' => '30',
        "#attributes" => array("class" => array('loc'), 'id' => 'destination4', 'placeholder' => 'Participants'),
    );

    $form['search'] = array(
        '#type' => 'submit',
        '#attributes' => array('class' => array('btn-bg')),
        '#value' => 'Search'
    );

    return $form;
}



function getCountryListWithIsoCode() {
    $countries = array();
    $query = db_select('gbl_country_list', 'c')
            ->fields('c', array('country_name', 'iso_code'))
            ->execute();
    while ($data = $query->fetchAssoc()) {
        $countries[$data['iso_code']] = $data['country_name'];
    }
    return $countries;
}

function booking_details_form_submit($form, $form_state) {
   
    global $user;

    $discount = 0;
    $overviewData = getOverviewData($_SESSION['listing_id']);
    $provider = user_load($overviewData["uid"]);
    $bilingdetail = array();
    $_SESSION['first_name'] = $bilingdetail['first_name'] = trim($form_state['values']['first_name']);
    $_SESSION['last_name'] = $bilingdetail['last_name'] = trim($form_state['values']['last_name']);
    $_SESSION['email'] = $bilingdetail['email'] = trim($form_state['values']['email']);
    $_SESSION['company'] = $bilingdetail['company'] = trim($form_state['values']['company']);
    $_SESSION['address'] = $bilingdetail['address'] = trim($form_state['values']['address']);
    $_SESSION['city'] = $bilingdetail['city'] = trim($form_state['values']['city']);
    $_SESSION['state'] = $bilingdetail['state'] = trim($form_state['values']['state']);
    $_SESSION['country'] = $bilingdetail['country'] = trim($form_state['values']['country']);
    $_SESSION['zipcode'] = $bilingdetail['zipcode'] = trim($form_state['values']['zipcode']);
    $_SESSION['phone_number'] = $bilingdetail['phone_number'] = trim($form_state['values']['phone_number']);
    $_SESSION['message'] = $message = trim($form_state['values']['message']);

    if (isset($_SESSION['check-out'])) {
        $bilingdetail['check-out-date'] = $_SESSION['check-out'];
    }
    if (isset($_SESSION['check-out-time'])) {
        $bilingdetail['check-out-time'] = $_SESSION['check-out-time'];
    }
    if (isset($_SESSION['duration'])) {
        $bilingdetail['duration'] = $_SESSION['duration'];
    }
    if (isset($_SESSION['discount'])) {
        $discount = $_SESSION['discount'];
    }
    $paymentType = urlencode('Sale');    // 'Authorization' or 'Sale'
    $firstName = urlencode($form_state['values']['first_name']);
    $lastName = urlencode($form_state['values']['last_name']);
    $creditCardType = urlencode($form_state['values']['credit_card_type']);
    $creditCardNumber = urlencode($form_state['values']['credit_card_no']);
    $expDateMonth = $form_state['values']['credit_expiration_month'];
   
    $padDateMonth = urlencode(str_pad($expDateMonth, 2, '0', STR_PAD_LEFT));

    $expDateYear = urlencode($form_state['values']['credit_expiration_year']);
    $cvv2Number = urlencode($form_state['values']['credit_varification_no']);
    $address1 = urlencode($form_state['values']['address']);

    $city = urlencode($form_state['values']['city']);
    $state = urlencode($form_state['values']['state']);
    $zip = urlencode($form_state['values']['zipcode']);
    $country = urlencode($form_state['values']['country']);    // US or other valid country code
    
    $amount = urlencode($_SESSION['total_amount'] - $discount);

    $currencyID = urlencode('USD');       // or other currency ('GBP', 'EUR', 'JPY', 'CAD', 'AUD')

    $nvpStr = "&PAYMENTACTION=$paymentType&AMT=$amount&CREDITCARDTYPE=$creditCardType&ACCT=$creditCardNumber" .
            "&EXPDATE=$padDateMonth$expDateYear&CVV2=$cvv2Number&FIRSTNAME=$firstName&LASTNAME=$lastName" .
            "&STREET=$address1&CITY=$city&STATE=$state&ZIP=$zip&COUNTRYCODE=$country&CURRENCYCODE=$currencyID";

    /* echo $nvpStr; die; */
    $httpParsedResponseAr = PPHttpPost('DoDirectPayment', $nvpStr);
    
    if ($httpParsedResponseAr['ACK'] == 'Success' || $httpParsedResponseAr['ACK'] == 'SUCCESSWITHWARNING') {
        $amount = urldecode($httpParsedResponseAr['AMT']);
        $timeStamp = urldecode($httpParsedResponseAr['TIMESTAMP']);
        $currency = urldecode($httpParsedResponseAr['CURRENCYCODE']);
        $transId = urldecode($httpParsedResponseAr['TRANSACTIONID']);
        $date = date('Y-m-d H:i:s', strtotime($timeStamp));
        /* Insert in booking table */
        $participantsDetails = unserialize($_SESSION['participants']);
        $total_cost = 0;
        $quantity = 0;
        foreach ($participantsDetails as $key => $value) {
            $key = explode("-", $key);
            $total_cost = $total_cost + ($key[1] * $value);
            $quantity = $quantity + $key[1];
        }
       
        $listId = $_SESSION['listing_id'];
        $arrival_time = $_SESSION['booking-on_time'];
        $additional_amount = ($_SESSION['additional-services-amount']) ? $_SESSION['additional-services-amount'] : 0;
        $booking_date_from = date('Y-m-d', strtotime($_SESSION['booking-on']));
        $security_deposit = $_SESSION['Security'];
        $subTotal = $_SESSION['sub_total'];
        $grandTotal = $_SESSION['total_amount'] - $discount;
        $bookingID = random_string(10);
        $query = db_insert('gbl_booking')
                ->fields(array('lid' => $listId, 'uid' => $user->uid, 'quantity' => $quantity, 'quantity_details' => $_SESSION['participants'], 'additional_cost' => $additional_amount, 'additional_services' => ($_SESSION["additional-services"]) ? $_SESSION["additional-services"] : '', 'total_cost' => $subTotal, 'security' => $security_deposit, 'discount' => $discount, 'grand_total' => $grandTotal, 'arrive_at_date' => $booking_date_from, 'created' => time(), 'booking_status' => 'booked', 'other_details' => serialize($bilingdetail), 'arrive_at_time' => $arrival_time, 'booking_id' => $bookingID));
        $result = $query->execute();
        /* Get new id after insert and insert in payment table */
        if ($result) {
            $query1 = db_insert('gbl_payment')
                    ->fields(array('bid' => $result, 'trans_id' => $transId, 'payment_status' => 'completed', 'payment_at' => $date, 'amount' => $amount))
                    ->execute();

            /*  Mail Send to provider */
            if (!empty($provider->field_first_name)) {
                $providename = $provider->field_first_name['und'][0]['value'] . "  " . $provider->field_last_name['und'][0]['value'];
            } else {
                $providename = $provider->name;
            }
            $title = 'Hello ' . ucfirst($providename) . ',<br/>';
            $body = '<p>' . $bilingdetail['first_name'] . " " . $bilingdetail['last_name'] . ' has booked your deal - <b>' . $overviewData['title'] . '</b></p>
                    <p><b>Guest Name:</b>' . $bilingdetail['first_name'] . " " . $bilingdetail['last_name'] . '</p><p><b>Arrival Date:</b>' . $_SESSION['booking-on'] . '</p><p><b>Arrival Time</b>' . $_SESSION['booking-on_time'] . '</p><p><b>Amount Paid</b>' . $_SESSION['total_amount'] . '</p>';


            $module = 'listing';
            $key = 'message_to_provider_booking_confirmation';
            $to_email = trim($provider->mail);
            $subject = 'Booking Confirmation:' . $overviewData['title'];
            sendNotificationEmail($module, $key, $to_email, $subject, $title, $body);

            /*             * *********************************Mail send to Traveller************************************************************************ */
            $traveller = user_load($user->uid);
            if (!empty($traveller->field_first_name)) {
                $travellername = $traveller->field_first_name['und'][0]['value'] . "  " . $traveller->field_last_name['und'][0]['value'];
            } else {
                $travellername = $traveller->name;
            }
            $title = 'Hello ' . ucfirst($bilingdetail['first_name'] . " " . $bilingdetail['last_name']) . ',<br/>';
            $body = '<p>Your Booking has been confirmed for - <b>' . $overviewData['title'] . '</b></p>
                                 <p><b>Guest Name:</b>' . $bilingdetail['first_name'] . " " . $bilingdetail['last_name'] . '</p><p><b>Arrival Date:</b>' . $_SESSION['booking-on'] . '</p><p><b>Arrival Time</b>' . $_SESSION['booking-on_time'] . '</p><p><b>Amount Paid</b>' . $_SESSION['total_amount'] . '</p>';

            $module = 'listing';
            $key = 'message_to_traveller_confirmation';
            $to_email = trim($bilingdetail['email']);
            $subject = 'Booking Confirmation:' . $overviewData['title'];
            sendNotificationEmail($module, $key, $to_email, $subject, $title, $body);
            /*             * *********************************************************************************** */
          
            unset($_SESSION['first_name']);
            unset($_SESSION['last_name']);
            unset($_SESSION['email']);
            unset($_SESSION['company']);
            unset($_SESSION['address']);
            unset($_SESSION['city']);
            unset($_SESSION['state']);
            unset($_SESSION['country']);
            unset($_SESSION['zipcode']);
            unset($_SESSION['phone_number']);
            unset($_SESSION['message']);
        }
        drupal_goto('booking/success/' . $bookingID);
    } else if ($httpParsedResponseAr['ACK'] == 'Failure') {
        $errorMessage = urldecode($httpParsedResponseAr['L_LONGMESSAGE0']);
        drupal_set_message($errorMessage, 'error');
        
    }
}

function PPHttpPost($methodName_, $nvpStr_) {
    $environment = 'sandbox';
    $credentials = getPaypalCredentails();
    if($credentials['api_pass'] != ""){       
        $key = pack('H*', "bcb04b7e103a0cd8b54763051cefRuDy55abe029fdebae251d417e2ffb2a00a3");
        $ciphertext_dec = base64_decode($credentials['api_pass']);
        $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
        $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);
        $iv_dec = substr($ciphertext_dec, 0, $iv_size);
        $ciphertext_dec = substr($ciphertext_dec, $iv_size);
        $pass = mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key, $ciphertext_dec, MCRYPT_MODE_CBC, $iv_dec);
    }
    // Set up your API credentials, PayPal end point, and API version.
    $API_UserName = urlencode($credentials['api_name']);
    $API_Password = urlencode($pass); 
    $API_Signature = urlencode($credentials['api_key']); 
    $API_Endpoint = "https://api-3t.paypal.com/nvp";
    
    if ("sandbox" === $environment || "beta-sandbox" === $environment){
        $API_Endpoint = "https://api-3t.$environment.paypal.com/nvp";
    }
    $version = urlencode('51.0');

    // Set the curl parameters.
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $API_Endpoint);
    curl_setopt($ch, CURLOPT_VERBOSE, 1);

    // Turn off the server and peer verification (TrustManager Concept).
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);

    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_POST, 1);

    // Set the API operation, version, and API signature in the request.
    $nvpreq = "METHOD=$methodName_&VERSION=$version&PWD=$API_Password&USER=$API_UserName&SIGNATURE=$API_Signature$nvpStr_";

    // Set the request as a POST FIELD for curl.
    curl_setopt($ch, CURLOPT_POSTFIELDS, $nvpreq);

    // Get response from the server.
    $httpResponse = curl_exec($ch);

    if(!$httpResponse){
    
        exit("$methodName_ failed: " . curl_error($ch) . '(' . curl_errno($ch) . ')');
    }

    // Extract the response details.
    $httpResponseAr = explode("&", $httpResponse);
    $httpParsedResponseAr = array();
    foreach ($httpResponseAr as $i => $value){
        $tmpAr = explode("=", $value);
        if (sizeof($tmpAr) > 1) {
            $httpParsedResponseAr[$tmpAr[0]] = $tmpAr[1];
        }
    }
    return $httpParsedResponseAr;
}

function booking_success() {
    $city = 'Chandigarh';
    return theme('booking_success', array('city' => $city));
}

function hotel_booking_success() {
    $city = 'Chandigarh';
    return theme('hotel_booking_success', array('city' => $city));
}

function checkOfferApplyNew($offers = array(),$listingResult=array()) {
   
    //put all offers into valid array
    $availOfferStack = array();
    $allOffers = array();
    
    //filter by position first 24 hours , Last minute and then Early Bird
    foreach($offers as $i=>$offer){
        if($offer['offer_type']=='24 Hour Offer'){
            $allOffers[0] = $offer;
        }else if($offer['offer_type']=='Last Minute'){
            $allOffers[1] = $offer;
        }else{
            $allOffers[2] = $offer;
        }
    }
    ksort($allOffers);
    //echo "<pre>";Print_r($allOffers);exit;
    foreach($allOffers as $i=>$offer){
            
        if($offer['offer_type']=='24 Hour Offer'){
           $availOfferStack =  hours24($offer,$listingResult);
           if(!empty($availOfferStack)){
              break;
           }else{
              continue;
           }
        }else if($offer['offer_type']=='Last Minute'){
           $availOfferStack =  lastMinute($offer,$listingResult);
           if(!empty($availOfferStack)){
              break;
           }else{
              continue;
           }
        }else{
           $availOfferStack =  earlyBird($offer,$listingResult);
           if(!empty($availOfferStack)){
              break;
           }else{
              continue;
           }
        }
    }
    
    return $availOfferStack;
}

//6 july 2016/

function get_session_timings($cDate=NULL,$listID=NULL,$backend=NULL,$returnType='json'){
 session_start();
    
    if($_POST['date_changes']=='yes'){
        /*unset all sessions when date changed*/
        unset($_SESSION['order']['Mainsubtotal']);
        unset($_SESSION['order']['subtotal']['person_total']);
        unset($_SESSION['order']['subtotal']['item_total']);
        unset($_SESSION['order']['subtotal']);
        unset($_SESSION['order']['person_type']);
        unset($_SESSION['order']['item_type']);
        unset($_SESSION['user_booking_details']);
        $_SESSION['order']['Mainsubtotal']=0;
        
    }

    $cdate = ($_POST['cdate']) ? $_POST['cdate'] : $cDate;
    $listID = ($_POST['listing_id']) ? $_POST['listing_id'] : $listID;
   
    $minuteVariation = 0;
    $startAvailTime = $endAvailTime = "";
    $timeAvailable = $sessionData = $fixedTime = array();
    $schedulingData = getSchedulingData($listID);    
    $offersAll=getOffersAndDiscountsDataBylist($listID);
    $currentDateAvail=date('Y-m-d');
    $currentDate=strtotime($currentDateAvail);
    $your_date = strtotime($cdate);
    if($your_date>$currentDate){
            $datediff = $your_date -$currentDate ;
            $noofDays=floor($datediff/(60*60*24));
            //$noofDays>7
            //Early Bird Offer Apply
            
            //$noofDays<=7
            //Last Minute Offer Apply
    }else if($your_date==$currentDate){
        $noofDays=0;
    }
    //echo $noofDays;exit;
    $availOfferStack=array();
    foreach($offersAll as $offers){
        if($noofDays==0){
            if($offers['offer_type']=='24 Hour Offer'){
            
                //Apply here 24 Hour Disscount
                $check24HourOffer= hourOffer24New($cdate,$offers);
                //echo "<pre>";Print_r($check24HourOffer);exit;
                if($check24HourOffer['noOffer']==0){
                //echo $offers['offer_type'];exit;
                    $availOfferStack['offerType']=$offers['offer_type'];
                    $availOfferStack['amount']=$check24HourOffer['amount'];
                    $availOfferStack['disscountBy']=$check24HourOffer['disscountby'];
                }
            }
        }
        if($noofDays>7){
            if($offers['offer_type']=='Early Birds'){
                 //Early Bird Apply
                 $checkEarlyBird=earlyBirdNew($noofDays,$offers);
                 if($checkEarlyBird>0){
                    $availOfferStack['offerType']=$offers['offer_type'];
                    $availOfferStack['amount']=$offers['amount'];
                    $availOfferStack['disscountBy']=$offers['discount_by'];
                 }
            }
        }
        if($noofDays<7){
            if($offers['offer_type']=='Last Minute'){
              //Last Minute Apply
                  $checkLastMinute=lastMinuteNew($noofDays,$offers);
                  if($checkLastMinute>0){
                    $availOfferStack['offerType']=$offers['offer_type'];
                    $availOfferStack['amount']=$offers['amount'];
                    $availOfferStack['disscountBy']=$offers['discount_by'];
                 }
            }
        }
    }

    $_SESSION['order']['disscountOfferApply']=$availOfferStack;

    $avalability_min='';$avalability_max='';$repeatEvery=0;$datePricing = array(); $count_arr="";$time_range=array();
    $privacy='';


    if ($schedulingData['bookingMode'] == 'INVENTORY' || $schedulingData['bookingMode'] == 'NO_DATE'){
        

         $result=getScheduleSessionData($_POST['listing_id']);                  

           if($result) {                         

                $cur_date=strtotime(date("Y-m-d"));
                $session_dt=strtotime($cdate);                
               
                foreach($result as $key => $val){ 
                                                
                    $session_time = unserialize($val['startTime']);
                    $selected_day=date('l',$session_dt); 
                    $time_range=$session_time[$selected_day]['Time'];
                    
                    /*sort time arrray in ascending order */                   
                    sort($time_range);
                    $arrlength=count($time_range);
                    for($x=0;$x<$arrlength;$x++)
                      {
                      $time_range[$x]=$time_range[$x];      
                      
                     }
                                                     
                    $avalability_min=$val['avalability_min'];
                    $avalability_max=$val['avalability_max'];
                    $datePricing=unserialize($val['pricingData']);
                    $_SESSION['seleted_date_data_pricing'] = $datePricing;
                    $count_arr=count($datePricing);    
                    $privacy=$result[0]['privacy'];                                                 

                }            
                
				/*Get user IP address*/	
                $system_ip = $_SERVER["REMOTE_ADDR"];	
				$getTimeZone	=	file_get_contents('https://ipapi.co/'.$system_ip.'/json/');
				$getTimeZone	= json_decode($getTimeZone);
				$tZone	=	$getTimeZone->timezone;  
				$date = new DateTime('now', new DateTimeZone($tZone));
				$current_time=$date->format('H:i:s');				
				//echo strtotime($current_time);exit;
				
                /*If date is current date*/                
                if($session_dt<=$cur_date){
                   foreach($time_range as $key => $time_rang){
                       if(strtotime($time_rang)<strtotime($current_time)){
                           unset($time_range[$key]);
                       } 
                   } 

                }      
                
                /*if session is private remove already booked session time*/        
                
                if($privacy=='PRIVATE') {
                 
                 $cdate=date('Y-m-d', strtotime($cdate));   
                                       
                $check_booking=db_select('gbl_booking','b')->fields('b',array('arrive_at_time'))->condition('lid',$_POST['listing_id'])->condition('arrive_at_date',$cdate)->execute();
                  $check_bookings=$check_booking->fetchAll(PDO::FETCH_ASSOC);                                               
                // Search
                    if($check_bookings){
                        foreach($time_range as $key => $time_rang){ 
                                   
                        foreach($check_bookings as $key1 => $check_booking){  

                         if(strtotime($check_booking['arrive_at_time'])==strtotime($time_rang)){
                           unset($time_range[$key]);      
                         }                                    
                   
                        } 
                    }       
                  }
                   
                }  

                $new_time_range='';$main_time_range='';        
                foreach ($time_range as $time_rang) {
                    $new_time_range[]=strtotime($time_rang);
                }         
                 sort($new_time_range);

                foreach ($new_time_range as $new_time_rang) {
                    $main_time_range[]=date("g:i A",$new_time_rang); 
                }

                $timeArrayRange=array('duration'=>max($time_range),'repeatEvery'=>$repeatEvery,'timevalarray'=>$main_time_range);  
                $avalability_minmax=array('avalabilitymin'=>$avalability_min,'avalabilitymax'=>$avalability_max);     


            }else{               
                $timeArrayRange=array();
               // $datePricing=array();
                $count_arr="";
                $avalability_minmax =array();
             }
            if($returnType=='json'){  
                
                echo json_encode($timeArrayRange).'~'.json_encode($avalability_minmax).'~'.json_encode($count_arr);                             
                exit;                
           
            }else{
            return ($timeArray);
            }
            exit;

    } 
}



function getOffersAllDuringBook($listId,$your_date){

    $offersAll=getOffersAndDiscountsDataBylist($listID);
    $currentDateAvail=date('Y-m-d');
    $currentDate=strtotime($currentDateAvail);
    $your_date = strtotime($cdate);
    if($your_date>$currentDate){
            $datediff = $your_date -$currentDate ;
            $noofDays=floor($datediff/(60*60*24));
            if($noofDays>7){
            //Early Bird Offer Apply Here
            
            }else{
            //Last Minute Offer Apply Here
            }
    }
    $availOfferStack=array();
    foreach($offersAll as $offers){
        if($noofDays==0){
            if($offers['offer_type']=='24 Hour Offer'){
                $datesAvailForDiss=unserialize($offers['offer_type']);
                if(in_array($your_date,$datesAvailForDiss)){
                    //Apply here 24 Hour Disscount
                
                
                }
               //$availOfferStack =  hours24New($offer,$listingResult);
               if(!empty($availOfferStack)){
                  break;
               }else{
                  continue;
               }
            }
        }
        if($noofDays>7){
            if($offers['offer_type']=='Early Birds'){
                 //Early Bird Apply
                // echo "<pre>";Print_r($offers);exit;
                 $checkEarlyBird=earlyBirdNew($noofDays,$offers);
                 if($checkEarlyBird>0){
                    $availOfferStack['offerType']=$offers['offer_type'];
                    $availOfferStack['amount']=$offers['amount'];
                    $availOfferStack['disscountBy']=$offers['discount_by'];
                 }
            }
        }
        if($noofDays<7){
            if($offers['offer_type']=='Last Minute'){
              //Last Minute Apply
            }
        }
    }


}

function getSchedulingDataPrice($cdate = '', $listID = '') {
    $pricingData = '';
    
    $result = db_query("SELECT pricingData FROM `gbl_scheduling_sessions` WHERE  ('" . $cdate . "' between `startDate` AND `endRepeatDate` or  `startDate` = '" . $cdate . "') and listing_id=" . $listID);
    foreach ($result as $data) {
        $pricingData = $data->pricingData;
    }
    return $pricingData;
}

function get_experience_pricing() {
    $qty = $_POST["qty"];
    $listID = $_POST["listing_id"];
    $pricingData = '';
    $result = db_query("SELECT price,price_group_type FROM `gbl_pricing` WHERE  ('" . $qty . "' between `min` AND `max` or  `min` = '" . $qty . "') and listing_id=" . $listID);
    foreach ($result as $data) {
        $pricingData['price'] = $data->price;
        $pricingData['gtype'] = $data->price_group_type;
    }
    echo json_encode($pricingData);
}

function random_string($length) {
    $key = '';
    $keys = array_merge(range(0, 9), range('a', 'z'));

    for ($i = 0; $i < $length; $i++) {
        $key .= $keys[array_rand($keys)];
    }

    return $key;
}

/* Show Booked deals to provider with details */

function bookings_details() {
    global $user;
    if(!$user->uid){
        $dest = drupal_get_destination();
        $_SESSION['destination']  = $dest["destination"];
        drupal_goto('login',$dest);
    }
    $bookingsCount = 0;
    $title = $type = $booking_status = $search_filter = "";
    if (isset($_GET['title']) && $_GET['title'] != "") {
        $title = trim(check_plain($_GET['title']));
    }
    if (isset($_GET['type']) && $_GET['type'] != "") {
        $type = trim(check_plain($_GET['type']));
    }
    if (isset($_GET['booking_status']) && $_GET['booking_status'] != "") {
        $booking_status = trim(check_plain($_GET['booking_status']));
    }
    if (isset($_GET['search_filter']) && $_GET['search_filter'] != "") {
        $search_filter = trim(check_plain($_GET['search_filter']));
    }
    $bookings = getAllBookings($user->uid, $title, $type, $booking_status, $search_filter);
    $bookingsCount = getAllBookingsCount($user->uid, $title, $type, $booking_status, $search_filter);
    $searchForm = drupal_get_form('search_bookings_details_form');
    $output = '';
    $bookings = pager_array_splice($bookings, 10);
    $output .= theme('pager', array('quantity' => 10));
    return theme('bookings_details', array('bookings' => $bookings, 'bookingsCount' => $bookingsCount, 'searchForm' => $searchForm, 'pagination' => $output));
}

function getAllBookings($userId = null, $title = null, $type = null, $booking_status, $search_filter) {
    $data = array();
    $today = date('Y-m-d');
    $query = db_select('gbl_experience_list', 'gel');
    $query->join('gbl_booking', 'gb', 'gb.lid = gel.eid');
    $query->join('gbl_users_meta', 'gum', 'gum.uid = gb.uid');
    $query->fields('gel', array('eid', 'list_type', 'title', 'short_description', 'visibility_status','address1','city','state','country','zipcode'));
    $query->fields('gb');
    $query->fields('gum',array('name','mail','first_name','last_name','mobile','city','about_yourself','language','occupation','cover_pic','confirm_status'));
    $query->condition('gel.uid', $userId);
    if(($type=="") && ($search_filter == "") && ($booking_status == "") && ($title == "")){
        $query->condition('gb.arrive_at_date',$today, ">=");
    }
    if ($title != "") {
        $title1 = $title2 = "";
        /*         * ************************************ */
        $pos = strpos($title, " ");
        if ($pos > 0) {
            $titleArr = explode(" ", $title);
            $title = array_filter($titleArr);
            $titleResult = array_values($title);
            $title1 = $titleResult[0];
            $title2 = $titleResult[1];
            $exTitle = implode(" ", $title);
        } else {
            $exTitle = $title1 = $title;
            $title2 = $title;
        }

        /*         * ************************************** */

        $query->condition(db_or()->condition('gel.title', "%" . db_like($exTitle) . "%", 'LIKE')->condition('name', "%$title1%", 'like')->condition('name', "%$title2%", 'like')->condition('mail', "%$exTitle%", 'like')->condition('first_name', "%$title1%", 'like')->condition('last_name', "%$title2%", 'like'));
    }
    if ($search_filter != "") {
        $query->condition('gel.eid', $search_filter, '=');
    }

    if ($type != "") {
        $query->condition('list_type', "%$type%", 'like');
    }
    if(($booking_status !='past_reservation') && ($booking_status != 'upcoming_reservation')) {
        if ($booking_status != "") {
            $query->condition('booking_status', "%$booking_status%", 'like');
        }
    } 
     if($booking_status == 'past_reservation'){

        $query->where('gb.arrive_at_date < CURDATE()');

    }    
    if($booking_status == 'upcoming_reservation'){

        $query->where('gb.arrive_at_date >= CURDATE()');
    }      
    $query->orderBy("gb.created", "DESC");

    $result = $query->execute();
    while ($record = $result->fetchAssoc()) {
        $data[] = $record;
    }
    return $data;
}

function getAllBookingsCount($userId = null, $title = null, $type = null, $booking_status = null, $search_filter = null) {
    $data = array();
     $today = date('Y-m-d');
    $query = db_select('gbl_experience_list', 'gel');
    $query->join('gbl_booking', 'gb', 'gb.lid = gel.eid');
    $query->join('gbl_users_meta', 'gum', 'gum.uid = gb.uid');
    $query->fields('gel', array('eid', 'list_type', 'title', 'short_description', 'visibility_status'));
    $query->fields('gb');
    $query->fields('gum');
    $query->condition('gel.uid', $userId);
    if(($type=="") && ($search_filter == "") && ($booking_status == "") && ($title == "")){
        $query->condition('gb.arrive_at_date',$today, ">=");
    }    
    if ($title != "") {
        $title1 = $title2 = "";
        /*         * ************************************ */
        $pos = strpos($title, " ");
        if ($pos > 0) {
            $titleArr = explode(" ", $title);
            $title = array_filter($titleArr);
            $titleResult = array_values($title);
            $title1 = $titleResult[0];
            $title2 = $titleResult[1];
            $exTitle = implode(" ", $title);
        } else {
            $exTitle = $title1 = $title;
            $title2 = $title;
        }

        /*         * ************************************** */

        $query->condition(db_or()->condition('gel.title', "%" . db_like($exTitle) . "%", 'LIKE')->condition('name', "%$title1%", 'like')->condition('name', "%$title2%", 'like')->condition('mail', "%$exTitle%", 'like')->condition('first_name', "%$title1%", 'like')->condition('last_name', "%$title2%", 'like'));
    }
    if ($search_filter != "") {
        $query->condition('gel.eid', $search_filter, '=');
    }

    if ($type != "") {
        $query->condition('list_type', "%$type%", 'like');
    }
    if(($booking_status != 'past_reservation') && ($booking_status != 'upcoming_reservation')){
        if ($booking_status != "") {
            $query->condition('booking_status', "%$booking_status%", 'like');
        }
    }  
     if($booking_status == 'past_reservation'){
          //echo "test";die;
          $query->where('gb.arrive_at_date < CURDATE()');
        
    }
    if($booking_status =='upcoming_reservation'){
         $query->where('gb.arrive_at_date >= CURDATE()');
         
    }    
    $result = $query->execute();
    return $result->rowCount();
}


function search_bookings_details_form($form, &$form_state) {
    global $user;
    $form = array();
    $bookings = array();
    $bookings = getAllListingsByuserId($user->uid);
    $id = $_REQUEST['search_filter'];
    $deal_title = getexperiencedealtitle($id);
    $deal_title_op =getAllAjaxListingsBylistTypeDefault();
    
    $form['#method'] = 'get';
    $form['search-class'] = array(
        '#prefix' => '<div class="listing-search"> <div class="listing-search_design">'
    );
    //echo "<pre>";Print_r($_POST);
    $form['type'] = array(
        '#type' => 'select',
        '#options' => array('' => 'All', 'experience' => 'Experience listing', 'vacation' => 'Vacation Rental', 'hotel' => 'Hotels'),
        '#default_value' => isset($_GET['type']) ? $_GET['type'] : '',
        '#attributes' => array('class' => array('form-control')),
        '#prefix' => '<label> '.t('Filter By List Type').'</label>',
         '#suffix'=>''
    );
       $form['search-class1'] = array(
        '#prefix' => '</div> <div class="listing-search_design">'
    );
    $form['search_filter'] = array(
        '#type' => 'select',
        '#options' => $deal_title_op,
        '#attributes' => array('class' => array('form-control')),
        '#default_value' => isset($deal_title) ? $deal_title : '',
        '#prefix' => '<label> '.t('Search By Deal Title').'</label>',
        '#suffix'=>''
        
    );
    
    $form['search-class2'] = array(
        '#prefix' => '</div> <div class="listing-search_design">'
    );
    
    $form['booking_status'] = array(
      
        '#type' => 'select',
        '#options' => array('' => 'All', 'pending' => 'Pending', 'completed' => 'Completed', 'refund_request' => 'Refund Requested', 'refunded' => 'Refunded', 'booked' => 'Booked','past_reservation'=>'Past Reservation','upcoming_reservation'=>'Upcoming Reservation'),
        '#default_value' => isset($_GET['booking_status']) ? $_GET['booking_status'] : '',
        '#attributes' => array('class' => array('form-control')),
         '#prefix' => '<label> '.t('Filter By Booking Status').'</label>',
         '#suffix'=>''
    );
    $form['search-class3'] = array(
        '#prefix' => '</div> <div class="listing-search_design">'
    );
    $form['title'] = array(
        '#type' => 'textfield',
        '#size' => '30',
        '#default_value' => isset($_GET['title']) ? $_GET['title'] : '',
        '#attributes' => array('placeholder' => 'Search Customer by name,email', 'class' => array('form-control')),
    );
    $form['search-class4'] = array(
        '#prefix' => '</div> <div class="listing-search_design">'
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Search'),
        '#suffix' => '</div>'
    );
    $form['search-class5'] = array(
        '#prefix' => '</div>'
    );
    return $form;
}

function getExperienceCategoryIdByName($type = '') {
    $types = explode(', ', $type);
    $query = db_select('gbl_experience_type', 't')
            ->fields('t', array('id'))
            ->condition('experience_type', $types, 'IN')
            ->execute();
    $data = $query->fetchAssoc();
    return $data;
}

function update_views_count() {
    $listID = $_POST['listingID'];
    $query = db_select('gbl_listing_points_data', 'p')
            ->fields('p', array('total_views'))
            ->condition('listing_id', $listID)
            ->execute();
    $data = $query->fetchAssoc();
    if (!empty($data)) {
        $nid = db_update('gbl_listing_points_data')
                ->fields(array(
                    'listing_id' => $listID,
                    'total_views' => ($data['total_views'] + 1),
                ))
                ->condition('listing_id', $listID)
                ->execute();
        echo $nid;
        die;
    } else {
        $nid = db_insert('gbl_listing_points_data')
                ->fields(array(
                    'listing_id' => $listID,
                    'total_views' => 1,
                    'total_reviews' => 0,
                    'average_ratings' => 0,
                ))
                ->execute();
        echo $nid;
        die;
    }
}

function getMostlyViewedListings() {
    $pageSize = 3;
    $str = $uid = '';
    $listings = array();
    global $base_url;
    $filteredListing = array();
    $query = db_select('gbl_experience_list', 'el');
    $query->join('gbl_pricing', 'pr', 'el.eid = pr.listing_id');
    $query->leftJoin('gbl_experience_category', 'ec', 'ec.cid = el.experience_category');
    $query->join('gbl_experience_type', 'et', 'et.id = el.experience_type');
    $query->leftJoin('gbl_scheduling_sessions', 'sh', 'el.eid = sh.listing_id');
    $query->leftJoin('gbl_listing_points_data', 'p', 'el.eid = p.listing_id');
    if ($uid != "" && $type == 'my_wishlist') {
        $query->join('gbl_my_wishlist', 'w', 'el.eid = w.listing_id');
    }
    $query->fields('el', array('eid', 'title', 'latitude', 'longitude', 'city', 'state', 'country', 'average_ratings', 'uid'));
    $query->fields('pr', array('quantity_max', 'price'))
            ->fields('ec', array('category_name'))
            ->fields('et', array('experience_type'))
            ->fields('sh', array('startDate', 'endDate'));

    $query->groupBy('el.eid');

    $query->orderBy('p.total_views', 'DESC');
    $or = db_or()->condition('sh.startDate', date('Y-m-d'), '>=')->isNull('sh.startDate');
    $query->condition($or);
    $query = $query->range(0, $pageSize);
    $result = $query->execute();

    while ($record = $result->fetchAssoc()) {
        $listings[] = $record;
    }
    return $listings;
}

function getMinimumListingPrice() {
    $query = db_select('gbl_pricing', 'p')
            ->fields('p', array('price'))
            ->orderBy('price')
            ->range(0, 1)
            ->execute();
    return $query->fetchAssoc();
}

function getMaximumListingPrice() {
    $query = db_select('gbl_pricing', 'p')
            ->fields('p', array('price'))
            ->orderBy('price', 'DESC')
            ->range(0, 1)
            ->execute();
    return $query->fetchAssoc();
}

function getOffersAndDiscountsData($listID,$offerType=null) {
    
    $offers = array();
    $query = db_select('gbl_offers_and_discount', 'o');
    $query->fields('o');
    $query->condition('listing_id', $listID);
    if($offerType){
        $query->condition('offer_type', $offerType);
    }
    $query->execute();
    $result = $query->execute();
    while ($record = $result->fetchAssoc()) {
        $offers[] = $record;
    }
    return $offers;
}
function getOffersAndDiscountsDataBylist($listID) {
    
    $offers = array();
    $query = db_select('gbl_offers_and_discount', 'o');
    $query->fields('o');
    $query->condition('listing_id', $listID);
    $query->execute();
    $result = $query->execute();
    while ($record = $result->fetchAssoc()) {
        $offers[] = $record;
    }
    return $offers;
}

/* * ******************************************************************************************** */

function transactions_history() {
    
    $type = $transaction_status = $title = "";
    global $user;
    $bookingsCount = 0;
    $bookings = array();
    if (isset($_GET['title']) && $_GET['title'] != "") {
        $title = trim(check_plain($_GET['title']));
    }
    if (isset($_GET['type']) && $_GET['type'] != "") {
        $type = trim(check_plain($_GET['type']));
    }
    if (isset($_GET['booking_status']) && $_GET['booking_status'] != "") {
        $transaction_status = trim(check_plain($_GET['booking_status']));
    }

    $bookings = getAllBookingsTransactions($user->uid, $title, $type, $transaction_status);
    $bookingsCount = getAllBookingsTransactionsCount($user->uid, $title, $type, $transaction_status);
    $searchForm = drupal_get_form('search_transactions_form');

    return theme('transactions_history', array('bookings' => $bookings, 'bookingsCount' => $bookingsCount, 'searchForm' => $searchForm));
}

//get all transactions history by user added deals
function getAllBookingsTransactions($userId = null, $title = null, $type = null, $transaction_status = null) {
    $bookings = array();
    $query = db_select('gbl_experience_list', 'gel');
    $query->join('gbl_booking', 'gb', 'gb.lid = gel.eid');
    $query->join('gbl_payment', 'gp', 'gp.bid = gb.id');
    $query->join('gbl_users_meta', 'gum', 'gum.uid = gb.uid');
    $query->fields('gel', array('title'));
    $query->fields('gb', array('id', 'lid', 'booking_id','grand_total'));
  //  $query->fields('gel', array('title'));
    $query->fields('gp');
    $query->fields('gum');
    if ($type != "") {
        $query->condition('gel.eid', $type, '=');
    }
    if ($transaction_status != "") {
        $query->condition('gp.payment_status', "%$transaction_status%", 'like');
    }
    if ($title != "") {
        $pos = strpos($title, " ");
        if ($pos > 0) {
            $titleArr = explode(" ", $title);
            $title = array_filter($titleArr);
            $titleResult = array_values($title);
            $title1 = $titleResult[0];
            $title2 = $titleResult[1];
        } else {
            $title1 = $title;
            $title2 = $title;
        }
      $query->condition(db_or()->condition('gb.booking_id', "%$title%", 'like')->condition('name', "%$title%", 'like')->condition('mail', "%$title%", 'like')->condition('first_name', "%$title1%", 'like')->condition('last_name', "%$title2%", 'like'));
    }
    $query->condition('gel.uid', $userId, '=');
    $query->orderBy('gp.payment_at', 'DESC');

    $result = $query->execute();
    while ($data = $result->fetchAssoc()) {
        $bookings[] = $data;
    }
    

    return $bookings;
}

function getAllBookingsTransactionsHistory() {
    global $user;
    $bookings = array();
    $query = db_select('gbl_booking', 'gb');
    $query->innerJoin('gbl_payment', 'gp', 'gp.bid = gb.id');
    $query->fields('gb', array('id', 'lid', 'booking_id','grand_total'));
    $query->fields('gp');
    $query->condition('gb.uid', $user->uid, '=');
    $query->orderBy('gp.payment_at', 'DESC');
    //print $query;exit;
    $result = $query->execute();
    while ($data = $result->fetchAssoc()) {
        $bookings[] = $data;
    }
    
    return $bookings;
}

function getAllBookingsTransactionsCount($userId = null, $title = null, $type = null, $transaction_status = null) {
    $bookings = array();
    $query = db_select('gbl_experience_list', 'gel');
    $query->join('gbl_booking', 'gb', 'gb.lid = gel.eid');
    $query->join('gbl_payment', 'gp', 'gp.bid = gb.id');
    $query->join('gbl_users_meta', 'gum', 'gum.uid = gb.uid');
    $query->fields('gel', array('title'));
    $query->fields('gb', array('id', 'lid', 'booking_id'));
    $query->fields('gel', array('title'));
    $query->fields('gp');
    $query->fields('gum');
    $query->condition('gel.uid', $userId, '=');
    if ($type != "") {
        $query->condition('gel.eid', $type, '=');
    }
    if ($transaction_status != "") {
        $query->condition('gp.payment_status', "%$transaction_status%", 'like');
    }
    if ($title != "") {
        $pos = strpos($title, " ");
        if ($pos > 0) {
            $titleArr = explode(" ", $title);
            $title = array_filter($titleArr);
            $titleResult = array_values($title);
            $title1 = $titleResult[0];
            $title2 = $titleResult[1];
        } else {
            $title1 = $title;
            $title2 = $title;
        }
        /*         * ************************************** */

        $query->condition(db_or()->condition('gb.booking_id', "%$title%", 'like')->condition('name', "%$title%", 'like')->condition('mail', "%$title%", 'like')->condition('first_name', "%$title1%", 'like')->condition('last_name', "%$title2%", 'like'));
    }
    $query->orderBy('gp.payment_at', 'DESC');
    $result = $query->execute();
    return $result->rowCount();
}


function search_transactions_form($form, &$form_state) {
    global $user;
    $options = getAllListingsByuserId($user->uid);

    $form = array();
    $form['#method'] = 'get';
    $form['search-class'] = array(
        '#prefix' => '<div class="listing-search"> <div class="Wallet_form">'
    );
    
    $form['type'] = array(
        
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => isset($_GET['type']) ? $_GET['type'] : '',
        '#attributes' => array('onchange' => 'this.form.submit();', 'class' => array('form-control')),
        '#prefix'=>'<label>'.t('Filter By Deal title').'</label><div class="selectbox">',
        '#suffix'=>'</div>'
    );
    $form['search-class-end-first-select'] = array(
        '#suffix' => '</div><div class="Wallet_form">'
    );

    $form['booking_status'] = array(
        
        '#type' => 'select',
        '#options' => array('' => 'All', 'pending' => 'Pending', 'completed' => 'Completed', 'cancelled' => 'Cancelled', 'refunded' => 'Refunded'),
        '#default_value' => isset($_GET['booking_status']) ? $_GET['booking_status'] : '',
        '#attributes' => array('class' => array('form-control')),
        '#prefix'=>'<label>'.t('Filter By Transactions Status').'</label><div class="selectbox">',
        '#suffix'=>'</div>'
    );
    $form['search-class-end-second-select'] = array(
        '#suffix' => '</div><div class="Wallet_form">'
    );
    $form['title'] = array(
        /* '#title' => t('Search'), */
        '#type' => 'textfield',
        /* '#value'=> 'Search', */
        '#size' => '30',
        '#default_value' => isset($_GET['title']) ? $_GET['title'] : '',
        '#attributes' => array('placeholder' => t('Search Transactions by name,email'), 'class' => array('form-control')),
    );
    $form['search-class-end-first-textfield'] = array(
        '#suffix' => '</div><div class="Wallet_form">'
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Search'),
        '#suffix' => '</div></div>'
    );
    return $form;
}

//get all listings added by userId array of id and title
function getAllListingsByuserId($userId) {
    $data = array();
    $data[''] = t('Select Deal Title');
    $query = db_select('gbl_experience_list', 'gel')
            ->fields('gel', array('title', 'eid'))
            ->condition('uid', $userId);
    $result = $query->execute();
    while ($res = $result->fetchAssoc()) {

        $data[$res['eid']] = $res['title'];
    }

    return $data;
}

function bookings_history_by_traveller() {
    
    global $user;
   if(!$user->uid){

        $dest = drupal_get_destination();
        $_SESSION['destination']  = $dest["destination"];
        drupal_goto('login',$dest);
    }
    $title = $booking_status = $search_filter = "";
    $bookingsCount = 0;
    $cancelForm = drupal_get_form('cancel_request_form');
    //echo drupal_render($cancelForm);exit;
    if (isset($_GET['title']) && $_GET['title'] != "") {
        $title = trim(check_plain($_GET['title']));
    }
    if (isset($_GET['booking_status']) && $_GET['booking_status'] != "") {
        $booking_status = trim(check_plain($_GET['booking_status']));
    }
    if (isset($_GET['search_filter']) && $_GET['search_filter'] != "") {
        $search_filter = trim(check_plain($_GET['search_filter']));
    }
    $bookings = getAllBookedListingHistory($user->uid, $title, $booking_status, $search_filter);
    $bookingsCount = getAllBookedListingHistoryCount($user->uid, $title, $booking_status, $search_filter);
    $output = '';
    $bookings = pager_array_splice($bookings, 10);
    $output .= theme('pager', array('quantity' => 10));
    $searchForm = drupal_get_form('search_bookings_traveller_form');
    
    return theme('booking_history', array('cancelForm' => $cancelForm, 'bookings' => $bookings, 'bookingsCount' => $bookingsCount, 'searchForm' => $searchForm, 'pagination' => $output));
}

function getAllBookedListingHistory($userId = null, $title = null, $booking_status = null, $search_filter = null) {
    $booking = array();
    $today = date('Y-m-d');
    $query = db_select('gbl_booking', 'gb');
    $query->join('gbl_experience_list', 'gel', 'gb.lid=gel.eid');
    $query->fields('gb');
    $query->fields('gel', array('title','uid','address1','city','state','country','zipcode'));
    $query->condition('gb.uid', $userId, '=');
    if(($title == "") && ($booking_status == "") && ($search_filter=="")){
        $query->condition('gb.arrive_at_date',$today,'>=');
    }
    if ($title != "") {
        $query->condition('gel.title', '%' . db_like($title) . '%', 'like');
    }
     if(($booking_status !='my_past_trips') && ($booking_status != 'upcoming_trips')){  
        if ($booking_status != "") {

            $query->condition('booking_status', "%$booking_status%", 'like');
        }
    }
    if($booking_status == 'my_past_trips'){

        $query->where('gb.arrive_at_date < CURDATE()');

    }
    if($booking_status == 'upcoming_trips'){
        $query->where('gb.arrive_at_date > CURDATE()');

    }    
    if ($search_filter != "") {
        $query->where("DATE(FROM_UNIXTIME(gb.created)) = :search_filter", array('search_filter' => $search_filter));
    }
    $query->orderBy('gb.created', 'DESC');
    $result = $query->execute();
   
    while ($data = $result->fetchAssoc()) {
        $booking[] = $data;
    }

    return $booking;
}

function getAllBookedListingHistoryCount($userId = null, $title = null, $booking_status = null, $search_filter = null) {
    $today = date('Y-m-d');
    $query = db_select('gbl_booking', 'gb');
    $query->join('gbl_experience_list', 'gel', 'gb.lid=gel.eid');
    $query->fields('gb');
    $query->fields('gel', array('title'));
    $query->condition('gb.uid', $userId, '=');
    if(($title == "") && ($booking_status == "") && ($search_filter=="")){
        $query->condition('gb.arrive_at_date',$today,'>=');
    }
    if ($title != "") {
        $query->condition("gel.title", "%".db_like($title)."%", "like");
    }
    if(($booking_status !='my_past_trips') && ($booking_status != 'upcoming_trips')){   

        if ($booking_status != "") {

            $query->condition('booking_status', "%$booking_status%", 'like');
        }
    } 
    if($booking_status == 'my_past_trips'){
        $query->where('gb.arrive_at_date < CURDATE()');

    }
    if($booking_status == 'upcoming_trips'){

        $query->where('gb.arrive_at_date >= CURDATE()');

    }   
    if ($search_filter != "") {
        $query->where("DATE(FROM_UNIXTIME(gb.created)) = :search_filter", array('search_filter' => $search_filter));
    }
    $result = $query->execute();

    return $result->rowCount();
}

function search_bookings_traveller_form($form, &$form_state) {
    $form = array();
    $form['#method'] = 'get';
    $form['search-class'] = array(
        '#prefix' => '<div class="listing-search"> <div class="Trips_form_design">'
    );
    

    $form['booking_status'] = array(
        '#type' => 'select',
        '#options' => array('' => 'All', 'pending' => 'Pending', 'completed' => 'Completed', 'refund_request' => 'Refund Requested', 'refunded' => 'Refunded', 'booked' => 'Booked','my_past_trips'=>'My Past Trips',
            'upcoming_trips'=>'Upcoming Trips'),
        '#default_value' => isset($_GET['booking_status']) ? $_GET['booking_status'] : '',
        '#attributes' => array('class' => array('select_box')),
        '#prefix' => '<label> Filter By Booking Status </label>',
        '#suffix' => ''
    );
    $form['search-class1'] = array(
        '#suffix' => '</div> <div class="Trips_form_design">'
    );
    
    $form['search_filter'] = array(
        '#title' => t('Search By Booking date'),
        '#type' => 'textfield',
        '#default_value' => isset($_GET['search_filter']) ? $_GET['search_filter'] : '',
        '#attributes' => array('class' => array('')),
        
    );
    
    $form['search-class2'] = array(
        '#suffix' => '</div> <div class="Trips_form_design">'
    );
    
    $form['title'] = array(
        /* '#title' => t('Search'), */
        '#type' => 'textfield',
        /* '#value'=> 'Search', */
        '#size' => '30',
        '#default_value' => isset($_GET['title']) ? $_GET['title'] : '',
        '#attributes' => array('placeholder' => 'Search Deal by name', 'class' => array('form-control')),
    );
    
    $form['search-class3'] = array(
        '#suffix' => '</div> <div class="Trips_form_design">'
    );
    
    
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Search'),
        '#suffix' => '</div>'
    );
    
    $form['search-class4'] = array(
        '#suffix' => '</div>'
    );
    
    return $form;
}

function cancel_request_form($form, &$form_state) {
    $form = array();
    $form["bid"] = array(
        '#type' => 'hidden',
        '#default_value' => '',
        '#attributes' => array('class' => array('bid'))
    );
    $form["lid"] = array(
        '#type' => 'hidden',
        '#default_value' => '',
        '#attributes' => array('class' => array('lid'))
    );
    $form['cancel_request'] = array(
        '#title' => t('Reason for cancellation'),
        '#type' => 'textarea',
        '#attributes' => array('class' => array('form-control'), 'placeholder' => t('I got better deal')),
          
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Proceed'),
    );
    return $form;
}

function cancel_request_form_submit($form, &$form_state) {
    global $user;
    $booking = array();
    $query12 = db_select('gbl_booking', 'gb')
            ->fields('gb')
            ->condition('id', check_plain($form_state['values']['bid'], '='));
    $result12 = $query12->execute();
    $booking = $result12->fetchAssoc();

    $comm = getCommisionByuserForBooking($form_state['values']['lid']);
    if ($comm['commission'] != "") {
        $commission = $comm['commission'];
    } else if (variable_get('commission') != "") {
        $commission = variable_get('commission');
    } else {
        $commission = "0.0";
    }
    $Currentdatetime = date("Y-m-d H:i:s");
    $arrivalDate = date("Y-m-d", strtotime($booking['arrive_at_date']));
    $arrivalTime = $booking['arrive_at_time'];
    $pos = strpos($arrivalTime, "-");
    if ($pos > 0) {
        $arrivalTime = substr_replace($arrivalTime, '', $pos, -2);
    }
    $time_in_24_hour_format = date("H:i", strtotime($arrivalTime));
    $arrivaldatetime = date('Y-m-d H:i:s', strtotime($arrivalDate . "" . $time_in_24_hour_format));
    $refundAmount = ((100 - $commission) * $booking['grand_total']) / 100;
    $rulesDetail = getRulesDetails($form_state['values']['lid']);
    $rulesDetail = unserialize($rulesDetail["value1"]);
    $policyType = $rulesDetail['cancellation_policies_type'];
    switch ($policyType) {
        case 'Relaxed':
            $expiredDate = date('Y-m-d H:i:s', strtotime($arrivaldatetime . ' - 14 day'));

            if (strtotime($expiredDate) >= strtotime($Currentdatetime)) {
                $refundpercent = 100;
                $totalRefundAmount = $refundAmount;
            }
            break;
        case 'Flexible':
            $expiredDate = date('Y-m-d H:i:s', strtotime($arrivaldatetime . ' - 14 day'));
            $expiredDate_4Weeks = date('Y-m-d H:i:s', strtotime($arrivaldatetime . ' - 28 day'));
            if (strtotime($expiredDate) >= strtotime($Currentdatetime)) {
                $refundpercent = 25;
                $totalRefundAmount = ($refundpercent * $refundAmount) / 100;
            } else if (strtotime($expiredDate_4Weeks) >= strtotime($Currentdatetime)) {
                $refundpercent = 50;
                $totalRefundAmount = ($refundpercent * $refundAmount) / 100;
            }
            break;
        case 'Moderate':
            $expiredDate_4Weeks = date('Y-m-d H:i:s', strtotime($arrivaldatetime . ' - 28 day'));
            $refundpercent = 50;
            if (strtotime($expiredDate_4Weeks) >= strtotime($Currentdatetime)) {
                $totalRefundAmount = ($refundpercent * $refundAmount) / 100;
            }
            break;
        case 'Strict':
            $expiredDate_8Weeks = date('Y-m-d H:i:s', strtotime($arrivaldatetime . ' - 56 day'));
            if (strtotime($expiredDate_8Weeks) >= strtotime($Currentdatetime)) {
                $refundpercent = 50;
                $totalRefundAmount = (50 * $refundAmount) / 100;
            }
            break;
        case 'Super-Strict':
            $totalRefundAmount = 0;
            $refundpercent = 0;

            break;
        case 'Custom':
            if (($rulesDetail['amount_week_select'] == 'weeks') || ($rulesDetail['amount_week_select'] == 'months')) {
                if ($rulesDetail['amount_week_select'] == 'weeks') {
                    $weeksCount = $rulesDetail['amount_week_rental'] * 7;
                    $expiredDate = date('Y-m-d H:i:s', strtotime($arrivaldatetime . ' - ' . $weeksCount . ' day'));
                } else if ($rulesDetail['amount_week_select'] == 'months') {
                    $expiredDate = date('Y-m-d H:i:s', strtotime($arrivaldatetime . ' - ' . $rulesDetail['amount_week_rental'] . ' month'));
                }
                if (strtotime($expiredDate) >= strtotime($Currentdatetime)) {
                    $refundpercent = $rulesDetail['amount_week'];
                    $totalRefundAmount = ($refundpercent * $refundAmount) / 100;
                }
            } else if ($rulesDetail['amount_day_select'] == 'days') {
                $expiredDate = date('Y-m-d H:i:s', strtotime($arrivaldatetime . ' - ' . $rulesDetail['amount_day_rental'] . ' month'));
                if (strtotime($expiredDate) >= strtotime($Currentdatetime)) {
                    $refundpercent = $rulesDetail['amount_day'];
                    $totalRefundAmount = ($refundpercent * $refundAmount) / 100;
                }
            }
            break;
        default:
            $policyinfo = "";
            $totalRefundAmount = 0;
            break;
    }
    $query = db_update('gbl_booking')
            ->fields(array('booking_status' => 'refund_request'))
            ->condition('id', trim(check_plain($form_state['values']['bid'])))
            ->condition('lid', trim(check_plain($form_state['values']['lid'])))
            ->condition('uid', $user->uid, '=');
    $result = $query->execute();
    /*     * ************************Insert in refund table****************************** */
    $query1 = db_insert('gbl_refunds')
            ->fields(array('refund_msg' => trim(check_plain($form_state["values"]["cancel_request"])),'uid' => $user->uid, 'bid' => trim(check_plain($form_state['values']['bid'])), 'lid' => trim(check_plain($form_state['values']['lid'])), 'refund_status' => 'request', 'refund_amount' => $totalRefundAmount, 'refund_request_on' => $Currentdatetime));
    $result1 = $query1->execute();
    
        $query_credits = db_select('gbl_credit_user', 'cu');
            $query_credits->fields('cu',array('credits_assigned'))->condition('cu.uid', $user->uid);
            $result_credits = $query_credits->execute();
            $res_credits = $result_credits->fetchAll(PDO::FETCH_ASSOC);
            if(!empty($res_credits) && is_array($res_credits)){
                $credits_assigned=$res_credits[0]['credits_assigned'];
                //echo "<pre>";Print_r($res_credits[0]['credits_assigned']);exit;
                $booking_credits=50;
                $creditData = db_update('gbl_credit_user')
                        ->fields(array('credits_assigned' => ($credits_assigned - $booking_credits)))
                        ->condition('uid', $user->uid)
                        ->execute();
            }
    /*********************************************************************************** */
    if ($result1) {
//mail send

        drupal_set_message(t('we have got your booking cancellation request.We will process it shortly'));
        drupal_goto('mytrips');
    }
}

/* * ************************************************************************************* */

function getTotalAmountEarnedByUser($userId) {
    $query = db_select('gbl_experience_list', 'gel');
    $query->join('gbl_users_meta', 'gum', 'gum.uid=gel.uid');
    $query->join('gbl_booking', 'gb', 'gb.lid=gel.eid');
    $query->fields('gum', array('uid'));
    $query->condition('gum.uid', $userId);
    $query->addExpression('SUM(grand_total)', 'grand_profit');
    $query->addExpression('SUM(refund_amount)', 'refund_total');
    $query->addExpression('SUM(trans_fees)', 'trans_fees_total');
    $result = $query->execute();
    return $result->fetchAssoc();
}

function income_details() {
    $listings = manage_listing_data();
    $output = '';
    $listings = pager_array_splice($listings, 10);
    $output .= theme('pager', array('quantity' => 10));
    return theme('income_details', array('listings' => $listings, 'pagination' => $output));
}

//get all listing added by user request by ajax
function getAllAjaxListingsBylistType($listType = null) {
    global $user;
    $listType = $_POST['typeId'];
    $data = array();
    $query = db_select('gbl_experience_list', 'gel')
            ->fields('gel', array('title', 'eid'));
    if ($listType != "") {
        $query->condition('list_type', $listType, '=');
    }
    $query->condition('uid', $user->uid);
    $result = $query->execute();
    while ($res = $result->fetchAssoc()) {
        $data[$res['eid']] = $res['title'];
    }

//return $data; 

    drupal_json_output($data);
    exit();
}
function getAllAjaxListingsBylistTypeDefault($listType = null) {
    global $user;
    $listType = $_POST['typeId'];
    $data = array();
    $query = db_select('gbl_experience_list', 'gel')
            ->fields('gel', array('title', 'eid'));
    if ($listType != "") {
        $query->condition('list_type', $listType, '=');
    }
    $query->condition('uid', $user->uid);
    $result = $query->execute();
    $data[0]='All';
    while ($res = $result->fetchAssoc()) {
        $data[$res['eid']] = $res['title'];
    }

        return $data;
}

/* * *********************Get all Listing Added By User ******************************************** */

function getAllListingByuser($userId) {
    $listings = array();
    $query = db_select('gbl_experience_list', 'el');
//$query->join('gbl_users_meta', 'gum', 'gum.uid = el.uid');
    $query->leftJoin('gbl_scheduling_sessions', 'sh', 'el.eid = sh.listing_id');
    $or = db_or()->condition('sh.startDate', date('Y-m-d'), '>=')->isNull('sh.startDate');
    $query->condition($or);
    $query->condition('el.uid', $userId, '=');
    $query->fields('el', array('eid', 'title', 'city', 'state', 'country', 'average_ratings', 'uid', 'short_description'));
    $query->condition('el.visibility_status', 1);
    $query->condition('el.list_status', 1);
    $query->range(0, 8);
    $query->orderBy('created', 'DESC');
    $result = $query->execute();
    while ($data = $result->fetchAssoc()) {
        $listings[] = $data;
    }
    return $listings;
}

/* * ******************************************************************************** */

// function search_listings_form($form, &$form_state) {
//     $form = array();
//     $form['keys'] = array(
//         '#type' => 'textfield',
//         '#size' => 50,
//         '#prefix' => '<div class="col-xs-12 col-sm-9 col-md-9">',
//         '#attributes' => array(//'onblur' => "if(this.value == '') { this.value = 'Where are you going ?'; }",
//             //'onfocus'=>"if(this.value  == 'Where are you going ?') { this.value = ''; }",
//             'class' => array('form-control','required'), 'placeholder' => 'Where are you going ?',
//             'required' => 'required'),
//         //'#required' => TRUE,
//         '#suffix' => '</div>'
//     );
//     $form['submit'] = array(
//         '#type' => 'submit',
//      '#attributes' => array(
//          'data-loading-text'=>array('Loading...'),
//          'class' => array('btn'),
//      ),
//         '#value' => t('Search'),
//         '#prefix' => '<div class="col-xs-12 col-sm-3 col-md-3">',
//         '#suffix' => '</div>'
//     );
//     return $form;
// }
function search_listings_form($form, &$form_state){
     $form = array();
      $form['html_start'] = array(
        '#prefix'=>'<div class="homesearch">
                    <div class="col-md-12 col-sm-12 col-xs-12 searchcol">', 

        );
      $form['keys'] = array(
        '#type' => 'textfield',
        '#size' => 50,
        '#prefix' => '<div class="col-md-6 col-sm-5 col-xs-12"><div class=row>',
        '#attributes' => array( //'onblur' => "if(this.value == '') { this.value = 'Where are you going ?'; }",
            //'onfocus'=>"if(this.value  == 'Where are you going ?') { this.value = ''; }",
            'class' => array('searchinput'), 'placeholder' => 'Enter your destination ?',
            'onclick'=>'hometowngeocode();',
            //'required' => 'required'
            ),
        //'#required' => TRUE,

        '#suffix' => '</div></div>'
    );
    $form['type'] = array(
    '#type' => 'select',
    '#prefix'=>'<div class="col-md-4 col-sm-4 col-xs-12"><div class=row id="custom_jquery_select">',
    '#attributes' => array(
        'class' => array('select_box'),
        //'required' => 'required',
    ),
    //'#default_value' => isset($values['extra_price_key']) ? $values['extra_price_key'] : NULL,
    '#options' => array(''=>'Select Type','Experience'=>'Experience','Gloobers'=>'Other gloobers'),
    '#suffix' => '</div></div>'
    ); 
    $form['submit'] = array(
        '#type' => 'submit',
        '#attributes' => array(
            'data-loading-text'=>array('Loading...'),
            'class' => array('search'),
            'id'=>'search_listings_submit',
        ),
        '#value' => t('Search'),
        '#prefix' => '<div class="col-md-2 col-sm-3 col-xs-12 submitblock">',
        '#suffix' => '</div>'
    );

      $form['html_end'] = array(
        '#suffix'=>'</div></div>', 

        );


    return $form;
}


// function search_listings_form_submit($form, &$form_state) {
//     drupal_goto('search-destination/' . $form_state['values']['keys']);
// }


function search_listings_form_submit($form, &$form_state) {
    global $user;
    $form_state['values']['keys']=trim(str_replace("#","",$form_state['values']['keys']));
    if(!empty($form_state['values']['keys'])){
        switch ($form_state['values'] ['type']) 
        {
            case "Experience":
                drupal_goto('search-destination/' . $form_state['values']['keys']);
                break;
            case "Hotels":
                drupal_goto('search-hotel/' . $form_state['values']['keys']);
                break;
            case "Vacation Rentals":
                drupal_goto('Vacation_Rentals');
                break;
            case "Gloobers":
                if(!$user->uid){
                    drupal_goto('login');
                }
                drupal_goto('Gloobers/'.$form_state['values']['keys']);
                break;
            case "Travel guides":
                drupal_goto('travel_guides_listings/'.$form_state['values']['keys']);
                break; 
            case "Recommendations":
                 drupal_goto('Recommendations');
                break;  
            case "Advisors":
                if(!$user->uid){
                    drupal_goto('login');
                }
                drupal_goto('search-listing/advisors/'.$form_state['values']['keys']);
                break;             
        }
    }    
    
}


function search_listings_results($keys = null) {
    global $user;

    $filter = array();
    
    if (arg(1)) {
        $countriesArray = array();
//var_dump(arg(1));die;
        $prepAddr = str_replace(' ', '+', arg(1));
        $geocode = file_get_contents('http://maps.google.com/maps/api/geocode/json?address=' . $prepAddr . '&sensor=false');

        $output = json_decode($geocode);
        //echo "<pre>";Print_r($output);exit;
        if ($output) {
            $lat = $output->results[0]->geometry->location->lat;
            $filter['lat'] = $lat;
            $long = $output->results[0]->geometry->location->lng;
            $filter['long'] = $long;
            $city = $state_short = $country = $address = $state_long = '';
            //echo "<pre>";Print_r($output->results[0]->address_components);exit;
            foreach ($output->results[0]->address_components as $addressC) {
                switch($addressC->types[0]){
                    case "administrative_area_level_2":
                $city = $addressC->long_name;
                $filter['city'] = $city;

                    case "locality":
                    $location_short = $addressC->short_name;
                    $location_long = $addressC->long_name;

                    $filter['city'] = $location_long;
                    case "administrative_area_level_1":
                    $state_short = $addressC->short_name;
                    $state_long = $addressC->long_name;
                    $filter['state_short'] = $state_short;
                    $filter['state_long'] = $state_long;
                    case $addressC->types[0] == "country":
                    $country = $addressC->long_name;
                    $filter['country'] = $country;
                    case "sublocality_level_1":
                    $address = $addressC->long_name;
                    $filter['address'] = $address;
                    case $addressC->types[0] == "continent":
                    $query = db_select('gbl_country_list', 'cl')
                        ->fields('cl', array('country_name'))
                        ->condition('continent', $addressC->long_name, '=');
                    $result = $query->execute();
                    while ($res = $result->fetchAssoc()) {
                        $countriesArray[] = $res['country_name'];
                    }
                    $filter['continent'] = $addressC->long_name;
                }

            }
            }
        }
        $filter["search"] = arg(1);
      
    }

  
    $listings = getAllListings($filter, 'my_listing', $user->uid);

    $listingCount = getAllListingsCount($filter, 'my_listing', $user->uid, $homeSearch, $countriesArray);

    $experienceType = getExperienceType();

    return theme('results', array('experienceType' => $experienceType, 'listingResult' => $listings,'listingResultCount'=>$listingCount));
}


//26 feb2015

function experience_listing_details() {

    session_start();
    global $user;
    $listId = arg(1);    
   
    if(strpos($_SERVER['HTTP_USER_AGENT'], 'facebookexternalhit')!==false){
        
    }else{
        if((!$user->uid)){
            $dest = drupal_get_destination();
            $_SESSION['destination']  = $dest["destination"];
            drupal_goto('login',$dest);
        }
    } 
    

    if($_GET['ruid']){
    
        $recommendUid=$_REQUEST['ruid'];
        $recommendUidendoded=base64_decode($recommendUid);
        if($user->uid !=$recommendUidendoded){
            $_SESSION['order']['ruid']=$recommendUidendoded;
            $_SESSION['rruid']=$recommendUidendoded;
        }
    }

    if(isset($_REQUEST['advisorId'])){

        $advisorId=base64_decode($_REQUEST['advisorId']);
        $_SESSION['order']['advisor_id']=$advisorId;
    }
    $offerUriType = (isset($_REQUEST['offer'])) ? base64_decode($_REQUEST['offer']) : null;
    
    $pricingData = getPricingData($listId);
    
    
    if (is_numeric($listId) == false){
        drupal_not_found();
    }
    $OverviewData = getOverviewData($listId);
    if(is_array($OverviewData) && !empty($OverviewData) && isset($OverviewData)){
        $reviews = getListingReviews($listId);
        $SuperAverage = getListingReviewsSuperAverage($listId);
        $SuperAverage1 = getListingReviewsSuperAverage($listId);
        $reviewsCount = getListingReviewsCount($listId);
        $reviewsAverage = getListingReviewsAverage($listId);
        $photos = getPhotosData($listId);
        //echo "<pre>";Print_r($photos);exit;
        $userReviewsCount = getUserReviewsCount($OverviewData["uid"]);
        $amentiesdata = getAmentiesByproduct($listId);
        $amentiesdata = unserialize($amentiesdata["value1"]);
        $locationDetail = getListingData($listId);
        $pricingData = getPricingData($listId);
        $basePrice = getBasePrice($listId);
        $calendarDetail = getSchedulingData($listId);
        $scheduleSessionData = getScheduleSessionData($listId);
        $extras = getProductExtraData($listId);
        $rulesDetail = getRulesDetails($listId);
        
        $rulesDetail = unserialize($rulesDetail["value1"]);
        //echo "<pre>";Print_r($rulesDetail);exit;
        $nearPlaces = findNearByPlaces($OverviewData);
        $topRankedListing = getTopRankedExperienceListing($listId);
        $topListingAccToPlace = getListingAccToPlace($listId);
        $topRankedListingCount = getTopRankedExperienceListingCount();
        $experienceType = getExperienceListingTypeById($OverviewData['experience_type']);
        

        if (isset($_SESSION['order'])){
            if ($_SESSION['order']['eid'] != $listId) {
            
                unset($_SESSION['order']);
               // unset($_SESSION['credit_message']);
            }
        }
        
        /* ======================Setting up session cart for order================================== */
        $_SESSION['order']['title'] = isset($OverviewData['title']) ? $OverviewData['title'] : '';
        $_SESSION['order']['eid'] = isset($OverviewData['eid']) ? $OverviewData['eid'] : '';
        $_SESSION['order']['listing_type'] = isset($OverviewData['title']) ? $OverviewData['title'] : '';
        $_SESSION['order']['city'] = $OverviewData['city'];
        $_SESSION['order']['country'] = $OverviewData['country'];
        $_SESSION['order']['deposit'] = isset($rulesDetail['security_deposit']) ? $rulesDetail['security_deposit'] : '';

        $photo = unserialize($photos[0]['value1']);
        $file = file_load($photo["fid"]);
        $_SESSION['order']['imagepath'] = $file->uri;

        $experienceType = getExperienceListingTypeById($topRankedListing[0]['experience_type']);
        $_SESSION['order']['experience_type'] = $experienceType['experience_type'];
        
        //select offer type and set into session
        $offerUriType = ($offerUriType) ? $offerUriType : 'N/A';
        $offers = getOffersAndDiscountsData($listId,$offerUriType);
        $availOfferList  = array();
        foreach($offers as $offerList){
          $amount = 0;
          if($offerUriType=='24 Hour Offer'){
            $amountArr = unserialize($offerList['amount']);
            $amount = $amountArr['offer_24_hour_price_value'];
          }else{
            $amount =   $offerList['amount'];
          }       
          
          $availOfferList['offer_type'] = $offerList['offer_type'];
          $availOfferList['discount_by'] = $offerList['discount_by'];
          $availOfferList['date'] = $offerList['date'];     
          $availOfferList['amout'] = $amount;   
          $availOfferList['time_value'] = $offerList['time_value'];     
          $availOfferList['time_key'] = $offerList['time_key'];     
        }
        $_SESSION['order']['availOfferList'] = $availOfferList;

       // echo  $_SESSION['rruid'];exit;
        
        /* ===========================End of OrderCart Session var====================================== */
        return theme('experience_listing_details', array(
                    'photos' => $photos,
                    'OverviewData' => $OverviewData,
                    'rulesDetail' => $rulesDetail,
                    'reviews' => $reviews,
                    'calendarDetail' => $calendarDetail,
                    'amentiesdata' => $amentiesdata,
                    'pricingData' => $pricingData,
                    'topRankedListing' => $topRankedListing,
                    'topRankedListingCount' => $topRankedListingCount,
                    'topListingAccToPlace' => $topListingAccToPlace,
                    'scheduleSessionData' => $scheduleSessionData,
                    //'orderPriceDOM' => getOrderPricingDetails($pricingData,$rulesDetail), 
                    'orderPriceDOM' => '',
                    'extras' => $extras)
        );
        
    }else{
        drupal_not_found();
    }

}

/*
 * @description: Order sumary details for all items like adult , child etc
  @return : A complete HTML or JSON
 */

function getOrderPricingDetails() {

    //unset($_SESSION['order']);die;
    /*
     * @description: isAjax define which type of task to be done like creatingcart with normal values.
     * Or optional services. 1 for storing order information and 2for optional service values to session cart
     */

    $isAjax = (isset($_POST['isAjax'])) ? $_POST['isAjax'] : 0;
    if ($isAjax == 1) {
        $listId = $_POST['id'];
        $price_type = $_POST['type'];
        $advisorId = $_POST['advisorId'];
       
        $price_option_type = $_POST['subcat'];
        //echo $price_option_type;exit;
        /* New PRicing Data Get Dynamically */
        $Selected_booking_date = $_POST['selected_booking_date'];
        $Selected_booking_time = $_POST['selected_booking_time'];
        $Selected_booking_time  = date("H:i", strtotime($Selected_booking_time));
        $pricingData = getNewPricingData($listId, $price_type, $price_option_type,$Selected_booking_date, $Selected_booking_time);
       
        
        $_SESSION['order']['date'] = $_POST['date'];
        $_SESSION['order']['advisorId']=$advisorId;
        /* End session cart for order */
        $pricingData['session_vars'] = $_SESSION['order'];
        echo json_encode($pricingData);
        die;
    }else if ($isAjax == 2){
        $listId = $_POST['listId'];
        $optId = $_POST['id'];
        $status = $_POST['status'];
        $advisorId = $_POST['advisorId'];
        $qty = (isset($_POST['qty'])) ? $_POST['qty'] : 1;
        $extras = getProductExtraData($listId);
        //echo "<pre>";Print_r(unserialize($_SESSION['order']));exit;
        foreach ($extras as $key => $value) {
            $extrasSerialize = unserialize($value["value1"]);
            //Setting into order session optional services and return json element.
            if ($optId == $value["meta_id"]) {
                if($extrasSerialize['price-type']=='$'){
                    switch($extrasSerialize['price-key']){
                        case 'per-order':
                        $orderStack = array(
                            'optid' => $optId,
                            'price' => $extrasSerialize['price'],
                            'qty' => $qty,
                            'price_key'=>$extrasSerialize['price-key'],
                            'total' => ($extrasSerialize['price']),
                            'title' => $extrasSerialize['title'],
                            'status' => $status
                        );
                        break;
                        case 'per-quantity':
                        $orderStack = array(
                            'optid' => $optId,
                            'price' => $extrasSerialize['price'],
                            'qty' => $qty,
                            'price_key'=>$extrasSerialize['price-key'],
                            'total' => ($extrasSerialize['price'] * $qty),
                            'title' => $extrasSerialize['title'],
                            'status' => $status
                        );
                        break;
                    }               
                 }else{
                 // Price will be apply to % Base on ordering extra services.
                 if(isset($_SESSION['order']['subtotal']['person_total']) && !empty($_SESSION['order']['subtotal']['person_total'])){
                    $total_cost_travellers=$_SESSION['order']['subtotal']['person_total'];
                 }else{
                    $total_cost_travellers=$_SESSION['order']['subtotal']['item_total'];
                 
                 }
                 if(isset($_SESSION['order']['disscountOfferApply']['disscountedAmount'])){
                 
                    $total_cost_travellers=($total_cost_travellers-$_SESSION['order']['disscountOfferApply']['disscountedAmount']);
                 }
                 
                 switch($extrasSerialize['price-key']){
                        case 'per-order':
                        $orderStack = array(
                            'optid' => $optId,
                            'price' => $extrasSerialize['price'],
                            'qty' => $qty,
                            'price_key'=>$extrasSerialize['price-key'],
                            'total' => ((($total_cost_travellers)*($extrasSerialize['price']/100))),
                            'title' => $extrasSerialize['title'],
                            'status' => $status
                        );
                        break;
                        case 'per-quantity':
                        $orderStack = array(
                            'optid' => $optId,
                            'price' => $extrasSerialize['price'],
                            'qty' => $qty,
                            'price_key'=>$extrasSerialize['price-key'],
                            'total' => ((($total_cost_travellers)*($extrasSerialize['price']/100)) * $qty),
                            'title' => $extrasSerialize['title'],
                            'status' => $status
                        );
                        break;
                    }
                 }
                 
                 if($status==1){
                    $_SESSION['order']['optional_services'][$optId] = $orderStack;
                }else{
                    unset($_SESSION['order']['optional_services'][$optId]);
                    unset($_SESSION['order']['item_type'][$price_option_type]);
                    unset($_SESSION['order']['person_type'][$price_option_type]);
                }
            }
        }
        
        //Calculate Gross price+with additional services accroding to each row of order 
        $subTotalPrice = 0;
        $subTotalQty = 0;
        foreach($_SESSION['order']['optional_services'] as $orderDetails) {
            
            $subTotalPrice = $subTotalPrice + ($orderDetails['total']);
            $subTotalQty = $subTotalQty + $orderDetails['qty'];
        }
        $_SESSION['order']['subtotal']['services_total'] = $subTotalPrice;
        //echo "<pre>";Print_r($_SESSION['order']['subtotal']['services_total']);exit;

        if(isset($_SESSION['order']['subtotal']['person_total'])){
        
            $_SESSION['order']['Mainsubtotal']=(($_SESSION['order']['subtotal']['person_total']) +($_SESSION['order']['subtotal']['services_total']));
        }else if($_SESSION['order']['subtotal']['item_total']){
            $_SESSION['order']['Mainsubtotal']=(($_SESSION['order']['subtotal']['item_total']) +($_SESSION['order']['subtotal']['services_total']));
        }else{
            $_SESSION['order']['Mainsubtotal']=$_SESSION['order']['subtotal']['services_total'];
        }
        if(isset($_SESSION['order']['disscountOfferApply']['disscountedAmount'])){
                 
            $_SESSION['order']['Mainsubtotal']=($_SESSION['order']['Mainsubtotal']-$_SESSION['order']['disscountOfferApply']['disscountedAmount']);
        }
        $_SESSION['order']['subtotal']['services_qty'] = $subTotalQty;
        $_SESSION['order']['advisorId']=$advisorId;
        //$orderStack['session_vars'] = $_SESSION['order'];
        echo json_encode($_SESSION['order']);
        die;
    }
}



/* Get Top Ranked Experience List */

function getTopRankedExperienceListing($listId = null) {
    $listings = array();
    $OverviewData = getOverviewData($listId);
    $userId = $OverviewData['uid'];
    $query = db_select('gbl_experience_list', 'el')
            ->fields('el')
            ->condition('el.uid', $userId)
            ->orderBy('el.agg_rating', 'DESC');

    $result = $query->execute();
    $count = 1;
    while($data = $result->fetchAssoc()){
        if($count < 3){
            $listings[] = $data;
        }
        $count++;
    }
    return $listings;
}

function getTopRankedExperienceListingCount($listId = null) {
    $listings = array();
    $OverviewData = getOverviewData($listId);
    $userId = $OverviewData['uid'];
    $query = db_select('gbl_experience_list', 'el')
            ->fields('el')
            ->condition('el.uid', $userId)
            ->orderBy('el.agg_rating', 'DESC');
    $result = $query->execute();
    return $result->rowCount();
}

/* Get Experience List according to place */

function getListingAccToPlace($listId = null) {
    $listings = array();
    $OverviewData = getOverviewData($listId);
    $userId = $OverviewData['uid'];
    $city = $OverviewData['city'];
    $state = $OverviewData['state'];
    $country = $OverviewData['country'];
    $or = db_or()->condition('el.city', $city, 'LIKE')->condition('el.state', $state, 'LIKE')->condition('el.country', $country, 'LIKE');
    $query = db_select('gbl_experience_list', 'el')
            ->fields('el')
            ->condition($or)
            ->orderBy('el.agg_rating', 'DESC');
    $query->range(0, 2);
    $result = $query->execute();
    while ($data = $result->fetchAssoc()) {

        $listings[] = $data;
    }
    return $listings;
}

/* 9MArch_2015 */

function booking_summary_form($form, &$form_state) {
    session_start();
    
    $curYear = date('Y');
    $years = array();
    global $user;
    
    $userdetail=user_load($user->uid);
    for ($i = $curYear; $i <= $curYear + 50; $i++) {
        $years[$i] = $i;
    }
    $month = array();
    for($j = 1; $j < 13; $j++){
        if ($j < 10) {
            $month['0' . $j] = '0' . $j;
        } else {
            $month[$j] = $j;
        }
    }

    $form['booking_summary']['paymenttype'] = array(
        '#type' => 'select',
        '#prefix' => '<div class="col-md-6"><label>Type of Credit Card<span class="form-required"> *</span></label><span>',
        '#suffix' => '</span></div>',
        '#options' => array(
            'Visa' => 'Visa',
            'MasterCard' => 'MasterCard',
            'Amex' => 'American Express',
            'Discover' => 'Discover'
        )
    );
   
    $form['booking_summary']['creditcardno'] = array(
        '#type' => 'textfield',     
        '#prefix' => '<div class="col-md-6"><label>Credit Card Number<span class="form-required"> *</span></label>',
        "#attributes" => array('maxlength' => '16', 'class' => array('required'), 'autocomplete' => 'off'),
        '#suffix' => '</div>',
        '#required' => true
    );
    $form['booking_summary']['advisorId'] = array(
        '#type' => 'hidden',
       '#default_value'=>$_SESSION['order']['advisorId']
    );
 

    $form['booking_summary']['expirationmonth'] = array(
        '#type' => 'select',
        '#prefix' => '<div class="col-md-4 bs_sum_date"><label>Expiration Month<span class="form-required"> *</span></label><span>',
        '#suffix' => '</span></div>',
        '#options' => $month
    );


    $form['booking_summary']['expirationyear'] = array(
        '#type' => 'select',
        '#prefix' => '<div class="col-md-4 bs_sum_date"><label>Year<span class="form-required"> *</span></label><span>',
        '#suffix' => '</span></div>',
        '#options' => $years
    );
    $form['booking_summary']['securitycode'] = array(
        '#type' => 'password',
        "#attributes" => array('class' => array('required'), 'autocomplete' => 'off'),
        '#prefix' => '<div class="col-md-4 bs_sum_date"><label>Security Code<span class="form-required"> *</span></label>',
        '#suffix' => '</div>',
        '#required' => true
    );
    $form['booking_summary']['cardholdername'] = array(
        '#type' => 'textfield',
        "#attributes" => array('class' => array('required')),
        '#prefix' => '<div class="col-md-6"><label>Cardholder Name<span class="form-required"> *</span></label>',
        '#suffix' => '</div>',
        '#required' => true
    );

    $form['booking_summary']['companyname'] = array(
        '#type' => 'textfield',
        '#prefix' => '<div class="col-md-6"><label>Company Name</label>',
        '#suffix' => '</div>'
    );
    $form['booking_summary']['email'] = array(
        '#type' => 'textfield',
        '#prefix' => '<div class="col-md-6"><label>Email<span class="form-required"> *</span></label>',
        '#suffix' => '</div>',
        '#default_value' => isset($userdetail->mail) ? $userdetail->mail :'',
        '#required' => true
    );
    $form['booking_summary']['firstname'] = array(
        '#type' => 'textfield',
        "#attributes" => array('class' => array('required')),
        '#prefix' => '<div class="col-md-6"><label>First Name<span class="form-required"> *</span></label>',
        '#suffix' => '</div>',
        '#default_value' => isset($userdetail->field_first_name) ? $userdetail->field_first_name['und'][0]['value'] :'',
    );
    $form['booking_summary']['lastname'] = array(
        '#type' => 'textfield',
        "#attributes" => array('class' => array('required')),
        '#prefix' => '<div class="col-md-6"><label>Last Name<span class="form-required"> *</span></label>',
        '#suffix' => '</div>',
        '#default_value' => isset($userdetail->field_last_name) ? $userdetail->field_last_name['und'][0]['value'] :'',

    );
    $form['booking_summary']['street'] = array(
        '#type' => 'textfield',
        "#attributes" => array('class' => array('required')),
        '#prefix' => '<div class="col-md-6"><label>Street<span class="form-required"> *</span></label>',
        '#suffix' => '</div>'
    );
    $form['booking_summary']['number'] = array(
        '#type' => 'textfield',
        "#attributes" => array('class' => array('required')),
        '#prefix' => '<div class="col-md-6"><label>Number<span class="form-required"> *</span></label>',
        '#suffix' => '</div>',
        '#default_value' => isset($userdetail->field_phone_number) ? $userdetail->field_phone_number['und'][0]['value'] :'',

    );
    $form['booking_summary']['apt'] = array(
        '#type' => 'textfield',
        '#prefix' => '<div class="col-md-6"><label>Apt #</label>',
        '#suffix' => '</div>'
    );
    $form['booking_summary']['city'] = array(
        '#type' => 'textfield',
        "#attributes" => array('class' => array('required')),
        '#prefix' => '<div class="col-md-6"><label>City<span class="form-required"> *</span></label>',
        '#suffix' => '</div>',
        '#default_value' => isset($userdetail->field_city) ? $userdetail->field_city['und'][0]['value'] :'',
    );
    $form['booking_summary']['zip'] = array(
        '#type' => 'textfield',
        '#maxlength'=>10,
        "#attributes" => array('class' => array('required')),
        '#prefix' => '<div class="col-md-6"><label>' . t('Zip') . '<span class="form-required"> *</span></label>',
        '#suffix' => '</div>'
    );
    $form['booking_summary']['state'] = array(
        '#type' => 'textfield',
        //"#attributes" => array('class' => array('required')),
        '#prefix' => '<div class="col-md-6"><label>' . t('State') . '</label>',
        '#suffix' => '</div>',
        '#default_value' => isset($userdetail->field_state) ? $userdetail->field_state['und'][0]['value'] :'',

    );
    $query = db_select('gbl_country_list', 'cl')
            ->fields('cl', array('country_name'));
    $result = $query->execute();
    while ($res = $result->fetchAssoc()) {
        $countriesArray[] = $res['country_name'];
    }
    $countries = array();
    foreach ($countriesArray as $key => $val){
        $countries[$val] = $val;
    }

    $form['booking_summary']['country'] = array(
        '#type' => 'select',
        '#prefix' => '<div class="col-md-6"><label>' . t('Country') . '</label><span>',
        '#suffix' => '</span></div>',
        '#options' => $countries
        
        /*'#required' => true*/
    );
    $form['booking_summary']['message'] = array(
        '#type' => 'textarea'
    );
    $form['booking_summary']['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Confirm',
        '#attributes' => array(
            'class' => array('btnsend'),
        ),
        '#prefix' => '<div class="confirm"><p>Clicking The << CONFIRM >> Button You Agree On<br><span><a>Gloobers Terms & Conditions</a></span></p><div class="btnconfirm">',
        '#suffix' => '</div></div>'
    );
    return $form;
}

/*************************10March****************************/

function booking_summary_form_submit($form, &$form_state){
    session_start();
    global $user;
    $advisorId = $_SESSION['order']['advisor_id'];
    //$ruid= $_SESSION['order']['ruid'];
    $ruid=$_SESSION['rruid'];
    //echo $_SESSION['order']['timeNew'].'<br/>'.$_SESSION['order']['dateNew'];exit;
    //$advisorId=$form_state['values']['advisorId'];
    $form_state['first_name'] = urlencode($form_state['values']['firstname']);
    $form_state['email'] = urlencode($form_state['values']['email']);
    $form_state['last_name'] = urlencode($form_state['values']['lastname']);
    $_SESSION['traveller']['firstname'] = $form_state['first_name'];
    $_SESSION['traveller']['lastname'] = $form_state['last_name'];
    /* $form_state['credit_card_type']=urlencode('Visa');
      $form_state['credit_card_no']=urlencode('4539644852839411');
      $form_state['credit_expiration_month']=urlencode('07');
      $form_state['credit_expiration_year']=urlencode('2021');
      $form_state['credit_varification_no']=urlencode('333'); */
    $form_state['credit_card_type'] = urlencode($form_state['values']['paymenttype']);
    $form_state['credit_card_no'] = urlencode($form_state['values']['creditcardno']);
    $form_state['credit_expiration_month'] = urlencode($form_state['values']['expirationmonth']);
    $form_state['credit_expiration_year'] = urlencode($form_state['values']['expirationyear']);
    $form_state['credit_varification_no'] = urlencode($form_state['values']['securitycode']);
    $form_state['street'] = urlencode($form_state['values']['street']);
    $form_state['city'] = urlencode($form_state['values']['city']);
    $form_state['state'] = urlencode($form_state['values']['state']);
    $form_state['zipcode'] = urlencode($form_state['values']['zip']);
    $form_state['country'] = urlencode($form_state['values']['country']);
    $paymentType = urlencode('Sale');  // 'Authorization' or 'Sale'
    $firstName = $form_state['first_name'];
    $lastName = $form_state['last_name'];

    $creditCardType = $form_state['credit_card_type'];
    $creditCardNumber = $form_state['credit_card_no'];
    $expDateMonth = $form_state['credit_expiration_month'];
    $padDateMonth = str_pad($expDateMonth, 2, '0', STR_PAD_LEFT);
    $expDateYear = $form_state['credit_expiration_year'];
    $cvv2Number = $form_state['credit_varification_no'];
    $streetcc = $form_state['street'];
    $city = $form_state['city'];
    $state = $form_state['state'];
    $zip = $form_state['zipcode'];
    $country = $form_state['country'];
    $personPrize = $_SESSION['order']['subtotal']['person_total'];
     $servicePrize = $_SESSION['order']['subtotal']['services_total'];
     $ItemPrize=$_SESSION['order']['subtotal']['item_total'];
    if(isset($personPrize)){$totalAmount = ($personPrize + $servicePrize);}
    if(isset($ItemPrize)){$totalAmount =($ItemPrize + $servicePrize);}
    if(isset($_SESSION['order']['credit_discount'])){
        $discount = $_SESSION['order']['credit_discount'];
        $paybleAmount = $totalAmount - $discount ;
    }
    if(isset($_SESSION['order']['disscountOfferApply'])){
        
        $offerDiscount = 0;
        switch($_SESSION['order']['disscountOfferApply']['disscountBy']){
            case '%':
            $offerDiscount = $_SESSION['order']['disscountOfferApply']['amount'];
            $offerDiscount = ($paybleAmount*$offerDiscount)/100; //in currency from percentage
            break;
            default:
            $offerDiscount = $_SESSION['order']['disscountOfferApply']['amount'];
            break;
        }
        $paybleAmount  = $paybleAmount - $offerDiscount;
    }
    $used_globies=$_SESSION['order']['used_gloobies'];
    $payamount=$_SESSION['order']['Mainsubtotal'];
    $currencyID = urlencode('USD');
    $IPADDRESS = urlencode($_SERVER['REMOTE_ADDR']);
    $servicetax=variable_get('service_tax');
    $serviceTaxAmt=($payamount*$servicetax)/100;
    $payamount_With_Tax=($payamount+$serviceTaxAmt);
    $payamount_With_Tax=sprintf('%.2f',$payamount_With_Tax);
    $payamount_With_Tax=($payamount_With_Tax-$used_globies);
    $payamount_With_Tax=sprintf('%.2f',$payamount_With_Tax);
    $DESC = urlencode('Booking payment.');
    $nvpStr = "&PAYMENTACTION=$paymentType&IPADDRESS=$IPADDRESS&AMT=$payamount_With_Tax&CREDITCARDTYPE=$creditCardType&ACCT=$creditCardNumber&EXPDATE=$padDateMonth$expDateYear&CVV2=$cvv2Number&FIRSTNAME=$firstName&LASTNAME=$lastName&STREET=$streetcc&CITY=$city&STATE=$state&ZIP=$zip&COUNTRYCODE=$country&CURRENCYCODE=$currencyID";
    $httpParsedResponseAr = PPHttpPost('DoDirectPayment', $nvpStr);
    //echo "<pre>";Print_r($httpParsedResponseAr);exit;
    if ($httpParsedResponseAr['ACK'] == 'Success' || $httpParsedResponseAr['ACK'] == 'SuccessWithWarning') {

        $httpParsedResponseAr['ACK'] = 'completed';
        $timeStamp = urldecode($httpParsedResponseAr['TIMESTAMP']);
        $payment_status = urldecode($httpParsedResponseAr['ACK']);
        $transId = urldecode($httpParsedResponseAr['TRANSACTIONID']);
        $date = date('Y-m-d H:i:s');
        $amount = urldecode($httpParsedResponseAr['AMT']);
        $timeStamp = urldecode($httpParsedResponseAr['TIMESTAMP']);
        $currency = urldecode($httpParsedResponseAr['CURRENCYCODE']);
        $transId = urldecode($httpParsedResponseAr['TRANSACTIONID']);
        $date = date('Y-m-d H:i:s', strtotime($timeStamp));
        //Insert in booking table
        $listId = $_SESSION['order']['eid'];

        $datetime = explode(' ', $_SESSION['order']["date"]);
        $arrival_time = $datetime[1];
        $additional_amount = $servicePrize;
        $booking_date_from = date('Y-m-d', strtotime($datetime[0]));
        $security_deposit = $_SESSION['order']['deposit'];
        $grandTotal =$paybleAmount;
        $admin_commition_percent = variable_get('commission');
        $admin_commission = $totalAmount * ($admin_commition_percent / 100);
        $admin_commission = sprintf('%.2f', $admin_commission);
        if($_SESSION['order']['person_type']){
            $quantity = array();
            foreach ($_SESSION['order']['person_type'] as $qty) {

                $quantity[] = $qty['qty'];
            }
            $quantity = array_sum($quantity);
            $partispants = serialize($_SESSION['order']['person_type']);
        }else{
            $quantity = array();
            foreach ($_SESSION['order']['item_type'] as $qty) {

                $quantity[] = $qty['qty'];
            }
            $quantity = array_sum($quantity);
            $partispants = serialize($_SESSION['order']['item_type']);
        }
        $bookingID = random_string(10);
        $bilingdetail = serialize($form_state);
        if($_SESSION['order']['optional_services']){
            $additional_services = serialize($_SESSION['order']['optional_services']);
        }else{
            $additional_services=null;
        }
        $addresss = array('city'=>$city,'state'=>$state,'country'=>$country);
        $address_field = serialize($addresss);  
        if(($ruid) && ($ruid != $user->uid)){
        
            $ruid_credits_assign=variable_get('credit_value_per_booking_throught_recommendation_link');
            $query_credits = db_select('gbl_credit_user', 'cu');
            $query_credits->fields('cu',array('credits_assigned'))->condition('cu.uid', $ruid);
            $result_credits = $query_credits->execute();
            $res_credits = $result_credits->fetchAll(PDO::FETCH_ASSOC);
            $booking_credits=variable_get('credit_value_per_booking_throught_recommendation_link');
            if(!empty($res_credits) && is_array($res_credits)){
                $credits_assigned=$res_credits[0]['credits_assigned'];
                //echo "<pre>";Print_r($res_credits[0]['credits_assigned']);exit;
                
                $creditData = db_update('gbl_credit_user')
                        ->fields(array('credits_assigned' => ($credits_assigned + $booking_credits)))
                        ->condition('uid', $ruid)
                        ->execute();
            }else{
                $creditData = db_insert('gbl_credit_user')
                        ->fields(array('credits_assigned' => $booking_credits,'credits' => $booking_credits,'uid' => $ruid,'created' => time()))
                        ->execute();
            
            }
        }
        /* Update Credits oF user After USed Gloobies */
        $totalCredits=get_total_credits();
        if(isset($totalCredits)){
            $credit_per_Dollar=variable_get('credit_value');
            $availble_gloobies=($totalCredits/$credit_per_Dollar);
            $availble_gloobies=intval($availble_gloobies);
        }else{
            $availble_gloobies=0;
        }
        $remainGloobies=($availble_gloobies-$used_globies);
        $remainGloobies=($remainGloobies*variable_get('credit_value'));
        $updateCredits=db_update('gbl_credit_user')
                        ->fields(array('credits' => $remainGloobies))
                        ->condition('uid', $user->uid)
                        ->execute();
        /* End Update Credits oF user After USed Gloobies */
        $_SESSION['serviceTaxAmt']=$serviceTaxAmt;
        $checkkk = array('lid' => $listId,
            'uid' => $user->uid,
            'quantity' => $quantity,
            'quantity_details' => $partispants,
            'additional_cost' => $additional_amount,
            'additional_services' => ($additional_services) ? $additional_services : '',
            'total_cost' => $totalAmount,
            'security' => $security_deposit,
            'discount' => $offerDiscount,
            'credit_discount'=>$used_globies,
            'service_tax'=>$serviceTaxAmt,
            'grand_total' => $payamount_With_Tax,
            'admin_commission' => $admin_commission,
            'arrive_at_date' => date('Y-m-d', strtotime($_SESSION['order']['dateNew'])),
            'created' => time(),
            'booking_status' => 'booked',
            'advisor_id'=>($advisorId)?$advisorId:'',
            'advisor_credits_assigned'=>($advisorId)?variable_get('credit_value_per_booking_throught_advisor'):null,
            'ruid'=>($ruid)?$ruid:'',
            'ruid_credits_assign'=>($ruid_credits_assign)?$ruid_credits_assign:'',
            'other_details' => serialize($bilingdetail),
            'arrive_at_time' => $_SESSION['order']['timeNew'],
            'booking_id' => $bookingID,
            'address_field'=>$address_field
        );
        //echo "<pre>";Print_r($checkkk);exit;
        $query = db_insert('gbl_booking')->fields($checkkk);
        $result = $query->execute();
        
        /************Assign Credits To Advisor****************/
        if($advisorId){
            $query_credits = db_select('gbl_credit_user', 'cu');
            $query_credits->fields('cu',array('credits_assigned'))->condition('cu.uid', $advisorId);
            $result_credits = $query_credits->execute();
            $res_credits = $result_credits->fetchAll(PDO::FETCH_ASSOC);
            if(!empty($res_credits) && is_array($res_credits)){
                $credits_assigned=$res_credits[0]['credits_assigned'];
                //echo "<pre>";Print_r($res_credits[0]['credits_assigned']);exit;
                $booking_credits=variable_get('credit_value_per_booking_throught_advisor');
                $creditData = db_update('gbl_credit_user')
                        ->fields(array('credits_assigned' => ($credits_assigned + $booking_credits)))
                        ->condition('uid', $advisorId)
                        ->execute();
            }else{
        
                $booking_credits=variable_get('credit_value_per_booking_throught_advisor');
                $creditData = db_insert('gbl_credit_user')
                                ->fields(array('credits_assigned' => $booking_credits,'credits'=> 0,'credits_earned'=>0,'uid'=>$advisorId,'created'=>time()));
                $creditData->execute();
                
            }
        }
        /************End Assign Credits To Advisor****************/
        /************Assign Credits To Advisor from recommend link after Signup****************/
            $query_recommend = db_select('gbl_recommend_link_users', 'r');
            $query_recommend->fields('r')->condition('r.link_accept_person_uid', $user->uid);
            $result_recommend_data = $query_recommend->execute();
            $result_recommend_data_user = $result_recommend_data->fetchAll(PDO::FETCH_ASSOC);
            //echo "<pre>";Print_r($result_recommend_data_user);exit;
        if($result_recommend_data_user){
            $query_credits = db_select('gbl_credit_user', 'cu');
            $query_credits->fields('cu',array('credits_assigned'))->condition('cu.uid', $result_recommend_data_user[0]['link_share_person_uid']);
            $result_credits = $query_credits->execute();
            $res_credits = $result_credits->fetchAll(PDO::FETCH_ASSOC);
            $booking_credits=variable_get('credit_value_per_booking_throught_recommendation_link');
            //echo "<pre>";print_r($res_credits);exit;
            if(!empty($res_credits) && is_array($res_credits)){
        
                $credits_assigned=$res_credits[0]['credits_assigned'];
                $creditData = db_update('gbl_credit_user')
                        ->fields(array('credits_assigned' => ($credits_assigned + $booking_credits)))
                        ->condition('uid', $result_recommend_data_user[0]['link_share_person_uid'])
                        ->execute();
            }else{
                $creditData = db_insert('gbl_credit_user')
                                ->fields(array('credits_assigned' => $booking_credits,'credits' => 0,'credits_earned' =>0,'uid'=>$result_recommend_data_user[0]['link_share_person_uid'],'create'=>time()))
                                ->execute();
            }
        }
        //End Assign Credits To Advisor
    

        //Get new id after insert and insert in payment table
        if ($result) {
            $_SESSION['order']['bookingId'] = $result;
            $query1 = db_insert('gbl_payment')
                    ->fields(array(
                        'bid' => $result,
                        'trans_id' => $transId,
                        'payment_status' => $payment_status,
                        'payment_at' => $date
                    ))
                    ->execute();

            $creditData = db_update('gbl_credit_user')
                    ->fields(array('credits' => $_SESSION['creditDetail']['remaining_user_credits']))
                    ->condition('uid', $user->uid)
                    ->execute();
            $creditData = db_insert('gbl_credit_used')
                    ->fields(array(
                        'uid' => $user->uid,
                        'bid' => $result,
                        'eid' => $_SESSION['order']['eid'],
                        'credit_used' => $_SESSION['creditDetail']['noofcreditsUsed'],
                        'noofcredits_per_dollar' => $_SESSION['creditDetail']['noofcreditsUsedPerDollar'],
                        'created' => time()
                    ))
                    ->execute();
            /*($advisorId)?$advisorId:'';
            ($ruid)?$ruid:'';*/
    
            AutomaticMailSend($result,$ruid,$advisorId);
            unset($_SESSION['creditDetail']);
            unset($_SESSION['order']);
            $_SESSION['payment_message']=t('Your payment successfully completed and this is your booking confirmation slip.');
            unset($_SESSION['user_booking_details']);
            drupal_goto('booking/confirmation/' . $result);
        }
    } else {
      
        form_set_error('Message_err', t(urldecode($httpParsedResponseAr['L_LONGMESSAGE0'])));
        drupal_goto('booking/summary');
    }
}
/**
 * hotel_booking page
 */



/**
 * booking confirmation
 */

function booking_confirmation() {

    global $user;
    $userid = $user->uid;
    $bookingId = arg(2);

    if(empty($userid)){

        drupal_goto("Login");

    }
    
    $booking_experienceData = getbookingdata($bookingId);
    //echo "<pre>";Print_r($booking_experienceData['lid']);exit;
    if ($userid == $booking_experienceData['uid']) {
        //$bookingData['lid']
        
        $getOperatorData = getOverviewData($booking_experienceData['lid']);
        $search_dest_bar=ucfirst($getOperatorData['city']). ', '.ucfirst($getOperatorData['country']);
        $opertordetail=user_load($getOperatorData['uid']);
        $photos = getPhotosData($booking_experienceData['lid']);
        $rulesDetail = getRulesDetails($booking_experienceData['lid']);
        $rulesDetail = unserialize($rulesDetail["value1"]);
        $data=array('operatordetail'=>$opertordetail,
                    'rulesDetail' => $rulesDetail,
                    'bookingData' => $booking_experienceData,
                    'photos' => $photos,
                    'exp_addres'=>$search_dest_bar,

                );
        return theme('booking_confirmation_new', $data);
    } else {
        drupal_not_found('/');
    }
}
function AutomaticMailSend($bookId,$ruid,$advisorId){

    global $user,$base_url;
    //echo $bookId;exit;
    $booking_details = getbookingdata($bookId);
    $quantity_details=unserialize($booking_details['quantity_details']);
    // Traveller data in string format
    $qtyC=1;
    $strQty=''; $Travelers_title ="Items";
    foreach($quantity_details as $key=>$val){
        if(sizeof($quantity_details)==$qtyC){$Comma='';}else{$Comma=', ';}
        $strQty .= $val['qty'].' '.$key.$Comma;     
        $qtyC++;
    }

    if (array_key_exists('Adult', $quantity_details) || array_key_exists('Child', $quantity_details)) {
    $Travelers_title ="Travelers";
    }
        
    //End
    $listingId=$_SESSION['order']['eid'];
    $photosData = getPhotosData($listingId);
    if(!empty($photosData)){
        $Listing_photo=unserialize($photosData[0]['value1']);
        $listingImage_fid=$Listing_photo['fid'];
        $listingImage = file_load($listingImage_fid);
        $listingImage_imgpath = $listingImage->uri;
        $listing_style = "new-reservation";
        $src = image_style_url($listing_style, $listingImage_imgpath);
    }else{
        $src=$base_url.'/sites/all/themes/gloobers_new/images/listing_img.jpg';
    }
   //Mail Send To Traveller
   $traveller = user_load($user->uid);
  // echo "<pre>";Print_r($traveller);exit;
    //get $traveller  location//
    $query=db_select('gbl_user_passeport','gup');
    $query->fields('gup',array('location'));
    $query->condition('uid',$user->uid);
    $query->condition('description','I live there');
    $result1=$query->execute();
    $traveller_location=$result1->fetchField();

    $traveller_DpID=$traveller->picture->fid;
    if ($traveller->picture != ""){
        $traveller_file = file_load($traveller_DpID);
        $traveller_file_imgpath = $traveller_file->uri;
        $traveller_style = "new-reservation";
        $traveller_DpImage_path=image_style_url($traveller_style, $traveller_file_imgpath);
        $traveller_DpImage= '<img class="img-circle size-img" src="'.image_style_url($traveller_style, $traveller_file_imgpath) . '" style="border-radius:100%;width:100px;height:100px;border:none">';
    }else{
        $traveller_DpImage_path=$base_url.'/'.drupal_get_path('theme', $GLOBALS['theme']) . '/images/no-profile-male-img.jpg';
        $traveller_DpImage=  '<img src="' . base_path().drupal_get_path('theme', $GLOBALS['theme']) . '/images/no-profile-male-img.jpg" class="img-circle size-img"  style="border-radius:100%;width:100px;;height:100px;border:none"/>';
    }
    if (!empty($traveller->field_first_name)){
        $travellername = ucfirst($traveller->field_first_name['und'][0]['value']) . "  " . ucfirst($traveller->field_last_name['und'][0]['value']);
    } else {
        $travellername = ucfirst($traveller->name);
    }
    /* Providor Data */
    $query = db_select('gbl_experience_list','f');
    $query->fields('f',array('uid'));
    $query->condition('eid',$listingId);
    $result4=$query->execute();
    $Provider=$result4->fetchField(); 
    $Provider_data = user_load($Provider);
    if(!empty($Provider_data ->field_first_name['und'][0]['value'])){
        $Provider_name =  ucfirst($Provider_data->field_first_name['und'][0]['value']). "  " . ucfirst($Provider_data->field_last_name['und'][0]['value']);
    }else{
        $Provider_name = ucfirst($Provider_data->name);
    }

    $Provider_DpID=$Provider_data->picture->fid;
    if ($Provider_data->picture != ""){
        $Provider_file = file_load($Provider_DpID);
        $Provider_file_imgpath = $Provider_file->uri;
        $Provider_style = "new-reservation";
        $Provider_DpImage_path=image_style_url($Provider_style, $Provider_file_imgpath);
        $Provider_DpImage= '<img class="img-circle size-img" src="'.image_style_url($Provider_style, $Provider_file_imgpath) . '" style="border-radius:100%;width:100px;height:100px;border:none">';
    }else{
        $Provider_DpImage_path=$base_url.'/'.drupal_get_path('theme', $GLOBALS['theme']) . '/images/no-profile-male-img.jpg';
        $Provider_DpImage=  '<img src="' . base_path().drupal_get_path('theme', $GLOBALS['theme']) . '/images/no-profile-male-img.jpg" class="img-circle size-img"  style="border-radius:100%;width:100px;;height:100px;border:none"/>';
    }

    $query=db_select('gbl_user_passeport','gup');
    $query->fields('gup',array('location'));
    $query->condition('uid',$Provider);
    $query->condition('description','I live there');
    $result1=$query->execute();
    $Provider_location=$result1->fetchField();

    /* End Providor Data */
    $title = '';                    
    $ArriveAtDate = date("d/m/Y", strtotime($booking_details['arrive_at_date']));
    $Arrive_After_One_day = date('d/m/Y', strtotime($booking_details['arrive_at_date'] . ' +1 day'));
    $ArriveAtTime=date("g:i A", strtotime($booking_details['arrive_at_time']));

    $_SESSION['mailsendtoprovider_country_session']=$_SESSION['order']['country']; 
    $_SESSION['order_title']=$_SESSION['order']['title'];

    $body='<table width="650" border="1" bordercolor="cccccc" cellspacing="0" cellpadding="0" align="center" style="border-collapse: collapse;table-layout: fixed; Margin-left: auto; Margin-right: auto; padding:5px; font-family:arial,sans-serif;">

    <tr>
    <td>


    <table align="center" bgcolor="#FFFFFF" width="100%" cellspacing="0" cellpadding="0" style="font-size:14px;color:#000; text-align:center; margin:auto; padding:0px;">
    <tr>
    <td align="center" valign="top"><img src="http://gloobers.com/sites/all/themes/gloobers2/images/logo.png" alt="Gloobers::Be friendly. Travel for free" title="Gloobers::Be friendly. Travel for free" width="300" /> </td>
    </tr>

    <tr>
    <td>
    <table cellspacing="0" cellpadding="0" align="center" width="100%" style="border-collapse:collapse;">
    <tr>
    <td bgcolor="#000000" width="40%" background="'.$src.'" style="padding:0; border:1px solid #aaa; vertical-align:middle;">
    <h3 style="color:#fff;font-weight:400; font-family:arial,sans-serif; text-shadow:3px 1px 2px #333;font-size:16px;margin:0"><center>'.$_SESSION['order']['title'].'</center></h3>
    <p style="color:#fff;font-weight:400; text-align:center; font-size:13px; font-family:arial,sans-serif; text-shadow:1px 1px 1px #333;margin:0px 0 10px">'.$_SESSION['order']['country'].'</p>
    </td>

    <td width="20%" align="center" valign="middle" style="padding:5px; border:1px solid #aaa; color:#000;">
    <img width="63" height="62" src="'.$Provider_DpImage_path.'" alt="" title="" style="border-radius:50%;width:63px;height:62px;" />
    <p style="color:#000; font-size:13px; text-align:center; font-family:arial,sans-serif;"><strong>'.ucfirst($Provider_name).'</strong><br />
    '.$Provider_location.'<br />
    <a href="mailto:'.($Provider_data->mail).'" style="color:#139ABC;text-decoration:none; font-size:13px; text-align:center;" target="_blank">'.$Provider_data->mail.'</a></p>
    </td>

    <td width="20%"  align="center" valign="middle" style="padding:5px; border:1px solid #aaa; color:#000;">
    <p style="color:#000; font-size:13px; font-family:arial,sans-serif;"><strong>Arrives on</strong><br />
    '.$ArriveAtDate.'<br />
    '.$ArriveAtTime.'</p>
    </td>

    <td width="20%"  align="center" valign="middle" style="padding:5px; border:1px solid #aaa; color:#000;">
    <p style="color:#000; font-size:13px; font-family:arial,sans-serif;"><strong>'.$Travelers_title.'</strong><br />
    '.$strQty.'</p>
    </td>
    </tr>

    <tr>  
    <td colspan="2" style="padding:0">&nbsp;</td>
    <td bgcolor="#CCCCCC" style="border:1px solid #aaa;border-right:0;text-align:center; padding:0; color:#000;">
    <p style="margin:5px 0; color:#000; font-size:13px; font-family:arial,sans-serif;">Net Amount</p>
    </td>
    <td style="border:1px solid #aaa;border-left:0;background:#ccc;padding:0; color:#000;">
    <p style="font-size:16px;margin:5px 0; font-family:arial,sans-serif; color:#000;"><strong style="color:#333">$'.$booking_details['grand_total'].'</strong></p>
    </td>
    </tr>

    </table>
    </td>
    </tr>

    <tr>
    <td align="center"><a href="'.$base_url.'/mytrips" style="color:#139ABC;text-decoration:none;margin:20px 0 0; font-size:13px; display:block; font-family:arial,sans-serif;" target="_blank">View reservation details</a></td>
    </tr>

    <tr>
    <td align="center"><h3 style="font-size:16px;font-weight:600; text-align:center;margin:10px;font-family:arial,sans-serif; color:#000;">Reservation confirmation</h3></td>
    </tr>

    <tr>
    <td>
    <p style="text-align:left; font-size:12px; font-family:arial,sans-serif; color:#000;">Congratulations '.ucfirst($travellername).',<br />
    Your reservation for '.$_SESSION['order']['title'].' on '.$ArriveAtDate.' is paid and confirmed. We encourage you to be in touch with '.trim(ucfirst($Provider_name)).' prior to your arrival to give him more details.</p>

    <p style="text-align:left; font-size:12px; font-family:arial,sans-serif; color:#000;">You can view your reservation summary <a href="'.$base_url.'/mytrips" style="color:#139ABC;text-decoration:none;" target="_blank">by clicking here</a></p>

    <p style="text-align:left; font-size:12px; font-family:arial,sans-serif; color:#000;"> We encourage you to stay in touch with '.trim(ucfirst($Provider_name)).' via email or phone.  </p>
    </td>
    </tr>

    <tr>
    <td><p style="text-align:left; font-size:12px; font-family:arial,sans-serif; color:#000;">Cheers,</p></td>
    </tr>

    <tr>
    <td><p style="text-align:left; font-size:12px; font-family:arial,sans-serif;">The Gloobers team</p></td>
    </tr>

    <tr>
    <td>
    <p style="text-align:left; font-size:12px; font-family:arial,sans-serif;">
    <img src="http://gloobers.com/sites/all/themes/gloobers_new/images/signature.png" alt="Gloobers::Be friendly. Travel for free" title="Gloobers::Be friendly. Travel for free" />
    </p>
    </td>
    </tr>
    </td>
    </tr>

    </table>
    </table>';

    $module = 'listing';
    $key = 'message_to_traveller_confirmation';
    $to_email = trim($traveller->mail);
    //$to_email = 'mamgaind@yahoo.com';
    $subject = 'Booking Confirmation:' . $_SESSION['order']['title'];
    $send_mail_traveller =sendNotificationEmail($module, $key, $to_email, $subject, $title, $body);
    
    //Mail Send To Listing Provider(Owner).
    $owner_commission=100-variable_get('commission');
    $amount_without_tax=$booking_details['grand_total']-$_SESSION['serviceTaxAmt']; 
    $amount_to_owner=round(($amount_without_tax*$owner_commission)/100,2);
    
    $title = '';
    $body='<table width="650" border="1" bordercolor="#ccc" cellspacing="0" cellpadding="0" align="center" style="collapse;table-layout: fixed; padding:5px;">

    <tr>
    <td>

    <table bgcolor="#FFFFFF" width="100%" cellspacing="0" cellpadding="0" style="font-size:13px; color:#000; line-height:normal; text-align:center;margin:auto; padding:0px;">
    <tr>
    <td align="center" valign="top"><img src="http://gloobers.com/sites/all/themes/gloobers2/images/logo.png" alt="Gloobers::Be friendly. Travel for free" title="Gloobers::Be friendly. Travel for free" width="300" /></td>
    </tr>

    <tr>
    <td>
    <table cellspacing="0" cellpadding="0" align="center" width="100%" style="border-collapse:collapse;">
    <tr>
    <td valign="middle" align="center" bgcolor="#000000" width="40%" style="padding:0; border:1px solid #aaa;"  background="'.$src.'">
    <h3 style="color:#fff; font-weight:400;text-shadow:3px 1px 2px #333; font-family:arial,sans-serif; font-size:16px; margin:0"><center>'.$_SESSION['order']['title'].'</center></h3>
    <p style="color:#fff; font-family:arial,sans-serif; font-size:13px; font-weight:400; text-shadow:1px 1px 1px #333; margin:0px 0 10px"><center style="color:#fff; font-size:13px; font-family:arial,sans-serif; ">'.$_SESSION['order']['country'].'</center></p>
    </td>

    <td width="20%" align="center" valign="middle" style="padding:5px; border:1px solid #aaa;">
    <img width="63" height="62" src="'.$traveller_DpImage_path.'" alt="" title="" style="border-radius:100px; -webkit-border-radius:100px; -ms-border-radius:100px; border-radius:100px; width:62px; height:62px;" />
    <p style="color:#000; font-family:arial,sans-serif; font-size:13px; text-align:center;"><strong>'.$travellername.'</strong><br />
    '.$traveller_location.'<br />

    <a href="mailto:'.($traveller->mail).'" style="color:#139ABC; font-size:13px; text-decoration:none;" target="_blank">'.($traveller->mail).'</a></p>
    </td>

    <td width="20%" valign="middle" align="center" style="padding:5px;border:1px solid #aaa; color:#000;">
    <center><p style="color:#000; font-family:arial,sans-serif; font-size:13px; "><strong>Arrives on</strong><br />
    '.$ArriveAtDate.'<br />
    '.$ArriveAtTime.'</p></center>
    </td>

    <td width="20%" valign="middle" align="center" style="padding:5px;border:1px solid #aaa; color:#000;">
    <p style="color:#000; font-family:arial,sans-serif; font-size:13px;"><strong>'.$Travelers_title.'</strong><br />
    '.$strQty.'</p>
    </td>
    </tr>

    <tr>  
    <td colspan="2" style="padding:0">&nbsp;</td>
    <td bgcolor="#CCCCCC" style="border:1px solid #aaa;border-right:0;text-align:center; padding:0; color:#000;">
    <p style="margin:5px 0; font-family:arial,sans-serif; font-size:13px; color:#000;">Net Amount</p>
    </td>
    <td bgcolor="#CCCCCC" style="border:1px solid #aaa;border-left:0;padding:0; color:#000;">
    <p style="font-size:16px; font-family:arial,sans-serif; margin:5px 0; color:#000;"><strong style="color:#333">$'.$booking_details['grand_total'].'</strong></p>
    </td>
    </tr>
    </table>
    </td>
    </tr>
    <tr>
    <td align="center"><a href="'.$base_url.'/bookings?search_filter='.$listingId.'" style="color:#139ABC; font-family:arial,sans-serif; text-decoration:none; margin:20px 0 0; font-size:13px; display:inline-block;" target="_blank">View reservation details</a></td>
    </tr>
    <tr>
    <td align="center"><h3 style="font-size:16px; font-family:arial,sans-serif; font-weight:600;margin:10px 0; color:#000;">Cheer up, you just received a new reservation !</h3></td>
    </tr>

    <tr>
    <td>
    <p style="text-align:left; font-family:arial,sans-serif; font-size:12px; color:#000;">Good news '.ucfirst($Provider_name).',<br />
    You just received a new reservation for your listing '.$_SESSION['order']['title'].'. This reservation is confirmed and paid, the net amount of : $'.$amount_to_owner.' will be issued to your account on '.$Arrive_After_One_day.'.</p>

    <p style="text-align:left; font-family:arial,sans-serif; font-size:12px; color:#000;">You can view this reservation details in your <a href="'.$base_url.'/bookings?booking_status=upcoming_reservation" style="color:#139ABC;text-decoration:none;" target="_blank">upcoming reservations</a></p>

    <p style="text-align:left; font-size:12px; font-family:arial,sans-serif; color:#000;">  We encourage you to stay in touch with '.ucfirst($travellername).' via email or phone.   </p>
    </td>
    </tr>

    <tr>
    <td><p style="text-align:left; font-size:12px; font-family:arial,sans-serif; color:#000;">Cheers,</p></td>
    </tr>

    <tr>
    <td><p style="text-align:left; font-size:12px; font-family:arial,sans-serif;">The Gloobers team</p></td>
    </tr>

    <tr>
    <td>
    <p style="text-align:left; font-family:arial,sans-serif;">
    <img src="http://gloobers.com/sites/all/themes/gloobers_new/images/signature.png" alt="Gloobers::Be friendly. Travel for free" title="Gloobers::Be friendly. Travel for free" />
    </p>
    </td>
    </tr>
    </td>
    </tr>

    </table>
    </table>';


    $module = 'listing';
    $key = 'Message_Listing_provider';
    $to_email = trim($Provider_data->mail);    
    
    $subject = 'Booking Confirmation:' . $_SESSION['order']['title'];
    $send_email =sendNotificationEmail($module, $key, $to_email, $subject, $title, $body);
   
    //Mail and notification Send To Advisor if Exists
    
    if(!empty($advisorId) || !empty($ruid)){
     if($ruid != $user->uid){
        $advisorId=($advisorId)?$advisorId:$ruid;
        $advisior_data = user_load($advisorId);
        if(!empty($advisior_data->field_first_name['und'][0]['value'])){
            $advisor_name =  $advisior_data->field_first_name['und'][0]['value'];
        }

        $credit_gloobies=variable_get('credit_value_per_booking_throught_recommendation_link');
        
        $title = '';
        $body='<tr><td style="font-family:sans-serif, Arial, Helvetica, \'lucida_sansregular\' ;font-size:14px;color:#000;line-height:24px;background:url('.$src.') no-repeat center;background-size:80%;text-align:center"><img src="'.$traveller_DpImage_path.'" alt="" title="" style="border-radius:100%;border:2px solid #efefef;width:100px;height:100px;margin:40px 0 0" width="100" height="100" /><h3 style="color:#fff;font-weight:bold;text-shadow:3px 1px 2px #333;font-size:20px;margin:20px 0 0;text-align:center">'.$_SESSION['order']['title'].'</h3><p style="color:#fff;font-weight:400;text-shadow:1px 1px 1px #333;margin:0px 0 10px;text-align:center">'.$_SESSION['order']['country'].'</p></td></tr>
        <tr><td style="font-family:sans-serif, Arial, Helvetica, \'lucida_sansregular\' ;font-size:14px;color:#000;line-height:24px;text-align:center"><p style="text-align:center"><a href="'.$base_url.'/dashboard" style="color:#139ABC;text-decoration:none;text-align:center" target="_blank">View in my dashboard</a></p></td></tr>
        <tr><td style="font-family:sans-serif, Arial, Helvetica, \'lucida_sansregular\' ;font-size:14px;color:#000;line-height:24px;text-align:center"><h3 style="font-size:18px;font-weight:600;margin:10px 0;text-align:center">'.ucfirst($travellername).' followed your recommendation !</h3></td></tr>
        <tr><td style="font-family:sans-serif, Arial, Helvetica, \'lucida_sansregular\' ;font-size:14px;color:#000;line-height:24px;"><p style="text-align:left">Good news '.ucfirst($advisor_name).',<br />
        Your friend '.ucfirst($travellername).' followed your recommendation. As soon as s/he will execute her/his trip, your wallet will be credited of '.$credit_gloobies.' gloobies. This amount is now pending in your account, it should be credited to your wallet on '. $Arrive_After_One_day.'.</p><p style="text-align:left">You can see this pending recommendation in your <a href="'.$base_url.'/advice/my_request" style="color:#139ABC;text-decoration:none;" target="_blank">Dashboard</a><span style="color:#139ABC">&gt;</span><a href="#" style="color:#139ABC;text-decoration:none;" target="_blank">Pending recommendations</a></p></td></tr>';
        $module = 'listing';
        $key = 'booking_from_advisor_id';
        $to_email = trim($advisior_data->mail);
        //$to_email = 'testing.testing139@gmail.com';
        $subject = 'Booking Confirmation:' . $_SESSION['order']['title'];
        $send_email =sendNotificationEmail($module, $key, $to_email, $subject, $title, $body);
        $query = db_insert('gbl_notifications')
                ->fields(array('recipient_id'=>$advisorId,'sender_id'=>$user->uid,'post_type'=>'messages','noti_msg'=>'<b>'.$_SESSION['order']['title'].' </b>has been booked by '.$travellername.' from your advised listing.','notification_time'=> time()))
                ->execute();
} }
    //Mail and notification send TO Recommender if Exists
    /* if(!empty($ruid)){
        $ruid_data = user_load($ruid);
        if(!empty($ruid_data->field_first_name['und'][0]['value'])){
            $ruid_name =  $ruid_data->field_first_name['und'][0]['value'];
        }
        $title = 'Hello ' . ucfirst($ruid_name) . ',<br/>';
        $body = '<p>' . ucfirst($travellername) .' has booked your listing that you have advised- <b>' . $_SESSION['order']['title'] . '</b></p><p>You will get credits because you have recommended this listing to '.ucfirst($travellername).'. So as traveller will arrive on event then you will get credits.</p>
                        <p><b>Guest Name: </b>' . ucfirst($travellername) . '</p>
                        <p><b>Amount Paid  : $</b>'.$booking_details['grand_total'].'</p>';
        $module = 'listing';
        $key = 'message_to_recommender_booking_confirmation';
        $to_email = trim($ruid_data->mail);
        $subject = 'Booking Confirmation:' . $_SESSION['order']['title'];
        $send_email =sendNotificationEmail($module, $key, $to_email, $subject, $title, $body);
        if($send_email){
            drupal_set_message(t('Mail sent successfully.'));
        }
         $query = db_insert('gbl_notifications')
                ->fields(array('recipient_id'=>$ruid,'sender_id'=>$user->uid,'post_type'=>'messages','noti_msg'=>$travellername.' has been booked your recommended listing.','noti_url'=>'bookings','notification_time'=> time()))
                ->execute(); 
    } */
    return true;
}

function mailSendtoProviderTravellerAutomatic($bookId) {
   
    global $user;
    $bookingId=arg(2);
    $booking_details = getbookingdata($bookingId);
    $overviewData = getOverviewData($_SESSION['order']['eid']);
    $provider = user_load($overviewData["uid"]);
    $query = db_select('gbl_experience_list','f');
    $query->fields('f',array('uid'));
    $query->condition('eid',$booking_details['lid']);
    $result4=$query->execute();
    $advisior=$result4->fetchField(); 
    $advisior_data = user_load($advisior);
    if (!empty($provider->field_first_name)) {
        $providename = $provider->field_first_name['und'][0]['value'] . "  " . $provider->field_last_name['und'][0]['value'];
    } else {
        $providename = $provider->name;
    }

    if(!empty($advisior_data ->field_first_name['und'][0]['value'])){

        $provider_name =  $advisior_data->field_first_name['und'][0]['value'] ." ". $advisior_data->field_last_name['und'][0]['value'];
    }

    
     //Mail Send to advisior

    $title = 'Hello '.ucfirst($provider_name).',<br/>';
    $body = '<p>' .trim($_SESSION['traveller']['firstname'])." ".trim($_SESSION['traveller']['lastname']).' has booked your deal - <b>' .$_SESSION['order']['title'].'</b></p><p><b>Guest Name: </b>' . $_SESSION['traveller']['firstname'] . " " . $_SESSION['traveller']['lastname'].'</p><p><b>Arrival Date: </b>'.$booking_details['arrive_at_date'] . '</p><p><b>Arrival Time : </b>'.$booking_details['arrive_at_time'].'</p><p><b>Amount Paid  : $</b>'.$booking_details['grand_total'].'</p>';
    $module = 'listing';
    $key = 'message_to_provider_booking_confirmation';
    $to_email = trim($advisior_data->mail);
    $subject = 'Booking Confirmation:' . $overviewData['title'];
    $send_email =sendNotificationEmail($module, $key, $to_email, $subject, $title, $body);
    if($send_email){
        drupal_set_message(t('Mail sent successfully.'));
    }

    /* Mail Send to Traveller */
    $traveller = user_load($user->uid);
    if (!empty($traveller->field_first_name)) {
        $travellername = $traveller->field_first_name['und'][0]['value'] . "  " . $traveller->field_last_name['und'][0]['value'];
    } else {
        $travellername = $traveller->name;
    }
    $title = 'Hello '.ucfirst($travellername) . ',<br/>';
    $body = '<p>Your Booking has been confirmed for - <b>'.$_SESSION['order']['title'].'</b></p><p><b>Guest Name:</b>'.$_SESSION['traveller']['firstname']." " . $_SESSION['traveller']['lastname'].'</p><p><b>Arrival Date:</b>' . $booking_details['arrive_at_date'] .'</p><p><b>Arrival Time  : </b>'.$booking_details['arrive_at_time'].'</p><p><b>Amount Paid  : $</b>'.$booking_details['grand_total'].'</p>';
    $module = 'listing';
    $key = 'message_to_traveller_confirmation';
    $to_email = trim($traveller->mail);
    $subject = 'Booking Confirmation:' . $_SESSION['order']['title'];
    $send_mail_traveller =sendNotificationEmail($module, $key, $to_email, $subject, $title, $body);    
}
function mailSendtoProviderTraveller() {
   session_start();    
    global $user,$base_url;
    $bookId=arg(2);
    //echo $bookId;exit;
    $booking_details = getbookingdata($bookId);
    $quantity_details=unserialize($booking_details['quantity_details']);
    // Traveller data in string format
    $qtyC=1;
    $strQty='';$Travelers_title ="Items";
    foreach($quantity_details as $key=>$val){
        if(sizeof($quantity_details)==$qtyC){$Comma='';}else{$Comma=', ';}
        $strQty .= $val['qty'].' '.$key.$Comma;
        $qtyC++;
    }

    if (array_key_exists('Adult', $quantity_details) || array_key_exists('Child', $quantity_details)) {
    $Travelers_title ="Travelers";
    }
    //End
    $listingId=$booking_details['lid'];
    $overviewData = getOverviewData($listingId);
    $photosData = getPhotosData($listingId);
    if(!empty($photosData)){
        $Listing_photo=unserialize($photosData[0]['value1']);
        $listingImage_fid=$Listing_photo['fid'];
        $listingImage = file_load($listingImage_fid);
        $listingImage_imgpath = $listingImage->uri;
        $listing_style = "new-reservation";
        $src = image_style_url($listing_style, $listingImage_imgpath);
    }else{
        $src=$base_url.'/sites/all/themes/gloobers_new/images/listing_img.jpg';
    }
   //Mail Send To Traveller
   $traveller = user_load($user->uid);
    //get $traveller  location//
    $query=db_select('gbl_user_passeport','gup');
    $query->fields('gup',array('location'));
    $query->condition('uid',$user->uid);
    $query->condition('description','I live there');
    $result1=$query->execute();
    $traveller_location=$result1->fetchField();

    $traveller_DpID=$traveller->picture->fid;
    if ($traveller->picture != ""){
        $traveller_file = file_load($traveller_DpID);
        $traveller_file_imgpath = $traveller_file->uri;
        $traveller_style = "new-reservation";
        $traveller_DpImage_path=image_style_url($traveller_style, $traveller_file_imgpath);
        $traveller_DpImage= '<img class="img-circle size-img" src="'.image_style_url($traveller_style, $traveller_file_imgpath).'" style="border-radius:100%;width:100px;height:100px;border:none">';
    }else{
        $traveller_DpImage_path=$base_url.'/'.drupal_get_path('theme', $GLOBALS['theme']). '/images/no-profile-male-img.jpg';
      
        $traveller_DpImage=  '<img src="'. base_path().drupal_get_path('theme', $GLOBALS['theme']). '/images/no-profile-male-img.jpg" class="img-circle size-img" style="border-radius:100%;width:100px;height:100px;border:none"/>';
    }
    
    if(!empty($traveller->field_first_name['und'][0]['value'])){
        $traveller_name =  ucfirst($traveller->field_first_name['und'][0]['value']). "  " .ucfirst($traveller->field_last_name['und'][0]['value']);
    }else{
        $traveller_name = $traveller->name;
    }

    /* Providor Data */
    $query = db_select('gbl_experience_list','f');
    $query->fields('f',array('uid'));
    $query->condition('eid',$listingId);
    $result4=$query->execute();
    $Provider=$result4->fetchField(); 
    $Provider_data = user_load($Provider);
    if(!empty($Provider_data ->field_first_name['und'][0]['value'])){
        $Provider_name =  $Provider_data->field_first_name['und'][0]['value']. "  " . ucfirst($Provider_data->field_last_name['und'][0]['value']);
    }else{
        $Provider_name = $Provider_data->name;
    }

     $Provider_DpID=$Provider_data->picture->fid;
    if ($Provider_data->picture != ""){
        $Provider_file = file_load($Provider_DpID);
        $Provider_file_imgpath = $Provider_file->uri;
        $Provider_style = "new-reservation";
        $Provider_DpImage_path=image_style_url($Provider_style, $Provider_file_imgpath);
        $Provider_DpImage= '<img class="img-circle size-img" src="'.image_style_url($Provider_style, $Provider_file_imgpath) . '" style="border-radius:100%;width:100px;height:100px;border:none">';
    }else{
        $Provider_DpImage_path=$base_url.'/'.drupal_get_path('theme', $GLOBALS['theme']) . '/images/no-profile-male-img.jpg';
        $Provider_DpImage=  '<img src="' . base_path().drupal_get_path('theme', $GLOBALS['theme']) . '/images/no-profile-male-img.jpg" class="img-circle size-img"  style="border-radius:100%;width:100px;;height:100px;border:none"/>';
    }

    $query=db_select('gbl_user_passeport','gup');
    $query->fields('gup',array('location'));
    $query->condition('uid',$Provider);
    $query->condition('description','I live there');
    $result1=$query->execute();
    $Provider_location=$result1->fetchField();    

    /* End Providor Data */
    $title = '';
    $ArriveAtDate = date("d/m/Y", strtotime($booking_details['arrive_at_date']));
    $Arrive_After_One_day = date('d/m/Y', strtotime($booking_details['arrive_at_date'] . ' +1 day'));
    $ArriveAtTime=date("g:i A", strtotime($booking_details['arrive_at_time']));

    $body='<table width="650" border="1" bordercolor="cccccc" cellspacing="0" cellpadding="0" align="center" style="border-collapse: collapse;table-layout: fixed; Margin-left: auto; Margin-right: auto; padding:5px; font-family:arial,sans-serif;">
    <tr>
    <td>
    <table align="center" bgcolor="#FFFFFF" width="100%" cellspacing="0" cellpadding="0" style="font-size:13px; color:#000; line-height:normal; text-align:center;margin:auto; padding:0px;">
    <tr>
    <td align="center" valign="top"><img src="http://gloobers.com/sites/all/themes/gloobers2/images/logo.png" alt="Gloobers::Be friendly. Travel for free" title="Gloobers::Be friendly. Travel for free" width="300" /></td>
    </tr>
    <tr>
    <td>
    <table cellspacing="0" cellpadding="0" align="center" width="100%" style="border-collapse:collapse;">
    <tr>
    <td bgcolor="#000000" align="center" width="40%" background="'.$src.'" style="padding:0; border:1px solid #aaa; vertical-align:middle;">
    <h3 style="color:#fff;font-weight:400; font-family:arial,sans-serif; text-shadow:3px 1px 2px #333;font-size:16px; margin:0"><center>'.$overviewData['title'].'</center></h3>
    <p style="color:#fff;font-weight:400; text-align:center; font-size:13px; font-family:arial,sans-serif; text-shadow:1px 1px 1px #333;margin:0px 0 10px">'.$overviewData['country'].'</p>
    </td>
    <td width="20%" align="center" valign="middle" style="padding:5px; border:1px solid #aaa; color:#000;">
    <img width="63" height="62" src="'.$Provider_DpImage_path.'" alt="" title="" style="border-radius:50%;width:63px;height:62px;" />
    <p style="color:#000; text-align:center; font-family:arial,sans-serif; font-size:13px;"><strong>'.ucfirst($Provider_name).'</strong><br />'.$Provider_location.'<br />
    <a href="mailto:'.($Provider_data->mail).'" style="color:#139ABC; font-size:13px; text-decoration:none; font-family:arial,sans-serif;" target="_blank">'.$Provider_data->mail.'</a></p>
    </td>
    <td width="20%"  align="center" valign="middle" style="padding:5px; border:1px solid #aaa; color:#000;">
    <p style="color:#000; font-size:13px; font-family:arial,sans-serif;"><strong>Arrives on</strong><br />
    '.$ArriveAtDate.'<br />
    '.$ArriveAtTime.'</p>
    </td>

    <td width="20%"  align="center" valign="middle" style="padding:5px; border:1px solid #aaa; color:#000;">
    <p style="color:#000; font-family:arial,sans-serif; font-size:13px;"><strong>'.$Travelers_title.'</strong><br />
    '.$strQty.'</p>
    </td>
    </tr>
    <tr>  
    <td colspan="2" style="padding:0">&nbsp;</td>
    <td bgcolor="#CCCCCC" style="border:1px solid #aaa;border-right:0;text-align:center; padding:0; color:#000;">
    <p style="margin:5px 0; color:#000; font-size:13px; font-family:arial,sans-serif;">Net Amount</p>
    </td>
    <td style="border:1px solid #aaa;border-left:0;;background:#ccc;padding:0; color:#000;">
    <p style="font-size:16px;margin:5px 0; font-family:arial,sans-serif; color:#000;"><strong style="color:#333">$'.$booking_details['grand_total'].'</strong></p>
    </td>
    </tr>
    </table>
    </td>
    </tr>
    <tr>
    <td align="center"><a href="'.$base_url.'/mytrips" style="color:#139ABC;text-decoration:none;margin:20px 0 0; display:block; font-family:arial,sans-serif;" font-size:13px; target="_blank">View reservation details</a></td>
    </tr>
    <tr>
    <td align="center"><h3 style="font-size:16px;font-weight:600;margin:10px;font-family:arial,sans-serif; color:#000;">Reservation confirmation</h3></td>
    </tr>
    <tr>
    <td>
    <p style="text-align:left; font-size:12px; font-family:arial,sans-serif; color:#000;">
    Congratulations '.ucfirst($traveller_name).',<br /> Your reservation for '.$overviewData['title'].' on '.$ArriveAtDate.' is paid and confirmed. We encourage you to be in touch with '.ucfirst($Provider_name).' prior to your arrival to give him more details.
    </p>

    <p style="text-align:left; font-size:12px; font-family:arial,sans-serif; color:#000;">You can view your reservation summary <a href="'.$base_url.'/mytrips" style="color:#139ABC;text-decoration:none;" target="_blank">by clicking here</a></p>

    <p style="text-align:left; font-size:12px; font-family:arial,sans-serif; color:#000;"> We encourage you to stay in touch with '.ucfirst($Provider_name).' via email or phone.  </p>
    </td>
    </tr>

    <tr>
    <td><p style="text-align:left; font-size:12px; font-family:arial,sans-serif; color:#000;">Cheers,</p></td>
    </tr>

    <tr>
    <td><p style="text-align:left; font-size:12px; font-family:arial,sans-serif;">The Gloobers team</p></td>
    </tr>

    <tr>
    <td>
    <p style="text-align:left; font-size:12px; font-family:arial,sans-serif;">
    <img src="http://gloobers.com/sites/all/themes/gloobers_new/images/signature.png" alt="Gloobers::Be friendly. Travel for free" title="Gloobers::Be friendly. Travel for free" />
    </p>
    </td>
    </tr>
    </td>
    </tr>

    </table>
    </table>';

    $module = 'listing';
    $key = 'message_to_traveller_confirmation';
    $to_email = $traveller->mail;
    $subject = 'Booking Confirmation:'.$overviewData['title'];
    $send_mail_traveller =sendNotificationEmail($module, $key, $to_email, $subject, $title, $body);
    //END   
   
    
    //Mail Send To Listing Provider(Owner).
    $owner_commission=100-variable_get('commission');
    $amount_without_tax=$booking_details['grand_total']-$_SESSION['serviceTaxAmt']; 
    $amount_to_owner=round(($amount_without_tax*$owner_commission)/100,2); 
    $title = '';

    $body='<table width="650" border="1" bordercolor="#ccc" cellspacing="0" cellpadding="0" align="center" style="collapse;table-layout: fixed; padding:5px;">
    <tr>
    <td>
    <table bgcolor="#FFFFFF" width="100%" cellspacing="0" cellpadding="0" style="font-size:13px; color:#000; line-height:normal; text-align:center;margin:auto; padding:0px;">
    <tr>
    <td align="center" valign="top"><img width="300" src="http://gloobers.com/sites/all/themes/gloobers2/images/logo.png" alt="Gloobers::Be friendly. Travel for free" title="Gloobers::Be friendly. Travel for free" width="300" /></td>
    </tr>

    <tr>
    <td>
    <table cellspacing="0" cellpadding="0" align="center" width="100%" style="border-collapse:collapse;">
    <tr>
    <td  valign="middle" align="center" bgcolor="#000000" width="40%" style="padding:0; border:1px solid #aaa;"  background="'.$src.'">
    <h3 style="color:#fff; font-weight:400;text-shadow:3px 1px 2px #333; font-family:arial,sans-serif; font-size:16px; margin:0"><center>'.$overviewData['title'].'</center></h3>
    <p style="color:#fff; font-family:arial,sans-serif; font-size:13px; font-weight:400; text-shadow:1px 1px 1px #333; margin:0px 0 10px"><center style="color:#fff; font-size:13px; text-align:center; font-family:arial,sans-serif;">'.$overviewData['country'].'</center></p>
    </td>
    <td width="20%" align="center" valign="middle" style="padding:5px; border:1px solid #aaa;">
    <img width="63" height="62" src="'.$traveller_DpImage_path.'" alt="" title="" style="border-radius:100px; -webkit-border-radius:100px; -ms-border-radius:100px; border-radius:100px; width:62px; height:62px;" />
    <p style="color:#000; font-family:arial,sans-serif; font-size:13px; text-align:center;"><strong>'.ucfirst($traveller_name).'</strong><br />
    '.$traveller_location.'<br />
    <a href="mailto:'.($traveller->mail).'" style="color:#139ABC; font-size:13px; text-decoration:none;" target="_blank">'.($traveller->mail).'</a></p>
    </td>

    <td width="20%" valign="middle" align="center" style="padding:5px;border:1px solid #aaa; color:#000;">
    <p style="color:#000; font-family:arial,sans-serif; font-size:13px; "><strong>Arrives on</strong><br />
    '.$ArriveAtDate.'<br />'.$ArriveAtTime.'</p>
    </td>

    <td width="20%" valign="middle" align="center" style="padding:5px;border:1px solid #aaa; color:#000;">
    <p style="color:#000; font-family:arial,sans-serif; font-size:13px;"><strong>Travelers</strong><br />
    '.$strQty.'</p>
    </td>
    </tr>
    <tr>  
    <td colspan="2" style="padding:0">&nbsp;</td>
    <td bgcolor="#CCCCCC" style="border:1px solid #aaa;border-right:0;text-align:center; padding:0; color:#000;">
    <p style="margin:5px 0; font-family:arial,sans-serif; font-size:13px; color:#000;">Net Amount</p>
    </td>
    <td bgcolor="#CCCCCC" style="border:1px solid #aaa;border-left:0;padding:0; color:#000;">
    <p style="font-size:16px; font-family:arial,sans-serif; margin:5px 0; color:#000;"><strong style="color:#333">$'.$booking_details['grand_total'].'</strong></p>
    </td>
    </tr>

    </table>
    </td>
    </tr>

    <tr>
    <td align="center"><a href="'.$base_url.'/bookings?search_filter='.$listingId.'" style="color:#139ABC; font-family:arial,sans-serif; text-decoration:none; margin:20px 0 0; font-size:13px; display:inline-block;" target="_blank">View reservation details</a></td>
    </tr>
    <tr>
    <td align="center"><h3 style="font-size:16px; font-family:arial,sans-serif; font-weight:600;margin:10px 0; color:#000;">Cheer up, you just received a new reservation ! </h3></td>
    </tr>

    <tr>
    <td>
    <p style="text-align:left; font-family:arial,sans-serif; font-size:12px; color:#000;">Good news '.ucfirst($Provider_name).',<br />You just received a new reservation for your listing '.$_SESSION['order_title'].'. This reservation is confirmed and paid, the net amount of : $'.$amount_to_owner.' will be issued to your account on '.$Arrive_After_One_day.'</p>

    <p style="text-align:left; font-family:arial,sans-serif; font-size:12px; color:#000;">You can view this reservation details in your <a href="'.$base_url.'/bookings?booking_status=upcoming_reservation" style="color:#139ABC;text-decoration:none;" target="_blank">upcoming reservations</a></p>

    <p style="text-align:left; font-size:12px; font-family:arial,sans-serif; color:#000;"> We encourage you to stay in touch with '.ucfirst($traveller_name).' via email or phone.    </p>
    </td>
    </tr>

    <tr>
    <td><p style="text-align:left; font-size:12px; font-family:arial,sans-serif; color:#000;">Cheers,</p></td>
    </tr>

    <tr>
    <td><p style="text-align:left; font-size:12px; font-family:arial,sans-serif;">The Gloobers team</p></td>
    </tr>

    <tr>
    <td>
    <p style="text-align:left; font-family:arial,sans-serif;">
    <img src="http://gloobers.com/sites/all/themes/gloobers_new/images/signature.png" alt="Gloobers::Be friendly. Travel for free" title="Gloobers::Be friendly. Travel for free" />
    </p>
    </td>
    </tr>
    </td>
    </tr>

    </table>
    </table>';

    $module = 'listing';
    $key = 'Message_Listing_provider';
    $to_email = trim($Provider_data->mail);
    //$to_email = 'testing.testing139@gmail.com';    
    $subject = 'Booking Confirmation:' . $overviewData['title'];
    $send_email =sendNotificationEmail($module, $key, $to_email, $subject, $title, $body);
    //END Mail Send To Listing Provider(Owner).
    drupal_goto('booking/confirmation/'.$bookId);
}

function getbookingdata($bookingId) {

    $query = db_select('gbl_booking', 'bk');
    
    $query->fields('bk')
            ->condition('bk.id', $bookingId);
    $result = $query->execute();
    $res = $result->fetchAssoc();
    return $res;
}
/**
 * Validate Summary Page.
 */
function booking_summary_form_validate($form, &$form_state){

    $data = (object) $form_state['values'];
    
    $CCNo = $data->creditcardno;
    
    $securitycode = $data->securitycode;
    $cardholdername = $data->cardholdername;
    $companyname = $data->companyname;
    $firstname = $data->firstname;
    $lastname = $data->lastname;
    $street = $data->street;
    $number = $data->number;
    $city = $data->city;
    $zip = $data->zip;
    //$state = $data->state;
    if (empty($CCNo)) {
        form_set_error('Message_err', t('Credit Card number is required'));
        return;
    } else if (empty($securitycode)) {
        form_set_error('Message_err', t('Security code is required'));
        return;
    } else if (empty($cardholdername)) {
        form_set_error('Message_err', t('Card holder name code is required'));
        return;
    }else if(!preg_match( '%^[a-zA-Z0-9+#\- /\\\\.\'"]*$%',$street)) {
       form_set_error('Message_err', t('Street field cannot contain special character excluding # and - (hyphen)'));
        return;
    }else if(!preg_match( '%^[a-zA-Z+\- /\\\\.\'"]*$%',$city)) {
       form_set_error('Message_err', t('City field cannot contain special character or number'));
        return;
    }/*else if(!preg_match( '%^[a-zA-Z+\- /\\\\.\'"]*$%',$state)) {
       form_set_error('Message_err', t('State field cannot contain special character or number'));
        return;
    }*/

   if (!valid_email_address($data->email)) {
   form_set_error('Message_err', t('The email address appears to be invalid.'));
   return;
   }

}

function getMaxMinbasePrice() {

    $query = db_select('gbl_experience_list', 'el');
    $query->addExpression('MAX(base_price)', 'maxbaseprice');
    $query->addExpression('MIN(base_price)', 'minbaseprice');
    $result = $query->execute();
    $MaxMinBasePrice = $result->fetchAssoc();
    return $MaxMinBasePrice;
}

function checkOfferApply($offers = array(),$listingResult=array()) {
    //put all offers into valid array
    $availOfferStack = array();
    $allOffers = array();
    
    //filter by position first 24 hours , Last minute and then Early Bird
    foreach($offers as $i=>$offer){
        if($offer['offer_type']=='24 Hour Offer'){
            $allOffers[0] = $offer;
        }else if($offer['offer_type']=='Last Minute'){
            $allOffers[1] = $offer;
        }else{
            $allOffers[2] = $offer;
        }
    }
    ksort($allOffers);
    foreach($allOffers as $i=>$offer){
            
        if($offer['offer_type']=='24 Hour Offer'){
           $availOfferStack =  hours24($offer,$listingResult);
           if(!empty($availOfferStack)){
              break;
           }else{
              continue;
           }
        }else if($offer['offer_type']=='Last Minute'){
           $availOfferStack =  lastMinute($offer,$listingResult);
           if(!empty($availOfferStack)){
              break;
           }else{
              continue;
           }
        }else{
           $availOfferStack =  earlyBird($offer,$listingResult);
           if(!empty($availOfferStack)){
              break;
           }else{
              continue;
           }
        }
    }
    return $availOfferStack;
}
function earlyBirdNew($noofDays,$offer = array()){
    global $base_url;
    //echo "<pre>";Print_r($offer['time_value']);
    $isEarlyBird = 0;
    switch ($offer['time_key']) {
        case 'day':
            if ($noofDays >= $offer['time_value']) {
                $isEarlyBird++;
            }
            break;
        case 'week':
            if (($noofDays * 7)>=$offer['time_value']) {
                $isEarlyBird++;
            }
            break;
        case 'month':
            if (($noofDays * 30)>=$offer['time_value']) {
                $isEarlyBird++;
            }
            break;
    }
    
    return $isEarlyBird;
    $offersStack = array();
    if($isEarlyBird){
        $offersStack['html'] = '<div class="tag early-bird-container-div"> 
            <img src="'.$base_url . '/' . drupal_get_path('theme', $GLOBALS['theme']).'/images/bird.png" alt=" ">
            <p>Early Birds</p>
        </div>';
        $offersStack['offer_type'] = 'Early Birds';
    }
    return $offersStack;
}
function lastMinuteNew($noofDays,$offer = array()){
    global $base_url;
    //echo "<pre>";Print_r($offer['time_value']);
    $isLastMinute = 0;
    switch ($offer['time_key']) {
        case 'day':
            if ($noofDays >= $offer['time_value']) {
                $isLastMinute++;
            }
            break;
        case 'hour':
            if (($noofDays * 24)>=$offer['time_value']) {
                $isLastMinute++;
            }
            break;
    }
    return $isLastMinute;
}
function hourOffer24New($yourDate,$offer=array()){
    global $base_url;
    $availDatesOffer=unserialize($offer['date']);
    $amount=unserialize($offer['amount']);
    $discount_by=unserialize($offer['discount_by']);
    
    //$yourDate='2015-11-4';
    //echo "<pre>";Print_r($availDatesOffer);
    //echo $yourDate;
	$check_date='';
    $yourDate=strtotime($yourDate);
    foreach($availDatesOffer as $key=>$val){
        $val=strtotime($val);
        if($val==$yourDate){
            $check_date='yes'; 
            $SelectedDate=$key;
        }
    }
    //echo $SelectedDate;	
    $availOffer=array();
    if(isset($check_date)){
        $availOffer['amount']=$amount[$SelectedDate];
        $availOffer['disscountby']=$discount_by[$SelectedDate];
        $availOffer['noOffer']='0';
    //  echo "<pre>";Print_r($availOffer);exit;
        return $availOffer;
    }else{
        $availOffer['noOffer']='1';
        return $availOffer;
    }
}

function earlyBird($offer = array(),$listingResult=array()){
    global $base_url;
    
    $eventDate = strtotime($listingResult['startDate']);
    $currentDate = strtotime(date("Y-m-d"));
    
    $diff = abs(($eventDate) - ($currentDate));
    $years = floor($diff / (365*60*60*24));
    $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));
    $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));
    
    $isEarlyBird = false;
    switch ($offer['time_key']) {
        case 'day':
            if ($offer['time_value'] >= $days) {
                $isEarlyBird = true;
            }
            break;
        case 'week':
            if ($offer['time_value'] >=($days * 7)) {
                $isEarlyBird = true;
            }
            break;
        case 'month':
            if ($offer['time_value'] >=($days * 30)) {
                $isEarlyBird = true;
            }
            break;
    }
    
    $offersStack = array();
    if($isEarlyBird){
        $offersStack['html'] = '<div class="tag early-bird-container-div"> 
         
        </div>';
        $offersStack['offer_type'] = 'Early Birds';
    }
    return $offersStack;
}


function lastMinute($offer = array(),$listingResult=array()) {
    global $base_url;
    
    $eventDate = strtotime($listingResult['startDate']);
    $currentDate = strtotime(date("2015-11-08"));
    
    $diff = abs(($eventDate) - ($currentDate));
    $years = floor($diff / (365*60*60*24));
    $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));
    $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));
    
    $isLastMinute = false;
    switch ($offer['time_key']) {
        case 'day':
            if ($offer['time_value'] >= $days && $offer['time_value']<=6) {
                $isLastMinute = true;
            }
            break;
        case 'hour':
            if ($offer['time_value'] >=($days * 24) && $offer['time_value']<=144) {
                $isLastMinute = true;
            }
            break;
    }

    $offersStack= array();
    if ($isLastMinute) {
        $offersStack['html'] ='<div class="tag_last_min last-min-container-div"> 
                  
              </div>';
        $offersStack['offer_type'] = 'Last Minute';
    }
    return $offersStack;
}

function hours24($offer = array(),$listingResult=array()) {
    global $base_url;
    $date = unserialize($offer["date"]);
    $avail_Dates_offer=array();
    foreach($date as $dates){
    $avail_Dates_offer[]=strtotime($dates);
    }
    $datetime2 = strtotime(date("Y-m-d"));
    //echo "<pre>";Print_r($date);exit;
    if(in_array($datetime2,$avail_Dates_offer)){
        $offersStack['html'] = '<div class="tag_24h 24hours-container-div"> 
            
        </div>';
        $offersStack['offer_type'] = '24 Hour Offer';
    }
    //$datetime1 = strtotime($date['offer_24_hour_offer_date']);
    
    
  /*   $offersStack = array();
    if ($datetime1 == $datetime2) {
        $offersStack['html'] = '<div class="tag_24h 24hours-container-div"> 
            <img src="' . $base_url . '/' . drupal_get_path('theme', $GLOBALS['theme']) . '/images/bird.png" alt=" ">
            <p>24 Hours</p>
        </div>';
        $offersStack['offer_type'] = '24 Hour Offer';
    }  */
    return $offersStack;
}
function hours24New($offer = array(),$listingResult=array()) {
    global $base_url;
    $date = unserialize($offer["date"]);
    $datetime1 = strtotime($date['offer_24_hour_offer_date']);
    $datetime2 = strtotime(date("Y-m-d"));
    
    $offersStack = array();
    if ($datetime1 == $datetime2) {
        $offersStack['html'] = '<div class="tag_24h 24hours-container-div"> 
            <img src="' . $base_url . '/' . drupal_get_path('theme', $GLOBALS['theme']) . '/images/bird.png" alt=" ">
            <p>24 Hours</p>
        </div>';
        $offersStack['offer_type'] = '24 Hour Offer';
    } 
    return $offersStack;
}


function handleRating($value){
    $ratingHtml = '';
    for($i=1;$i<=5;$i++){
      $classReview = ($value >= $i) ? '' : '-o';
      $ratingHtml.= '<i class="fa fa-star'.$classReview.'"></i>';
    }
    return $ratingHtml;
}

/*
@description: Get event for calender with availability of events
*/
        
function getCalenderViewPort(){
    $listid = $_GET['listingId'];
    $_GET['start']=date("Y-m-d");
    $startDate = $_GET['start'];
    $endDate = $_GET['end'];
    $startDateTimeStamp = strtotime($startDate);
    $endDateTimeStamp = strtotime($endDate);
    
    //$scheduleSessionData  = getScheduleSessionDataOnDates($listid,$startDate,$endDate);
    $scheduleSessionData  = getScheduleSessionData($listid);
    $availDates = getAvailbaleDatesForCal($scheduleSessionData);
    
    //select traveller according to pricing details
    //$pricingData = getPricingData($listid);
    $getAvailDateStore = array();
    $getCurrentMonthAvailDates = array();
    
    foreach ($availDates as $key=>$availableList){
        $getDateTimeStamp = strtotime($availableList);
        //check for retrived and recieved timestamp 
        if($getDateTimeStamp>=$startDateTimeStamp && $getDateTimeStamp<=$endDateTimeStamp){
            $dateConvert = date('Y-m-d',$getDateTimeStamp);
            //check if same date not assigning twice to an array
            if (!in_array($dateConvert, $getCurrentMonthAvailDates)) {
                $getCurrentMonthAvailDates[] = $dateConvert;
            }
        }
    }
    

    
    $keyIndex = 0;
    
    //Render all events sessions available for now .
    foreach ($getCurrentMonthAvailDates as $availableList){
        
        $startCalTime = '';
        $endCalTime - '';
        $availTime = get_session_timings($availableList,$listid,'array');
        $repeatPeriodBy  = (isset($availTime['repeatPeriodBy'])) ? $availTime['repeatPeriodBy'] : 'DoNOt';
        $timeSlots  = 0;
        $startTimestamp = '';
        $endTimestamp = '';
        
        switch ($repeatPeriodBy){
            case 'Hourly':
                //convert to minuite
                $timeSlots = ($availTime['repeatEvery']*60*60);
                $startTimestamp = strtotime($availTime['startAvailTime']);
                $endTimestamp = strtotime($availTime['endAvailTime']);
                break;
            case 'Minute':
                //time to minuite
                $timeSlots = ($availTime['repeatEvery']*60);
                $startTimestamp = strtotime($availTime['startAvailTime']);
                $endTimestamp = strtotime($availTime['endAvailTime']);
                break;
            default :
                //full time slots 1 hour each
                $timeSlots = (1*60*60);
                $startTimestamp = strtotime('12:00 AM');
                $endTimestamp = strtotime('11:30 PM');
                break;
        }
        
        //add more timestamp if the calculation goes to negative hance user as been selected next day time from now
        if(($endTimestamp-$startTimestamp)<=0){
            //add one more day to end date ad then calculate with current date.
            $endDateIncrementTo1 = date('Y-m-d H:i',$endTimestamp);  
            $date_new_end = new DateTime($endDateIncrementTo1);
            $date_new_end->modify('+1 day');
            $endDateIncrementTo1 = $date_new_end->format('Y-m-d h:i A');
            $endTimestamp = strtotime($endDateIncrementTo1);
        }
        
        for($t=$startTimestamp ; $t<=$endTimestamp ; $t=($t+$timeSlots)){
           $title =  date('h:i A',$t);
           $startCalTimeFormat = $availableList.'T'.date("H:i:s", $t);
           $endCalTimeFormat = $availableList.'T'.date("H:i:s", $t);
            
           $getAvailDateStore[$keyIndex]['title'] = $title;
           $getAvailDateStore[$keyIndex]['start'] = $startCalTimeFormat;
           $getAvailDateStore[$keyIndex]['end'] = $endCalTimeFormat;
           $keyIndex++;
        }
        //Get time slots accodding to hour,munite,days,week and year
    }
    
    //get available dates for calendar
    echo json_encode($getAvailDateStore);
    die;
    
}

/*
@param: Get all available date for calender and datepicker
 * @return type  an array
 **/
function getAvailbaleDatesForCal($scheduleSessionData){
    $listId = arg(1);
    $availableDate = array();
    if(empty($scheduleSessionData)){
        $scheduleSessionData = getScheduleSessionData($listId);
    }else{
        $scheduleSessionData = $scheduleSessionData;
    }

    $_SESSION['seleted_date_data_pricing']=unserialize($scheduleSessionData[0]['pricingData']);
    /*echo "<pre>";print_r($scheduleSessionData);exit;*/
    if($scheduleSessionData[0]['bookingMode']=='NO_DATE'){

        foreach($scheduleSessionData as $data) {  
          
            $reapeatDaysTime = unserialize($data["reapeatDaysTime"]);
            $availableDate['NO_DATE']= 'NO_DATE'; 
            $new_days_array = array();
            $data['reapeatDaysTime']=unserialize($data['reapeatDaysTime']);
            foreach ($data['reapeatDaysTime'] as $key => $value) {
            $day_weekno = date('N', strtotime($value));
            $new_days_array[]=(($day_weekno == 7) ? 0 : intval($day_weekno));
            }
            $week_days_array = array('0','1','2','3','4','5','6');
            $disable_week=array_diff($week_days_array,$new_days_array);  
            $availableDate['disable_days']=$disable_week;
            $availableDate['enable_days']=$new_days_array;   
                  
        }       

        $mindate =''; $startDate_array = array(); 
        $startDate_array[date("Y-m-d")] = date('N', strtotime(date("Y-m-d")));

        /*create array of one week from current date*/
        for ($i=0; $i<6; $i++){
        $startDate =date("Y-m-d",strtotime($startDate .  '+1 day'));    
        $day_weekno =  date('N', strtotime($startDate));
        $startDate_array[$startDate]=(($day_weekno == 7) ? 0 : $day_weekno);

        }

        /*find min-date in array*/
        foreach ($startDate_array as $key => $value) {
            if(empty($mindate)){
                if(in_array($value, $availableDate['enable_days'])){
                $mindate=$key ;
                }
            }
        }
        /*If min-date is empty set default*/
        if(empty($mindate)){
        $mindate=date("Y-m-d");
        }

        $availableDate['dates'][]=$mindate;

        return $availableDate;

    } else if($scheduleSessionData[0]['bookingMode']=='INVENTORY') {
          

             $new_days_array = array();   
             $data['reapeatDaysTime']=unserialize($scheduleSessionData[0]['reapeatDaysTime']);
             foreach ($data['reapeatDaysTime'] as $key => $value) {
                 $day_weekno = date('N', strtotime($value));
                 $new_days_array[]=(($day_weekno == 7) ? 0 : intval($day_weekno));
             }
             $week_days_array = array('0','1','2','3','4','5','6');
             $disable_week=array_diff($week_days_array,$new_days_array);               
             $availableDate['enable_days']=$new_days_array;


        
         foreach($scheduleSessionData as $data) {
         $ses_Dates = unserialize($data["startDate"]);
        
              foreach ($ses_Dates as $ses_Date){               

                $iDateFrom=mktime(1,0,0,substr($ses_Date['from'],5,2),     substr($ses_Date['from'],8,2),substr($ses_Date['from'],0,4));
                $iDateTo=mktime(1,0,0,substr($ses_Date['to'],5,2),     substr($ses_Date['to'],8,2),substr($ses_Date['to'],0,4));
                
                if ($iDateTo>=$iDateFrom)
                {                 
                    while ($iDateFrom<=$iDateTo)
                    {
                     
                     $todayD=strtotime(date('Y-m-d'));
                       if($iDateFrom>=$todayD){                                                    
                            $day_weekno = date('N', $iDateFrom);                            
                            $day_weekno =(($day_weekno == 7) ? 0 : intval($day_weekno));                                                   
                            
                            if (in_array($day_weekno, $new_days_array)) {
                                $availableDate['dates'][]=date('Y-m-d',$iDateFrom);
                            }    
                        }
                         $iDateFrom+=86400;
                    }
                }               
                
            }  
            
         }   
         
        if($availableDate['dates']==null){
        $availableDate['enable_days']='';
        $availableDate['dates'][]=date("Y-m-d"); 
        }                  
            
        return $availableDate;
        
    } else{
    $i=1;
    foreach($scheduleSessionData as $data) {    

        /*echo "<pre>";print_r($data);exit;*/
        
        $repeatEvery = ($data["repeatEvery"]) ? $data["repeatEvery"] : 1;
        $endRepeatDate = $data["endRepeatDate"]; 
        $ses_Dates = unserialize($data["startDate"]);
        $reapeatDaysTime = unserialize($data["reapeatDaysTime"]);
        switch ($data["repeatPeriodBy"]) {
            case "DoNOt":
                    foreach ($ses_Dates as $ses_Date){
                    $startDate=$ses_Date['from'];
                    $startDate = date("Y-m-d", strtotime($startDate));
                    array_push($availableDate, $startDate);
                    $startDate = date("Y-m-d", strtotime($startDate));
                    $startDate = strtotime($startDate . " +1 day ");
                    $startDate = date("Y-m-d", $startDate); 
                    }
                        
                break;
            case "Daily":
                $avail = array();
                $dates = array();
                $regularArr = array();
                foreach ($reapeatDaysTime as $repeat) {//get all days on which event is repeating
                    $avail[] = $repeat;
                }  
                             
                foreach ($ses_Dates as $ses_Date){

                $stamp = strtotime($ses_Date["from"]);
                $dayNumber = date("z", $stamp); //get date number eg:308
                $yearNumber = date("y", $stamp);
                $yearNo2=date("y", strtotime($ses_Date["to"]));
                $dayNumber2 = date("z", strtotime($ses_Date["to"]));
                
                if($yearNumber == $yearNo2){                    
                    for ($i = $dayNumber; $i <= $dayNumber2; $i++) {
                        $day = date("l", $stamp); //give week day eg:Thursday                       
                        if (in_array($day, $avail)) {
                         
                            if (@$regularArr[$day]) {
                                $regularArr[$day]++;
                            } else {
                                $regularArr[$day] = 1;
                            }
                        
                            if ($repeatEvery > 1) {
                                if (($regularArr[$day] % $repeatEvery) == 1) {
                                     array_push($availableDate, date("Y-m-d", $stamp));
                                }
                            } else {
                                 array_push($availableDate, date("Y-m-d", $stamp));
                            }
                        }
                        $stamp = $stamp + 86400;
                    }
                
                }else{
                
                    for ($i = $dayNumber; $i <= 365; $i++) {
                        $day = date("l", $stamp); //give week day eg:Thursday
                        if (in_array($day, $avail)) {
                            if (@$regularArr[$day]) {
                                $regularArr[$day]++;
                            } else {
                                $regularArr[$day] = 1;
                            }
                        
                            if ($repeatEvery > 1) {
                                if (($regularArr[$day] % $repeatEvery) == 1) {
                                     array_push($availableDate, date("Y-m-d", $stamp));
                                }
                            } else {
                                 array_push($availableDate, date("Y-m-d", $stamp));
                            }
                        }
                        $stamp = $stamp + 86400;
                    }
                    for ($i =1; $i <= $dayNumber2; $i++) {
                        $day = date("l", $stamp); //give week day eg:Thursday
                        if (in_array($day, $avail)) {
                            if (@$regularArr[$day]) {
                                $regularArr[$day]++;
                            } else {
                                $regularArr[$day] = 1;
                            }
                            if($repeatEvery > 1){
                                if(($regularArr[$day] % $repeatEvery) == 1){
                                     array_push($availableDate, date("Y-m-d", $stamp));
                                }
                            } else {
                                 array_push($availableDate, date("Y-m-d", $stamp));
                            }
                        }
                        $stamp = $stamp + 86400;
                    }
                }
            }
                break;
            case "Weekly":
        
                $avail = array();
                $dates = array();
                $regularArr = array();
                foreach ($reapeatDaysTime as $repeat) {//get all days on which event is repeating
                    $avail[] = $repeat;
                }  
                             
                foreach ($ses_Dates as $ses_Date){

                $stamp = strtotime($ses_Date["from"]);
                $dayNumber = date("z", $stamp); //get date number eg:308
                $yearNumber = date("y", $stamp);
                $yearNo2=date("y", strtotime($ses_Date["to"]));
                $dayNumber2 = date("z", strtotime($ses_Date["to"]));
                
                if($yearNumber == $yearNo2){                    
                    for ($i = $dayNumber; $i <= $dayNumber2; $i++) {
                        $day = date("l", $stamp); //give week day eg:Thursday                       
                        if (in_array($day, $avail)) {
                         
                            if (@$regularArr[$day]) {
                                $regularArr[$day]++;
                            } else {
                                $regularArr[$day] = 1;
                            }
                        
                            if ($repeatEvery > 1) {
                                if (($regularArr[$day] % $repeatEvery) == 1) {
                                     array_push($availableDate, date("Y-m-d", $stamp));
                                }
                            } else {
                                 array_push($availableDate, date("Y-m-d", $stamp));
                            }
                        }
                        $stamp = $stamp + 86400;
                    }
                
                }else{
                
                    for ($i = $dayNumber; $i <= 365; $i++) {
                        $day = date("l", $stamp); //give week day eg:Thursday
                        if (in_array($day, $avail)) {
                            if (@$regularArr[$day]) {
                                $regularArr[$day]++;
                            } else {
                                $regularArr[$day] = 1;
                            }
                        
                            if ($repeatEvery > 1) {
                                if (($regularArr[$day] % $repeatEvery) == 1) {
                                     array_push($availableDate, date("Y-m-d", $stamp));
                                }
                            } else {
                                 array_push($availableDate, date("Y-m-d", $stamp));
                            }
                        }
                        $stamp = $stamp + 86400;
                    }
                    for ($i =1; $i <= $dayNumber2; $i++) {
                        $day = date("l", $stamp); //give week day eg:Thursday
                        if (in_array($day, $avail)) {
                            if (@$regularArr[$day]) {
                                $regularArr[$day]++;
                            } else {
                                $regularArr[$day] = 1;
                            }
                            if($repeatEvery > 1){
                                if(($regularArr[$day] % $repeatEvery) == 1){
                                     array_push($availableDate, date("Y-m-d", $stamp));
                                }
                            } else {
                                 array_push($availableDate, date("Y-m-d", $stamp));
                            }
                        }
                        $stamp = $stamp + 86400;
                    }
                }
            }
                break;
            case "MONTHLY":
              
                while(strtotime($startDate) <= strtotime($endRepeatDate)){
                
                    $startDate = date("Y-m-d", strtotime($startDate));  
                    $repeatStartDate = $startDate;                  
                    array_push($availableDate, $startDate);
                    $startDate = $repeatStartDate;
                    $startDate = strtotime($startDate . " +" . $repeatEvery . " month ");   
                    $endDate = strtotime($endDate . " +" . $repeatEvery . " month ");                   
                    $startDate = date("Y-m-d", $startDate);
                }
                break;
            case "YEARLY":
            
            while(strtotime($startDate) <= strtotime($endRepeatDate)){
            
                    $startDate = date("Y-m-d", strtotime($startDate));  
                    $repeatStartDate = $startDate;                  
                    array_push($availableDate, $startDate); 
                    while (strtotime($startDate) < strtotime($endDate)) {
                        $startDate = strtotime($startDate . " + 1 day ");                       
                        $startDate = date("Y-m-d", $startDate);
                        array_push($availableDate, $startDate);     
                    }
                    $startDate = $repeatStartDate;
                    $startDate = strtotime($startDate . " +" . $repeatEvery . " year ");    
                    $startDate = date("Y-m-d", $startDate);
            }
            break;
            case "Hourly":
                while (strtotime($startDate) <= strtotime($endRepeatDate)) {
                    
                    //6april2016
                    $timestamp = strtotime($startDate);
                    $start_day = date('l', $timestamp);
                    $days_arr=array();
                    //29 march 2016//
                    if($repeatPeriodBy="Hourly") {     
                        foreach ($reapeatDaysTime as $key => $time_value) {
                            $days_arr[]=$time_value['on'];  
                        }

                        if(in_array($start_day, $days_arr)) {
                        $startDate = date("Y-m-d", strtotime($startDate));
                        array_push($availableDate, $startDate);                        
                        }  

                    }   else {

                        $startDate = date("Y-m-d", strtotime($startDate));
                        array_push($availableDate, $startDate);   

                    } 
                    //end 6april2016    

                    $startDate = date("Y-m-d", strtotime($startDate));
                    $repeatEvery=1;
                    $startDate = strtotime($startDate . " +" . $repeatEvery . " day ");
                    $startDate = date("Y-m-d", $startDate);
                }
                break;

            default:
            $data["endRepeatDate"]?$data["endRepeatDate"]:'';
            if(($data["endRepeatDate"] !='') && ($data["startDate"] !='')){
                $avail = array();
                $dates = array();
                $regularArr = array();
                foreach ($reapeatDaysTime as $repeat) {//get all days on which event is repeating
                    $avail[] = $repeat['on'];
                }
                $stamp = strtotime($data["startDate"]);
                $dayNumber = date("z", $stamp); //get date number eg:308
                $dayNumber2 = date("z", strtotime($data["endRepeatDate"]));
                for ($i = $dayNumber; $i <= $dayNumber2; $i++) {
                    $day = date("l", $stamp); //give week day eg:Thursday
                    if (in_array($day, $avail)) {
                        if (@$regularArr[$day]) {
                            $regularArr[$day] ++;
                        } else {
                            $regularArr[$day] = 1;
                        }
                       $availableDate[] = date("Y-m-d", $stamp);
                    }
                    $stamp = $stamp + 86400;
                }
            }
            break;
        }
        $i++;
    }
  }
  return $availableDate;
}

function getOrderUpdate(){
    $type=$_REQUEST['type'];
    $label=$_REQUEST['value'];
    $sess=$_REQUEST['sessKey'];
    //echo "<pre>";Print_r($_REQUEST);exit;
    $typeStore = array();
    if($type=='PER_ITEM'){
        unset($_SESSION['order']['item_type'][$label]);
    }else if($type=='PER_PERSON'){
        unset($_SESSION['order']['person_type'][$label]);
    }else if($type=='optional_services'){
        unset($_SESSION['order']['optional_services'][$sess]);
    }
    $typeStore['type'] = $type;
    echo  json_encode($typeStore);
    die;
}
function coming_soon(){

    return theme('coming_soon');
    
}

// 27 Aug 2015 //
function add_listings_results($keys = null) {
    global $user;
    if(!$user->uid){
        drupal_goto('login');
    }
    $filter = array();
    $request_id = base64_decode(arg(2));
    if (arg(1)) {
        $countriesArray = array();
        $prepAddr = str_replace(' ', '+', arg(1));
        $geocode = file_get_contents('http://maps.google.com/maps/api/geocode/json?address=' . $prepAddr . '&sensor=false');

        $output = json_decode($geocode);
        if ($output) {
            $lat = $output->results[0]->geometry->location->lat;
            $filter['lat'] = $lat;
            $long = $output->results[0]->geometry->location->lng;
            $filter['long'] = $long;
            $city = $state_short = $country = $address = $state_long = '';
            foreach ($output->results[0]->address_components as $addressC) {
                if ($addressC->types[0] == "administrative_area_level_2") {
                    $city = $addressC->long_name;
                    $filter['city'] = $city;
                }else if ($addressC->types[0] == "locality") {
                    $location_short = $addressC->short_name;
                    $location_long = $addressC->long_name;
                   
                    $filter['city'] = $location_long;
                }else if ($addressC->types[0] == "administrative_area_level_1") {
                    $state_short = $addressC->short_name;
                    $state_long = $addressC->long_name;
                    $filter['state_short'] = $state_short;
                    $filter['state_long'] = $state_long;
                } else if ($addressC->types[0] == "country") {
                    $country = $addressC->long_name;
                    $filter['country'] = $country;
                } else if ($addressC->types[0] == "sublocality_level_1") {
                    $address = $addressC->long_name;
                    $filter['address'] = $address;
                } else if ($addressC->types[0] == "continent") {
                    $query = db_select('gbl_country_list', 'cl')
                            ->fields('cl', array('country_name'))
                            ->condition('continent', $addressC->long_name, '=');
                    $result = $query->execute();
                    while ($res = $result->fetchAssoc()) {
                        $countriesArray[] = $res['country_name'];
                    }
                    $filter['continent'] = $addressC->long_name;
                }
            }
        }
        $filter["search"] = arg(1);
    }

  
    $listings = getAllListings($filter, 'my_listing', $user->uid);
    $listingCount = getAllListingsCount($filter, 'my_listing', $user->uid, $homeSearch, $countriesArray);
    $experienceType = getExperienceType();
    return theme('add_listings_results', array('experienceType' => $experienceType, 'listingResult' => $listings,'listingResultCount'=>$listingCount));
}

function getexperiencedealtitle($eid){
    global $user;
    $uid=$user->uid;
    $query=db_select('gbl_experience_list' ,'c');
    $query->fields('c',array('title'));
    $query->condition('uid', $uid, '=');
    $query->condition('eid', $eid, '=');
    $result = $query->execute();
    $title=$result->fetchField();
    return $title;
}
function add_listing_to_guide($keys = null) {
    global $user;
    if(!$user->uid){
        drupal_goto('login');
    }
    $filter = array();
    $request_id = base64_decode(arg(2));
    if (arg(1)) {
        $countriesArray = array();
        $prepAddr = str_replace(' ', '+', arg(1));
        $geocode = file_get_contents('http://maps.google.com/maps/api/geocode/json?address=' . $prepAddr . '&sensor=false');

        $output = json_decode($geocode);
        //echo "<pre>";Print_r($output);exit;
        if ($output) {
            $lat = $output->results[0]->geometry->location->lat;
            $filter['lat'] = $lat;
            $long = $output->results[0]->geometry->location->lng;
            $filter['long'] = $long;
            $city = $state_short = $country = $address = $state_long = '';
            //echo "<pre>";Print_r($output->results[0]->address_components);exit;
            foreach ($output->results[0]->address_components as $addressC) {
                if ($addressC->types[0] == "administrative_area_level_2") {
                    $city = $addressC->long_name;
                    $filter['city'] = $city;
                }else if ($addressC->types[0] == "locality") {
                    $location_short = $addressC->short_name;
                    $location_long = $addressC->long_name;
                   
                    $filter['city'] = $location_long;
                }else if ($addressC->types[0] == "administrative_area_level_1") {
                    $state_short = $addressC->short_name;
                    $state_long = $addressC->long_name;
                    $filter['state_short'] = $state_short;
                    $filter['state_long'] = $state_long;
                } else if ($addressC->types[0] == "country") {
                    $country = $addressC->long_name;
                    $filter['country'] = $country;
                } else if ($addressC->types[0] == "sublocality_level_1") {
                    $address = $addressC->long_name;
                    $filter['address'] = $address;
                } else if ($addressC->types[0] == "continent") {
                    $query = db_select('gbl_country_list', 'cl')
                            ->fields('cl', array('country_name'))
                            ->condition('continent', $addressC->long_name, '=');
                    $result = $query->execute();
                    while ($res = $result->fetchAssoc()) {
                        $countriesArray[] = $res['country_name'];
                    }
                    $filter['continent'] = $addressC->long_name;
                }
            }
        }
        $filter["search"] = arg(1);
        //echo "<pre>";Print_r($filter);exit;
    }

  
    $listings = getAllListings($filter, 'my_listing', $user->uid);
    $listingCount = getAllListingsCount($filter, 'my_listing', $user->uid, $homeSearch, $countriesArray);

    $experienceType = getExperienceType();
    return theme('add_listing_to_guide', array('experienceType' => $experienceType, 'listingResult' => $listings,'listingResultCount'=>$listingCount));
}

    /*6 july 2016*/

        function getNewPricingData(){

        session_start();   
        
        if($_POST['time_changes']=='yes'){
        /*unset all sessions when date changed*/
        unset($_SESSION['order']['Mainsubtotal']);
        unset($_SESSION['order']['subtotal']['person_total']);
        unset($_SESSION['order']['subtotal']['item_total']);
        unset($_SESSION['order']['subtotal']);
        unset($_SESSION['order']['person_type']);
        unset($_SESSION['order']['item_type']);
        unset($_SESSION['user_booking_details']);
        $_SESSION['order']['Mainsubtotal']=0;        
    }
         
        $listId = $_POST['listing_id'];
        $Selected_booking_date = $_POST['selected_booking_date'];
        $Selected_booking_time = $_POST['selected_booking_time'];
        $_SESSION['order']['dateNew']=$Selected_booking_date;
        $_SESSION['order']['timeNew']=$Selected_booking_time;
        $Selected_booking_time  = date("H:i", strtotime($Selected_booking_time));
        $Selected_booking_date = date('Y-m-d', strtotime($Selected_booking_date));  
        
        $pricingData=array();
        $result_schedule =db_query("SELECT * FROM `gbl_scheduling` WHERE `listing_id`='$listId'");
        $result_schedule_array=$result_schedule->fetchAll(PDO::FETCH_ASSOC);
       
        $check_date_exist='';$check_time_exist='';$time_range=array(); 
        $edited_price_data='';$status_checked='';        

                /*if price is set for entire date session*/   

                $AlreadyEdited=db_select('gbl_scheduling_sessions_edited','es')->fields('es')->condition('listing_id',$listId)->condition('edited_date',trim($Selected_booking_date))->condition('status',1)->execute();
                $result=$AlreadyEdited->fetchAll(PDO::FETCH_ASSOC); 
               

                if($result){

                  $datePricing=$_SESSION['seleted_date_data_pricing']; 
                  $edited_price_data=unserialize($result[0]['pricingData']);  
                  $status_checked='True'; 
                    
                } else {

                    /*if date is edited then data from edit table*/                                                 
                    $AlreadyEdited=db_select('gbl_scheduling_sessions_edited','es')->fields('es')->condition('listing_id',$listId)->condition('edited_date',trim($Selected_booking_date))->condition('start_time',trim($Selected_booking_time))->execute();
                    $result=$AlreadyEdited->fetchAll(PDO::FETCH_ASSOC); 
                    
                    if($result){

                    $datePricing=$_SESSION['seleted_date_data_pricing']; 
                    $edited_price_data=unserialize($result[0]['pricingData']);   
                    //echo "<pre>";print_r($edited_price_data);exit;

                    }  else {

                    /*if seasonal price added for selected date*/        
                    $result = db_query("SELECT * FROM `gbl_special_price` WHERE  listing_id=" . $listId);
                    $seasonal_result=$result->fetchAll(PDO::FETCH_ASSOC);
                     
                         if(($result->rowCount())>0){

                           //Print_r($seasonal_result);exit;                
                            $session_dt=strtotime($Selected_booking_date);                       

                            foreach($seasonal_result as $key => $val){                        
                            $seasonal_startdates = unserialize($val['from_to_date']);  
                                 
                                if($check_date_exist==''){
                                   
                                    foreach($seasonal_startdates as $key => $seasonal_startdate){ 

                                        if($session_dt>=strtotime($seasonal_startdate['from']) && $session_dt<=strtotime($seasonal_startdate['todate']) ){
                                            $check_date_exist="seasonal_pricing";  
                                            $datePricing=$_SESSION['seleted_date_data_pricing']; 
                                                                 
                                        }  
                                    } 
                                }  
                            }                            
                        }                     
                    
                        if($check_date_exist=='') {          
                                /*Data from main table*/                                
                                 $result_price="gbl_scheduling_sessions";
                                                 
                        } 
                        
                    }   

              } 
                         
        

             /*if seasonal price added for selected date*/                        

            /*if date is edited then data from edit table*/ 

            /*Data from main table*/  

            $result=getScheduleSessionData($listId);
            $session_dt=strtotime($Selected_booking_date); 
            $slectd_wekdy=date('l',$session_dt);       
            $slectd_time= date("g:i A",strtotime($Selected_booking_time)); 

            if($result_price=='gbl_scheduling_sessions'){                                        

                foreach($result as $key => $val){  
                    $datePricing=unserialize($val['pricingData']);                                  
                    /*schudling session result and timings*/                                        
                    $time_range = unserialize($val['startTime']);                                         
                }  

            }   
                         
            
            $pricingDataAll=$datePricing;
          
            $pricingDetail=array();
            switch ($pricingDataAll[0]['price_type']) {
                case 'PER_PERSON':
                    foreach($pricingDataAll as $key=>$val){                        
                        $pricingDetail[$key]['price_option_type']=ucfirst($val['price_option_type']);
                        $pricingDetail[$key]['price']=$val['price'];
                        $pricingDetail[$key]['price_type']=$val['price_type'];
                        $pricingDetail[$key]['quantity_min']=$val['quantity_min'];
                        $pricingDetail[$key]['quantity_max']=$val['quantity_max'];
                       
                        if($time_range){
                            if($pricingDetail[$key]['price_option_type']=='Adult') {
                                if($time_range[$slectd_wekdy][$slectd_time]['amount_perAdult']){
                                $pricingDetail[$key]['price']=$time_range[$slectd_wekdy][$slectd_time]['amount_perAdult'];  
                                }                            
                            } else {
                                if($time_range[$slectd_wekdy][$slectd_time]['amount_perChild']){
                                $pricingDetail[$key]['price']=$time_range[$slectd_wekdy][$slectd_time]['amount_perChild'];  
                                } 

                            }
                        } 
                        /*if price edited*/
                        if($edited_price_data){

                             if($pricingDetail[$key]['price_option_type']=='Adult') {
                                if($edited_price_data['adult_price']){
                                $pricingDetail[$key]['price']=$edited_price_data['adult_price'];
                                }                            
                            } else {
                                if($edited_price_data['child_price']){
                                $pricingDetail[$key]['price']=$edited_price_data['child_price'];
                                } 

                            }                         
                          
                        }
                        
                    }
                break;
                case 'PER_ITEM':
                    
                    foreach($pricingDataAll as $key=>$val){
                        $pricingDetail[$key]['label']=ucfirst($val['label']);
                        $pricingDetail[$key]['price']=$val['price'];
                        $pricingDetail[$key]['quantity_min']=$val['quantity_min'];
                        $pricingDetail[$key]['quantity_max']=$val['quantity_max'];
                        $pricingDetail[$key]['price_type']=$val[0]['price_type'];
                        $pricingDetail[$key]['adults_per_item_min']=$val['adults_per_item_min'];
                        $pricingDetail[$key]['adults_per_item_max']=$val['adults_per_item_max'];
                        $pricingDetail[$key]['child_per_item_min']=$val['child_per_item_min'];
                        $pricingDetail[$key]['child_per_item_max']=$val['child_per_item_max'];
                        
                        if($time_range){
                            if($time_range[$slectd_wekdy][$slectd_time]['amount_perItem']){
                              $pricingDetail[$key]['price']=$time_range[$slectd_wekdy][$slectd_time]['amount_perItem'];  
                            }   
                        } 
                        
                        /*if price edited*/
                        if($edited_price_data){
                          if($edited_price_data['item_price']){
                              $pricingDetail[$key]['price']=$edited_price_data['item_price'];  
                            }                 
                          
                        }                      
                        
                    }
                break;
            }

        $user_booking_details=$_SESSION['user_booking_details'];    
            
        if($check_date_exist=="seasonal_pricing"){
        
            $pricingData_result=array('status' => 'sessional', 'data' =>$pricingDetail,'pricingDetail'=>$seasonal_startdate,'status_checked'=>$status_checked,'user_booking_details'=>$user_booking_details);      
            
        }else{
        
            
            $pricingData_result=array('status' => 'standard', 'data' =>$pricingDetail,'status_checked'=>$status_checked,'status_checked'=>$status_checked,'user_booking_details'=>$user_booking_details);
        }
        //echo "<pre>";Print_r($pricingDetail);exit;
        echo json_encode($pricingData_result);exit;
        
    }

    
    function SavePriceSessionCart() {
    /*
     * @description: isAjax define which type of task to be done like creatingcart with normal values.
     * Or optional services. 1 for storing order information and 2for optional service values to session cart
     */
    $priceType=$_POST['priceType'];
    $person_qty_child=$_POST['person_qty_child'];
    $person_qty_adult=$_POST['person_qty_adult'];
    $person_type_cat=$_POST['persontype'];
    $status_new_val=$_POST['status_new_val'];
    $orderStack = array(
            'price' => $_POST['calculatedPrice'],
            'qty' => $_POST['quantity'],
            'subcat' => $_POST['persontype'],
            'person_qty_adult' => $person_qty_adult, 
            'person_qty_child' => $person_qty_child, 
            'status' => $_POST['status']
        );
        
        if($_POST['status'] == 1){            

            if($priceType=='PER_ITEM'){
                $_SESSION['order']['item_type'][$person_type_cat] = $orderStack;
            }else{
                $_SESSION['order']['person_type'][$person_type_cat] = $orderStack;
            }
        }else{
            unset($_SESSION['order']['person_type'][$person_type_cat]);
            unset($_SESSION['order']['item_type'][$person_type_cat]);
        }
        //Calculate Gross price accroding to each row of order 
        $subTotalPrice = 0;
        $subTotalQty = 0;
        if($priceType=='PER_ITEM'){  

           // 29 march 2016//
            if(empty($_POST['item_boxcase'])) {

                // 22/3/2016          
                $adult_max_val=$_POST['adult_max'];          
                $child_max_val= $_POST['child_max'];            
                $total_adult=$person_qty_adult/$adult_max_val;
                $total_child=$person_qty_child/$child_max_val;        
            

                if(ceil($total_adult)>ceil($total_child)) {
                $item_multiple=ceil($total_adult);
                } else {
                $item_multiple=ceil($total_child); 
                }                      
              

                $item_price=$item_multiple*$_POST['price'];
                $orderStack = array(
                'price' =>  $item_price,
                'qty' => $item_multiple,
                'subcat' => $_POST['persontype'],
                'person_qty_adult' => $person_qty_adult, 
                'person_qty_child' => $person_qty_child, 
                'status' => $_POST['status']
                );

                $_SESSION['order']['item_type'][$person_type_cat] = $orderStack;    
                //end 22/3/2016                

            } // end 29 march 2016//

            foreach ($_SESSION['order']['item_type'] as $personDetails){
                $subTotalPrice = $subTotalPrice + ($personDetails['price']);
                $subTotalQty = $grossQty + $personDetails['qty'];
            }
            $_SESSION['order']['subtotal']['item_total'] = $subTotalPrice;
            $_SESSION['order']['subtotal']['item_qty'] = $subTotalQty;
            $_SESSION['order']['Mainsubtotal']= $subTotalPrice;
        }else{

            if($_SESSION['order']['person_type']['Adult'] && $_SESSION['order']['person_type']['Adult']['qty']=='Select'){
                unset($_SESSION['order']['person_type']['Adult']);
                           }
            if($_SESSION['order']['person_type']['Child'] && $_SESSION['order']['person_type']['Child']['qty']=='Select'){
                unset($_SESSION['order']['person_type']['Child']);
                
            }
            
            foreach($_SESSION['order']['person_type'] as $personDetails){
                $subTotalPrice = $subTotalPrice + ($personDetails['price']);
                $subTotalQty = $grossQty + $personDetails['qty'];
            }
            $_SESSION['order']['subtotal']['person_total'] = $subTotalPrice;
            $_SESSION['order']['subtotal']['person_qty'] = $subTotalQty;
            $_SESSION['order']['Mainsubtotal']= $subTotalPrice;
        }
        
        if(isset($_SESSION['order']['subtotal']['services_total'])){
            $_SESSION['order']['Mainsubtotal']=(($_SESSION['order']['Mainsubtotal'])+($_SESSION['order']['subtotal']['services_total']));
        }
      
        if(isset($_SESSION['order']['disscountOfferApply'])){
            $dissCountBy=$_SESSION['order']['disscountOfferApply']['disscountBy'];
            $Amt=$_SESSION['order']['disscountOfferApply']['amount'];
            $OfferType=$_SESSION['order']['disscountOfferApply']['offerType'];
            if($dissCountBy=='%'){
                $disscountedAmount=(($Amt)*($_SESSION['order']['Mainsubtotal']/100));
            }else{
                $disscountedAmount=$Amt;
            }
        }
      
        $_SESSION['order']['disscountOfferApply']['disscountedAmount']=$disscountedAmount;
		if($_SESSION['order']['Mainsubtotal']<=$disscountedAmount){			
			$_SESSION['order']['disscountOfferApply']['disscountedAmount']='';
		}
        if(isset($_SESSION['order']['disscountOfferApply']['disscountedAmount'])){
        
            $_SESSION['order']['Mainsubtotal']=($_SESSION['order']['Mainsubtotal']-$_SESSION['order']['disscountOfferApply']['disscountedAmount']);
        }
       
        $_SESSION['order']['date'] = $_POST['date'];
        $_SESSION['order']['advisorId']=$advisorId;       

        $_SESSION['user_booking_details']= $_SESSION['order']; 
        echo json_encode($_SESSION['order']);
        die;
    
}
/* 19 Oct 2015 */

function checkAvailableseats(){
    //echo "<pre>";Print_r($_SESSION['order']);exit;
    $listId = $_POST['listing_id'];
    $Selected_booking_date = $_POST['selected_booking_date'];
    $Selected_booking_time = $_POST['selected_booking_time'];
    $Selected_booking_time  = date("H:i:s", strtotime($Selected_booking_time));
    $Selected_booking_date = date('Y-m-d', strtotime($Selected_booking_date));
    $result_schedule =db_query("SELECT * FROM `gbl_scheduling` WHERE `listing_id`='$listId'");
    $result_schedule_array=$result_schedule->fetchAll(PDO::FETCH_ASSOC);
    if($result_schedule_array[0]['bookingMode']=='NO_DATE'){
            $result_price =db_query("SELECT * FROM `gbl_scheduling_sessions` WHERE `listing_id`='$listId'");
            $result_arrayprice=$result_price->fetchAll(PDO::FETCH_ASSOC);
            $priceDataNEw=unserialize($result_arrayprice[0]['pricingData']);
            
            $avalability_max=$priceDataNEw[0]['quantity_max'];
            $avalability_min=$priceDataNEw[0]['quantity_min'];
            $available_seats_per_session=$avalability_max;
            echo $available_seats_per_session;exit;
            
    }else{
        $result_price =db_query("SELECT * FROM `gbl_scheduling_sessions` WHERE `listing_id`='$listId' AND ('$Selected_booking_date' between `startDate` AND `endRepeatDate`) AND (startTime <= '$Selected_booking_time' AND endTime > '$Selected_booking_time')");
        $result_arrayprice=$result_price->fetchAll(PDO::FETCH_ASSOC);
        $avalability_min=$result_arrayprice[0]['avalability_min'];
        $avalability_max=$result_arrayprice[0]['avalability_max'];
        $result_availability =db_query("SELECT sum(travellers) as travellers FROM `gbl_booking` WHERE `lid`='$listId' AND (`arrive_at_date`='$Selected_booking_date' ) AND (`arrive_at_time`='$Selected_booking_time')");
        $result_availability=$result_availability->fetchAll(PDO::FETCH_ASSOC);
        $pricingDataAll=unserialize($result_arrayprice[0]['pricingData']);
        $available_seats_per_session=(($avalability_max)-($result_availability[0]['travellers']));
        echo $available_seats_per_session;exit;
    }
    // Check availability of travellers
    echo $available_seats_per_session;exit;
    $qty_min=$pricingDataAll[0]['quantity_min'];
    $qty_max=$pricingDataAll[0]['quantity_max'];
    echo "<pre>";Print_r($pricingDataAll[0]['quantity_min']);exit;
    
}
function search_listing_advisors(){

    global $user;
    $destination = arg(2);
    $query = db_select('gbl_advisor_trip_type','gatr');
    $query->fields('gatr');
    $result=$query->execute();
    $resultSet = $result->fetchAll(PDO::FETCH_ASSOC);
    return theme('search_listing_advisors',array('triptype'=>$resultSet,'destination'=>$destination));
}
function search_listings_advisors_form($form, &$form_state){
     
    global $user;
    $destination = arg(2);
    $format = 'YYYY/MM/DD';
    $query = db_select('gbl_advisor_trip_type','gatr');
    $query->fields('gatr');
    $result=$query->execute();
    $resultSet = $result->fetchAll(PDO::FETCH_ASSOC); 
    $options=array();
        foreach ($resultSet as $value) {
            $options[$value['trip_id']]=$value['trip_type'];
        }
    array_unshift($options, "Type of trip");
   
    $overall_budget_option  = array();
    for($i=1; $i<=10; $i++){
        $overall_budget_option[]=$i;
    }
    array_unshift($overall_budget_option, 'Select Travelers');
    $form = array();
    $form['#action'] = url("advisor_listing_results");
    $form['#method'] = 'get';
    // $form['dest']=array(
    //     '#type'=>'textfield',
    //     '#prefix'=>'<div class="innersearch"><div class="col-md-9 col-sm-9 col-xs-12 dessearch">',
    //     '#attributes' => array(
    //         'class' => array('searchinput','required'),
    //         'id'=>'advice_destination',
    //         'onclick'=>'search_destination();',
    //         //'required' => 'required'
    //         ),
    //     '#default_value'=> $destination,
    //     '#suffix'=>'</div>',

    // );
    //  $form['advisors'] = array(
    //     '#type' => 'textfield',
    //     '#attributes' => array(
    //         // 'placeholder'=>'$ Overall Budget',
    //         'required' => 'required',
    //         'class'=>array('advisorinput'),
    //          'readonly'=>'readonly',

    //         ),
    //     '#default_value' => t('Advisor'),
    //     '#prefix' => '<div class="col-md-3 col-sm-3 col-xs-12 advisorsearch">',
    //     '#suffix' => '</div></div>'
    // ); 

    $form['html_in_between']= array(
    '#prefix'=>'<div class="innersearchpanel">
    <div class="container">
    <div class="searching_for_block">
    <div class="blockheading">
    <h2>Create a recommendation request</h2>
    <p class="subtagline">Enter your trip details </p>
    </div>',

    ); 
    $form['dest'] = array(
        '#type' => 'textfield',
        '#attributes' => array(
            'class' => array('searchinput','required'),
            'placeholder'=>'Enter Your Destination',
            'id'=>'advice_destination',
            'onclick'=>'search_destination();',// 'required' => 'required',
            ),
        '#default_value'=> $destination,
       '#prefix' => '<fieldset><div class="col-md-9 col-sm-9 col-xs-12 dessearch">',
        '#suffix' => '<span id="ermsg"></span></div>'
    );
    
    $form['triptype'] = array(
    '#type' => 'select',
    '#prefix'=>'<div  id="select_custom_triptype" class="col-md-3 col-sm-3 col-xs-12">',
    '#attributes' => array(
        'class' => array('select_box'),
        'placeholder'=>'Select Trip Type',
        'required' => 'required',
    ),
    '#options' => $options,
    '#suffix' => '</div></fieldset><fieldset>'
    ); 
    
    $form['traveler'] = array(
    '#type' => 'select',
    '#prefix'=>'<div id="select_custom_traveler"  class="col-md-3 col-sm-3 col-xs-12">',
    '#attributes' => array(
        'class' => array('select_box'),
        'required' => 'required',
    ),
    '#options'=> $overall_budget_option,
   //'#options' => array(''=>'Select Travelers','1'=>'Travelers'),
    '#suffix' => '</div> '
    ); 

    $form['start_date'] = array(
        '#type' => 'textfield',
        '#attributes' => array(
            'class' => array('icocal'),
            'placeholder'=>'From',
            'id'=>'start_date',
            'required' => 'required',
            ),
        '#data-date-format' => $format,
       '#prefix' => '<div class="col-md-3 col-sm-3 col-xs-12">',
        '#suffix' => '</div>'
    ); 
    $form['end_date'] = array(
        '#type' => 'textfield',
         '#attributes' => array(
            'class' => array('icocal'),
            'placeholder'=>'To',
            'id'=>'end_date',
            'required' => 'required',
            ),

        '#prefix' => '<div class="col-md-3 col-sm-3 col-xs-12">',
        '#suffix' => '</div>'
    );
    
    $form['overall_budget'] = array(
        '#type' => 'textfield',
        '#attributes' => array(
            'placeholder'=>'$ Overall Budget',
            'maxlength'=>'8',
            // 'required' => 'required',
            ),
       '#prefix' => '<div class="col-md-3 col-sm-3 col-xs-12">',
        '#suffix' => '<span id="ermsg"></span></div></fieldset>'
    ); 
    $form['html']=array(
        '#prefix'=>'<div class="blockheading"><h3>What are you looking for?</h3>',
        '#suffix'=>'</div>'
        );
  
    // $form['hotel']=array(
    //     '#prefix'=>'<fieldset><div class="col-md-4 col-sm-4 col-xs-12">
    //     <div class="inputthumb">
    //     <input type="radio" name="lookingfor" value="hotel" id="hotel" class="hotel" />
    //     <i class="fa fa-hospital-o"></i>
    //     <span class="ds-title">Hotel</span>
    //     </div> </div>'
    // );
    
    // $form['vacationrentals']=array(
    //     '#prefix'=>'<div class="col-md-4 col-sm-4 col-xs-12">
    //     <div class="inputthumb">
    //     <input type="radio" name="lookingfor" value="vacation_rentals" id="vacationrentals"  class="vacationrentals" />
    //     <i class="fa fa-home"></i>
    //     <span class="ds-title">Vacation rentals</span>
    //     </div> 
    //     </div>'

    // ); 

    $form['experience']=array(
    '#prefix'=>'<div class="col-md-4 col-sm-4 col-xs-12">
    <div class="inputthumb">
    <input type="radio" name="lookingfor" id="experience" required="required" value="experience" class="experience" />
    <i class="fa fa-bicycle"></i>
    <span class="ds-title">Experience</span>
    </div> 
    </div></fieldset>'
    );

     $form['submit'] = array(
        '#type' => 'submit',
        '#attributes' => array(
            'class' => array('findadvisor'),
        ),
        '#value' => t('Find advisors'),
        '#prefix' => '<fieldset>
        <div class="col-md-6 col-md-offset-3 col-sm-12 col-xs-12">',
        '#suffix' => '</div></fieldset>'
    );

    $form['html_end']= array(
    '#suffix'=>'</div> 
                </div> 
                <div class="mask"></div>
            </div>'

    );


return $form;
   
}



function advisor_listing_results(){
    global $user ,$base_url;
    /* if((strpos($_SERVER['HTTP_USER_AGENT'], 'facebookexternalhit')!==FALSE)){
        drupal_goto('http://gloobers.com'.$_SERVER['REQUEST_URI']);
    }else{
        if((!$user->uid)){
            $dest = drupal_get_destination();
            $_SESSION['destination']  = $dest["destination"];
            drupal_goto('login',$dest);
        }
    } */
    if(strpos($_SERVER['HTTP_USER_AGENT'], 'facebookexternalhit')!==false){
        //$mayText='Here1\n';
    }else{
    
        //$mayText='NoHere1\n';
        if((!$user->uid)){
            $dest = drupal_get_destination();
            $_SESSION['destination']  = $dest["destination"];
            drupal_goto('login',$dest);
        }
    }
    $uid=$user->uid;
    $destination = $_GET['dest'];
    $dest = explode(',',$destination);
    $where = '';
    $search = '';
    if(!empty($dest[0])){
        $search="((gel.country COLLATE UTF8_GENERAL_CI LIKE '".'%'.$dest[0].'%'."') or (gel.city COLLATE UTF8_GENERAL_CI LIKE '".'%'.$dest[0].'%'."') or (gel.state COLLATE UTF8_GENERAL_CI LIKE '".'%'.$dest[0].'%'."') or (MATCH (gup.location) AGAINST ('".$dest[0]."' IN NATURAL LANGUAGE MODE)))";
   //(gup.location COLLATE UTF8_GENERAL_CI LIKE '".'%'.$dest[0].'%'."')
    }
    /**
     * type of exp. must be used in or
     */
    $with_mutual_interests_join = '';
    $with_mutual_interests_join_condition ='';
   
     if((isset($_GET['with_mutual_interests']) == 'on') && (isset($uid))){
        $with_mutual_interests_join = " inner join gbl_users_passions gups on (gups.uid = gum.uid) ";
         if(!isset($_GET['professionals'])&&!isset($_GET['locals'])){
            $with_mutual_interests_join .= "inner join gbl_user_passeport gup on (gup.uid = gum.uid)"; 
         }
        if(isset($_GET['passions'])){
            $with_mutual_interests_join_condition = "gups.pid IN(select concat(pid,',') from gbl_users_passions where uid = '".$uid."' and gups.pid IN(". $_GET['passions']."))"; 
        }else{
            $with_mutual_interests_join_condition = "gups.pid IN(select concat(pid,',') from gbl_users_passions where uid = '".$uid."')"; 
        }       
        if(!isset($_GET['professionals'])&&!isset($_GET['locals'])){
             $with_mutual_interests_join_condition .=" And (MATCH (gup.location) AGAINST ('".$destination."' IN NATURAL LANGUAGE MODE))";
        }   
    }
   $have_been_there ='';
   $have_been_there_condition ='';
    if((isset($_GET['have_been_there']) == 'on')||($_GET['professionals'] =='on')){
        $have_been_there = "inner join  gbl_experience_list gel on (gum.uid = gel.uid)";
        if($_GET['have_been_there'] == 'on'){
            $have_been_there .=" INNER JOIN gbl_booking gb ON (gb.lid = gel.eid) ";
        }
    //  $have_been_there .=" Inner join  gbl_user_passeport gup on  (gup.uid = gum.uid) ";
       $have_been_there_condition =" ((gel.country COLLATE UTF8_GENERAL_CI LIKE '".'%'.$dest[0].'%'."') or (gel.city COLLATE UTF8_GENERAL_CI LIKE '".'%'.$dest[0].'%'."') or (gel.state COLLATE UTF8_GENERAL_CI LIKE '".'%'.$dest[0].'%'."'))";
       // or ((gup.location COLLATE UTF8_GENERAL_CI LIKE '%Paris, France%') AND (gup.description COLLATE UTF8_GENERAL_CI LIKE '%been living there%'))
    }
    $local_condition='';
    $local_condition2 ='';
    if((isset($_GET['locals'])) && ($_GET['locals'] =='on')){
        $local_condition =" Inner join  gbl_user_passeport gup on  (gup.uid = gum.uid) ";
         $local_condition2 = " (MATCH (gup.location) AGAINST ('".$destination."' IN NATURAL LANGUAGE MODE)) AND (gup.description = 'I live there')";
         //gup.location  COLLATE UTF8_GENERAL_CI LIKE '".'%'.$destination.'%'."'
    }
    $where = 'where '.$search;
    $where_condition ='';
    if(!empty($with_mutual_interests_join_condition)){
        $where_condition .=' and '.$with_mutual_interests_join_condition;
    }
    if(!empty($have_been_there_condition)){
       $where_condition .=' and '. $have_been_there_condition;
    }
    if(!empty($local_condition2)){
        $where_condition .=' and '.$local_condition2;
    }
   
    $where_condition = 'where '.ltrim($where_condition," and");
    
    
    $group_by = 'group by gum.uid';
    $unique_advice_advisor =array();
    if($have_been_there=='' && $with_mutual_interests_join==''&& $local_condition=='' && $professionals =='' ){
     $query = "SELECT gum.uid FROM gbl_users_meta gum left join  gbl_experience_list gel on (gum.uid = gel.uid) ";
     $query .= " left join  gbl_user_passeport gup on  (gup.uid = gum.uid) $where  $group_by" ;
     $query2 ="SELECT gbl.owner_id uid FROM  gbl_advise_listing AS gbl LEFT JOIN gbl_advice_location_request AS gal ON (gal.rid = gbl.request_id) WHERE gal.destination COLLATE UTF8_GENERAL_CI LIKE '".'%'.$destination.'%'."' GROUP 
            BY gbl.owner_id ";
           
    $query2 = db_query($query2);
    $unique_advice_advisor=$query2->fetchAll(PDO::FETCH_ASSOC);   
    }else{
        $query = "SELECT gum.uid FROM gbl_users_meta gum  $with_mutual_interests_join $have_been_there 
        $local_condition  $professionals $where_condition   $group_by";
    }
   //echo $query; exit;
    $query = db_query($query);
    $advisor=$query->fetchAll(PDO::FETCH_ASSOC);
  
    $total_advisor1= array_merge($unique_advice_advisor,$advisor);
    $total_advisor = array_map('unserialize',array_unique(array_map('serialize',$total_advisor1)));
    
    $output = '';
    $listing = pager_array_splice($total_advisor, 6);
    $output .= theme('pager', array('quantity' => 6));
    return theme('advisor_listing_results' ,array('result'=>$listing,'pagination'=>$output));

}
function hotel_result_listing(){
     global $user ,$base_url;
     $uid=$user->uid;
    $seach_destination = arg(1);
    $query = "Select * from gbl_hotels where (hotel_name like '".$seach_destination."' or hotel_city like '".$seach_destination."' or hotel_state like '".$seach_destination."' or hotel_country like '".$seach_destination."' or hotel_address like '".$seach_destination."' )";
     $query = db_query($query);

    $total_hotel=$query->fetchAll(PDO::FETCH_ASSOC);
    $output = '';
    $listing = pager_array_splice($total_hotel, 6);
    $output .= theme('pager', array('quantity' => 6));
    return theme('hotel_result_listing' ,array('result'=>$listing,'pagination'=>$output));     
            
}

function gloobers_users(){
    global $user ,$base_url;
    $uid=$user->uid;
    $destination = arg(1);
    $dest = explode(',',$destination);
    $where = '';
    $search = '';
    //echo $dest[0];exit;
    $dest[0]=trim($dest[0]);
    if(!empty($dest[0])){
     // $srt=(regexp '^'.$dest[0].'[1-3]$');
        $search="((gup.location COLLATE UTF8_GENERAL_CI LIKE '".$dest[0]."'))";
        $search= "MATCH (gup.location) AGAINST ('".$dest[0]."' IN NATURAL LANGUAGE MODE)";
    }
    $with_mutual_interests_join = '';
    $with_mutual_interests_join_condition ='';
     if((isset($_GET['with_mutual_interests']) == 'on') && (isset($uid))){
        $with_mutual_interests_join = " inner join gbl_users_passions gups on (gups.uid = gum.uid) ";
         if(!isset($_GET['have_been_there'])&& !isset($_GET['professionals'])&&!isset($_GET['locals'])){
            $with_mutual_interests_join .= "inner join gbl_user_passeport gup on (gup.uid = gum.uid)"; 
         }   
        
        if(isset($_GET['passions'])){
            $with_mutual_interests_join_condition = "gups.pid IN(select concat(pid,',') from gbl_users_passions where uid = '".$uid."' and gups.pid IN(". $_GET['passions']."))"; 
        }else{
            $with_mutual_interests_join_condition = "gups.pid IN(select concat(pid,',') from gbl_users_passions where uid = '".$uid."')"; 
        }
        if(!isset($_GET['have_been_there'])&& !isset($_GET['professionals'])&&!isset($_GET['locals'])){
             $with_mutual_interests_join_condition .=" And MATCH (gup.location) AGAINST ('".$destination."' IN NATURAL LANGUAGE MODE)";
        }   
    }
   $have_been_there ='';
   $have_been_there_condition ='';
    if((isset($_GET['have_been_there']) == 'on')||($_GET['professionals'] =='on')){
        $have_been_there = "inner join  gbl_experience_list gel on (gum.uid = gel.uid)";
        if($_GET['have_been_there'] == 'on'){
            $have_been_there .=" INNER JOIN gbl_booking gb ON (gb.lid = gel.eid) ";
        }
       $have_been_there_condition =" ((gel.country COLLATE UTF8_GENERAL_CI LIKE '".'%'.$dest[0].'%'."') or (gel.city COLLATE UTF8_GENERAL_CI LIKE '".'%'.$dest[0].'%'."') or (gel.state COLLATE UTF8_GENERAL_CI LIKE '".'%'.$dest[0].'%'."'))";
    }
    $local_condition='';
    $local_condition2 ='';
    if((isset($_GET['locals'])) && ($_GET['locals'] =='on')){
        $local_condition =" Inner join  gbl_user_passeport gup on  (gup.uid = gum.uid) ";
       /*  $local_condition2 = " gup.location  COLLATE UTF8_GENERAL_CI LIKE '".'%'.$destination.'%'."'
         AND gup.description = 'I live there'"; */
        $local_condition2 =  " MATCH (gup.location) AGAINST ('".$destination."' IN NATURAL LANGUAGE MODE) AND gup.description = 'I live there'";
    }
    $where = 'where '.$search;
    $where_condition ='';
    if(!empty($with_mutual_interests_join_condition)){
        $where_condition .=' and '.$with_mutual_interests_join_condition;
        
    }
    if(!empty($have_been_there_condition)){
       $where_condition .=' and '. $have_been_there_condition;
    }
    if(!empty($local_condition2)){
        $where_condition .=' and '.$local_condition2;
    }
   
    $where_condition = 'where '.ltrim($where_condition," and");
    
    
    $group_by = 'group by gum.uid';
    $unique_advice_advisor =array();
    if($have_been_there=='' && $with_mutual_interests_join==''&& $local_condition=='' && $professionals =='' ){
     $query = "SELECT gum.uid FROM gbl_users_meta gum ";
     $query .= " inner join  gbl_user_passeport gup on  (gup.uid = gum.uid) $where  $group_by" ;
    
    }else{
        $query = "SELECT gum.uid FROM gbl_users_meta gum  $with_mutual_interests_join $have_been_there 
        $local_condition  $professionals $where_condition   $group_by";
    }
   //echo $query; exit;
    $query = db_query($query);
    $data=$query->fetchAll(PDO::FETCH_ASSOC);
    $output = '';
    $listing = pager_array_splice($data, 6);
    $output .= theme('pager', array('quantity' => 6));
    return theme('gloobers_users',array('result'=>$listing,'pagination'=>$output));
    
}
function travel_guides_listings(){
    global $user;
    $destination = arg(1);
    $query=db_select('gbl_trevel_guide','gtg');
    $query->fields('gtg');
    $query->condition('gtg.destination',$destination,'like');
    $result=$query->execute();
    $data = $result->fetchAll(PDO::FETCH_ASSOC);
    $output = '';
    $listing = pager_array_splice($data, 2);
    $output .= theme('pager', array('quantity' => 2));
    //echo $output;
    echo "<pre>";print_r($data);exit;

}
function passeport_location($id){
    global $user;
    $query=db_select('gbl_user_passeport','gup');
    $query->fields('gup',array('location'));
    $query->condition('gup.uid',$id);
    $query->condition('gup.description','I live there');
    $result=$query->execute();
    $data = $result->fetchField();
    return $data;    
}

/**.
 * hotel booking summary form 
 */

function hotel_booking_summary_form($form, &$form_state) {
    $curYear = date('Y');
    $years = array();
    global $user;
    $userdetail=user_load($user->uid);
    //echo "<pre>";Print_r($userdetail);exit;
    for ($i = $curYear; $i <= $curYear + 50; $i++) {
        $years[$i] = $i;
    }
    $month = array();

    for ($j = 1; $j < 13; $j++) {
        if ($j < 10) {
            $month['0' . $j] = '0' . $j;
        } else {
            $month[$j] = $j;
        }
    }

    $form['booking_summary']['paymenttype'] = array(
        '#type' => 'select',
        '#prefix' => '<div class="col-md-6"><label>Type of Credit Card</label><span>',
        '#suffix' => '</span></div>',
        '#options' => array(
            'Visa' => 'Visa',
            'MasterCard' => 'Master Card',
            'Amex' => 'American Express',
            'Discover' => 'Discover'
        )
    );
   
    $form['booking_summary']['creditcardno'] = array(
        '#type' => 'textfield',
        "#attributes" => array('class' => array('required')),
        '#prefix' => '<div class="col-md-6"><label>Credit Card Number</label>',
        "#attributes" => array('maxlength' => '16', 'class' => array('required')),
        '#suffix' => '</div>',
        '#required' => true
    );
    $form['booking_summary']['advisorId'] = array(
        '#type' => 'hidden',
       '#default_value'=>$_SESSION['order']['advisorId']
    );
 

    $form['booking_summary']['expirationmonth'] = array(
        '#type' => 'select',
        '#prefix' => '<div class="col-md-4 bs_sum_date"><label>Expiration Date</label><span>',
        '#suffix' => '</span></div>',
        '#options' => $month
    );


    $form['booking_summary']['expirationyear'] = array(
        '#type' => 'select',
        '#prefix' => '<div class="col-md-4 bs_sum_date"><label>Year</label><span>',
        '#suffix' => '</span></div>',
        '#options' => $years
    );
    $form['booking_summary']['securitycode'] = array(
        '#type' => 'password',
        "#attributes" => array('class' => array('required')),
        '#prefix' => '<div class="col-md-4 bs_sum_date"><label>Security Code</label>',
        '#suffix' => '</div>',
        '#required' => true
    );
    $form['booking_summary']['cardholdername'] = array(
        '#type' => 'textfield',
        "#attributes" => array('class' => array('required')),
        '#prefix' => '<div class="col-md-6"><label>Cardholder Name</label>',
        '#suffix' => '</div>',
        '#required' => true
    );

    $form['booking_summary']['companyname'] = array(
        '#type' => 'textfield',
        '#prefix' => '<div class="col-md-6"><label>Company Name</label>',
        '#suffix' => '</div>'
    );
    $form['booking_summary']['firstname'] = array(
        '#type' => 'textfield',
        "#attributes" => array('class' => array('required')),
        '#prefix' => '<div class="col-md-6"><label>First Name</label>',
        '#suffix' => '</div>',
        '#default_value' => isset($userdetail->field_first_name) ? $userdetail->field_first_name['und'][0]['value'] :'',
    );
    $form['booking_summary']['lastname'] = array(
        '#type' => 'textfield',
        "#attributes" => array('class' => array('required')),
        '#prefix' => '<div class="col-md-6"><label>Last Name</label>',
        '#suffix' => '</div>',
        '#default_value' => isset($userdetail->field_last_name) ? $userdetail->field_last_name['und'][0]['value'] :'',

    );
    $form['booking_summary']['street'] = array(
        '#type' => 'textfield',
        "#attributes" => array('class' => array('required')),
        '#prefix' => '<div class="col-md-6"><label>Street</label>',
        '#suffix' => '</div>'
    );
    $form['booking_summary']['number'] = array(
        '#type' => 'textfield',
        "#attributes" => array('class' => array('required')),
        '#prefix' => '<div class="col-md-6"><label>Number</label>',
        '#suffix' => '</div>',
        '#default_value' => isset($userdetail->field_phone_number) ? $userdetail->field_phone_number['und'][0]['value'] :'',

    );
    $form['booking_summary']['apt'] = array(
        '#type' => 'textfield',
        '#prefix' => '<div class="col-md-6"><label>Apt #</label>',
        '#suffix' => '</div>'
    );
    $form['booking_summary']['city'] = array(
        '#type' => 'textfield',
        "#attributes" => array('class' => array('required')),
        '#prefix' => '<div class="col-md-6"><label>City</label>',
        '#suffix' => '</div>',
        '#default_value' => isset($userdetail->field_city) ? $userdetail->field_city['und'][0]['value'] :'',
    );
    $form['booking_summary']['zip'] = array(
        '#type' => 'textfield',
        "#attributes" => array('class' => array('required')),
        '#prefix' => '<div class="col-md-6"><label>' . t('Zip') . '</label>',
        '#suffix' => '</div>'
    );
    $form['booking_summary']['state'] = array(
        '#type' => 'textfield',
        "#attributes" => array('class' => array('required')),
        '#prefix' => '<div class="col-md-6"><label>' . t('State') . '</label>',
        '#suffix' => '</div>',
        '#default_value' => isset($userdetail->field_state) ? $userdetail->field_state['und'][0]['value'] :'',

    );
    $query = db_select('gbl_country_list', 'cl')
            ->fields('cl', array('country_name'));
    $result = $query->execute();
    while ($res = $result->fetchAssoc()) {
        $countriesArray[] = $res['country_name'];
    }
    $countries = array();
    foreach ($countriesArray as $key => $val){
        $countries[$val] = $val;
    }

    $form['booking_summary']['country'] = array(
        '#type' => 'select',
        '#prefix' => '<div class="col-md-6"><label>' . t('Country') . '</label><span>',
        '#suffix' => '</span></div>',
        '#options' => $countries
        
        /*'#required' => true*/
    );
    $form['booking_summary']['message'] = array(
        '#type' => 'textarea'
    );
    $form['booking_summary']['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Confirm',
        '#attributes' => array(
            'class' => array('btnsend'),
        ),
        '#prefix' => '<div class="confirm"><p>Clicking The << CONFIRM >> Button You Agree On<br><span><a>Gloobers Terms & Conditions</a></span></p><div class="btnconfirm">',
        '#suffix' => '</div></div>'
    );
    return $form;
}



/**
 * hotel reservation entries
 */

    
 function hotel_booking_summary_form_submit($form, &$form_state) {
    global $user;
  /**
   * set payment variables
   */
    $currencyID = urlencode('USD');
    $IPADDRESS = urlencode($_SERVER['REMOTE_ADDR']);
    $DESC = urlencode('Hotel Reservation payment.');
    $creditCardType =urlencode($_POST["paymenttype"]);
    $creditCardNumber =urlencode($_POST["creditcardno"]);
    $padDateMonth =$_POST["expirationmonth"];
    $expDateYear =$_POST["expirationyear"];
    $cvv2Number =$_POST["securitycode"];
    $paymentType =$_POST["cardholdername"];
    $paymentType =$_POST["companyname"];
    $paybleAmount =$_POST["total_price"];
    $firstName =urlencode($_POST["firstname"]);
    $lastName =urlencode($_POST["lastname"]);
    $paymentType = urlencode('Sale'); 
    $streetcc = $_POST["street"]; 
    $city = urlencode($_POST["city"]); 
    $state = urlencode($_POST["state"]); 
    $zip = urlencode($_POST["zip"]); 
    $country = urlencode($_POST["country"]); 
    
    /**
     * set gateway attribute 
     * call payment gateway
     */
    
    $nvpStr = "&PAYMENTACTION=$paymentType&IPADDRESS=$IPADDRESS&AMT=$paybleAmount&CREDITCARDTYPE=$creditCardType&ACCT=$creditCardNumber" .
            "&EXPDATE=$padDateMonth$expDateYear&CVV2=$cvv2Number&FIRSTNAME=$firstName&LASTNAME=$lastName" .
            "&STREET=$streetcc&CITY=$city&STATE=$state&ZIP=$zip&COUNTRYCODE=$country&CURRENCYCODE=$currencyID";
    $httpParsedResponseAr = PPHttpPost('DoDirectPayment', $nvpStr);
    /**
     * after getting response
     * enteries in database
     */
 if ($httpParsedResponseAr['ACK'] == 'Success' || $httpParsedResponseAr['ACK'] == 'SUCCESSWITHWARNING') {
         $amount = urldecode($httpParsedResponseAr['AMT']);
         $timeStamp = urldecode($httpParsedResponseAr['TIMESTAMP']);
         $currency = urldecode($httpParsedResponseAr['CURRENCYCODE']);
         $transId = urldecode($httpParsedResponseAr['TRANSACTIONID']);
         $date = date('Y-m-d H:i:s', strtotime($timeStamp));
 
 /**
  * entery in hotel_room booking 
  * gbl_hotel_room_booking
  */
          $data_array = array(
              "user_id"=>$user->uid,
              "method"=>"paypal",
              "amount"=>$amount,
              "trans_id"=>$transId,
              "payment_status"=>"complete",
             "created"=>date("Y-m-d H:i:s"),
          );
      $query = db_insert('gbl_hotel_room_booking')
                ->fields($data_array)
                ->execute();
      $bookingID = $query;
     /**
       * entry for room booking details
       * table : gbl_room_booking_details
       */
         $room_data_email='<table>';
          $room_data_email.='<tr><th>Room Name</th><th>No of Room(s)</th><th>Check in</th><th>Check out</th></tr>';
      foreach($_SESSION['hotel_room_cart'] as $key=>$value){
          $data_array = array(
              "room_id"=>$value["room_id"],
              "hotel_id"=>$value["hotel_id"],
              "start_date"=>$value["check_in"],
              "end_date"=>$value["check_out"],
              "no_of_rooms"=>$value["no_of_room"],
              "user_id"=>$user->uid,
              "created"=>date("Y-m-d H:i:s"),
          );
//          $data_array['room_id']
          $room_data = getRoomDetailByRoomId($data_array['room_id']);
          $room_data_email.='<tr><td>'.$room_data[0]["room_name"].'</td><td>'.$data_array["no_of_rooms"].'</td><td>'.$data_array["start_date"].'</td><td>'.$data_array["end_date"].'</td></tr>';

        $query=   db_insert('gbl_room_booking_details')
                ->fields($data_array)
                ->execute();
      }
      /**
       * get hotel detail
       */
//$data_array["hotel_id"];
      $hotel_data_email = gethotel_detail($data_array["hotel_id"]);
      $room_data_email.='</table>';
      if($query){
           $user_email_data=''; 
          $owner_email_data=''; 
            /********************************Mail Send to user**************************************************************************** */
          $user_id = $user->uid;
          $user_info = user_load($user_id);
          $room_data_email;
          if (!empty($user_info->field_first_name)) {
                $username = $user_info->field_first_name['und'][0]['value'] . "  " . $user_info->field_last_name['und'][0]['value'];
            } else {
                $username = $user_info->name;
            }
            $body = 'Hello ' . ucfirst($username) . ',<br/>';
            $body .= '<p> You have boooked following room(s) in  Hotel- <b>' . $hotel_data_email[0]['hotel_name'] . '</b></p><br/>';
            $body .=$room_data_email; 
                                
            $module = 'listing';
            $key = 'message_to_provider_booking_confirmation';
            $to_email = trim($user_info->mail);
            $subject = 'Hotel Booking Confirmation';
         //   sendNotificationEmail($module, $key, $to_email, $subject, $title, $body);

            /*             * *********************************Mail send to Traveller************************************************************************ */
            $hotel_creater = user_load($hotel_data_email[0]["user_id"]);
            if (!empty($hotel_creater->field_first_name)) {
                 $hotelCreaterName = $hotel_creater->field_first_name['und'][0]['value'] . "  " . $hotel_creater->field_last_name['und'][0]['value'];
            } else {
                $hotelCreaterName = $hotel_creater->name;
            }
            $body = 'Hello ' . $hotelCreaterName.",<br/>";
            $body .= '<p>'.ucfirst($firstName . " " . $lastName).' has booked following room(s) in Hotel - <b>' . $hotel_data_email[0]['hotel_name']. '</b></p>';
            $body .=$room_data_email; 
            
            $module = 'listing';
            $key = 'message_to_traveller_confirmation';
            $to_email = trim($hotel_creater->mail);
            $subject = 'Hotel Booking Request';
          drupal_goto('hotel_booking/success/' . $bookingID);
      }
   else {
        $errorMessage = urldecode($httpParsedResponseAr['L_LONGMESSAGE0']);
        drupal_set_message($errorMessage, 'error');
        
    }
      
      
        }
         else {
        $errorMessage = urldecode($httpParsedResponseAr['L_LONGMESSAGE0']);
        drupal_set_message($errorMessage, 'error');
        
    }
                                
 }
 function legal_process_checkboxes($element) {
    $i=0;
  foreach (element_children($element) as $key) {

    $feature_id = $key;
    if ($i==0) {
      $element[$key]['#attributes'] = array('disabled' => 'disabled');
    }
    $i++;
  }
  return $element;
}
function creditsCalculations(){
    global $user;
    $_SESSION['order']['available_gloobies']=$_POST['available_gloobies'];
    $_SESSION['order']['used_gloobies']=$_POST['used_gloobies'];
    $remainGloobies=($_POST['available_gloobies']-$_POST['used_gloobies']);
    $remainGloobies=($remainGloobies*variable_get('credit_value'));
/*  $updateCredits=db_update('gbl_credit_user')
                    ->fields(array('credits' => $remainGloobies))
                    ->condition('uid', $user->uid)
                    ->execute(); */
    echo "1";exit;
}
function testReview(){
    $servername = 'localhost';
    $username = 'gloobers_rudy';
    $password = 'JJp~L_c$d5T=';
    $dbname = 'gloobers_staging22';
    // Create connection
    $conn = new mysqli($servername, $username, $password,$dbname);
    if($conn->connect_error){
         die("Connection failed: " . $conn->connect_error);
         $ConMag= "Errorr Con Fail";
    }else{
        $ConMag='Connection working';
    }
    $OverTrips = "Select * from gbl_booking where arrive_at_date = (CURDATE()-INTERVAL 1 DAY) and  booking_status='booked'";
    $result_OverTrips=$conn->query($OverTrips);
    if($result_OverTrips->num_rows > 0){
        while($row = $result_OverTrips->fetch_assoc()){ 
        
            $Traveler=user_load($row['uid']);
            $listing_id=$row['lid'];
            $listingData=getOverviewData($listing_id);
            //Listing Photo Data
            if(!empty($listingData['main_img_fid'])){
                $metalisitngFid=$listingData['main_img_fid'];
            }else{
                $photo = getPhotosData($row["lid"]);
                $photo = unserialize($photo[0]["value1"]);
                $metalisitngFid=$photo["fid"];
            }
            $file = file_load($metalisitngFid);
            $style = "new-reservation";
            $Img_uri = $file->uri;
            if(file_exists($Img_uri)){
                $listingImgPath=image_style_url($style, $Img_uri);
                $Img_Name = $file->filename;
            }else{
                $listingImgPath=image_style_url($style, $Img_uri);
                $Img_Name = 'banner-listing_img.jpg';
            }   
            
            //End
            $Provider=user_load($listingData['uid']);
            
            if(!empty($Traveler->field_first_name['und'][0]['value'])){
                $Traveler_name =  $Traveler->field_first_name['und'][0]['value'];
            }else{
                $Traveler_name =  $Traveler->name;
            }
            if(!empty($Provider->field_first_name['und'][0]['value'])){
                $Provider_name =  $Provider->field_first_name['und'][0]['value'];
            }else{
                $Provider_name =  $Provider->name;
            }
            $key ='review_email';
            $title = '';
            $module = 'user';
            $to_email = $Traveler->mail;
            //$to_email = 'testing.testing139@gmail.com';            
            $subject = 'Add Listing Review';
            $body='<tr><td style="font-family:sans-serif, Arial, Helvetica, \'lucida_sansregular\' ;font-size:14px;color:#000;line-height:24px;background:url('.$listingImgPath.') no-repeat center;background-size:80%;padding:50px 0;text-align:center"><h3 style="color:#fff;font-weight:bold;text-shadow:3px 1px 2px #333;font-size:24px;margin:20px 0 0;text-align:center">'.$listingData['title'].'</h3><p style="color:#fff;font-weight:400;text-shadow:1px 1px 1px #333;font-size:16px;margin:0px 0 10px;text-align:center">'.$listingData['state'].',&nbsp;'.$listingData['country'].'</p></td></tr>
            <tr><td style="font-family:sans-serif, Arial, Helvetica, \'lucida_sansregular\' ;font-size:14px;color:#000;line-height:24px;text-align:center"><p><a href="#" style="color:#139ABC;text-decoration:none;text-align:center" target="_blank">Leave a review</a></p></td></tr><tr><td style="font-family:sans-serif, Arial, Helvetica, \'lucida_sansregular\' ;font-size:14px;color:#000;line-height:24px;text-align:center"><h3 style="font-size:18px;font-weight:600;margin:10px 0;text-align:center">How was it ?</h3></td></tr>
            <tr><td style="font-family:sans-serif, Arial, Helvetica, \'lucida_sansregular\' ;font-size:14px;color:#000;line-height:24px;"><p style="text-align:left">Hi '.ucfirst($Traveler_name).',<br />We hope you enjoyed your time in '.$listingData['country'].'.</p><p style="text-align:left">How was it? Leave a review to '.$listingData['title'].'. So that other tribe members can make their opinion on it.</p><p style="text-align:left"><a href="#" style="color:#139ABC;text-decoration:none;" target="_blank">Click here to leave a review</a></p></td></tr>';
            sendNotificationEmail($module, $key, $to_email, $subject, $title, $body);
        }
    }
    return true;

}
function add_review_traveler(){

    global $user,$base_url;
    if(!$user->uid){
        $dest = drupal_get_destination();
        $_SESSION['destination']  = $dest["destination"];
        drupal_goto('login',$dest);
    }
    $loggedUserId=$user->uid;
    $bookingId=arg(1);
    $booking_details = getbookingdata($bookingId);
    $listing_id=$booking_details['lid'];
    $bookedUserId=$booking_details['uid'];
    //If Looged User and Booked user same than he/she can give review of that Booking.
    if($loggedUserId==$bookedUserId){
        //Check Review already exists
        $alreadyExists=db_select('gbl_listing_reviews','r')->fields('r')->condition('booking_id',$bookingId)->execute();
        $resultAlreadyExists=$alreadyExists->fetchAll(PDO::FETCH_ASSOC);
        if(!empty($resultAlreadyExists)){
            //Review can be edited upto 1 week
            $currentTime=date('y-m-d H:i:s');
            $Current = strtotime($currentTime);
            $request_time=strtotime($resultAlreadyExists[0]['created']);
            $diff = abs($Current - $request_time);
            $years = floor($diff / (365*60*60*24));
            $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));
            $days = floor(($diff - ($years * 365*60*60*24) - ($months*30*60*60*24))/ (60*60*24));   
            //End
            if($days<7){
                $ListingData = getOverviewData($listing_id);
                $PassionList = getPassionList();
                $PassionCategoryList = getPassionCategoryList();
                return theme('add_review',array('ListingData'=>$ListingData,'booking_details'=>$booking_details,'PassionList'=>$PassionList,'PassionCategoryList'=>$PassionCategoryList));
            }else{
                drupal_goto($base_url);
            
            }
        }else{
                $ListingData = getOverviewData($listing_id);
                $PassionList = getPassionList();
                $PassionCategoryList = getPassionCategoryList();
                return theme('add_review',array('ListingData'=>$ListingData,'booking_details'=>$booking_details,'PassionList'=>$PassionList,'PassionCategoryList'=>$PassionCategoryList));
        }
    }else{
        drupal_goto('NotFound');
    }
}
function addReview(){
    global $user,$base_url;
    //echo "<pre>";Print_r($_POST);exit;
    $SerializeData=array(); 
    parse_str($_POST['SerializeData'],$SerializeData);  
    $passions=array();$categories=array();
    foreach($SerializeData['passions'] as $passion){
        $passion=explode('_',$passion);
        $passions[]=$passion[0];
        $categories[]=$passion[1];
    }
    $categories=array_unique($categories);
    $passions=serialize($passions);
    $categories=serialize($categories);
    //Posted Data for Review
    $bookingId=$_POST['bookingId'];
    $comments=trim($SerializeData['writereveiw']);
    $professional=$SerializeData['professional'];
    $money=$SerializeData['money'];
    $communication=$SerializeData['communication'];
    $safety=$SerializeData['safety'];
    //Advisor Rank stars
    $recommendation=$SerializeData['recommendation'];
    
    $average=($professional+$money+$communication+$safety)/4;
    //Check Review already exists
    $booking_details = getbookingdata($bookingId);
    $listing_id=$booking_details['lid'];
    
    $alreadyExists=db_select('gbl_listing_reviews','r')->fields('r')->condition('booking_id',$bookingId)->execute();
    $resultAlreadyExists=$alreadyExists->fetchAll(PDO::FETCH_ASSOC);
    if(empty($resultAlreadyExists) && is_array($resultAlreadyExists)){

        
        $insertArray=array('uid'=>$user->uid,
                            'booking_id'=>$bookingId,
                            'listing_id'=>$listing_id,
                            'communication'=>$communication,
                            'money'=>$money,
                            'safety'=>$safety,
                            'recommendation'=>$recommendation,
                            'professional'=>$professional,
                            'comments'=>$comments,
                            'average'=>$average,
                            'passions'=>$passions,
                            'passion_categories'=>$categories,
                            'created'=>date('Y-m-d H:i:s')
                        );
        $InsertReview=db_insert('gbl_listing_reviews')->fields($insertArray)->execute();

        /* if($recommendation==5){
            
            $OverviewData = getOverviewData($listing_id);
            $creditsEarn=variable_get('credit_value_review_fiveStar');
            $Credits=db_select('gbl_credit_user','c')->fields('c')->condition('uid',$booking_details['advisor_id'])->execute();
            $AlreadyExists=$Credits->fetchAll(PDO::FETCH_ASSOC);
            if(!empty($AlreadyExists)){
                $credits=($AlreadyExists[0]['credits']+$creditsEarn);
                $creditsEarn=($AlreadyExists[0]['credits_earned']+$creditsEarn);
                $updateCredits=db_update('gbl_credit_user')->fields(array('credits'=>$credits,'credits_earned'=>$creditsEarn))->condition('uid',$booking_details['advisor_id'])->execute();
            }else{

                $InsertCredits=db_insert('gbl_credit_user')->fields(array('credits'=>$creditsEarn,'uid'=>$booking_details['advisor_id'],'credits_earned'=>$creditsEarn,'created'=>now()))->execute();
            }
        } */
        //Advisor Ranking Db Save Indivisually
        if($booking_details['advisor_id'] || $booking_details['ruid']){
            $InsertAdvisorRating=db_insert('gbl_advisor_rating')->fields(array('advisor_id'=>($booking_details['advisor_id'])?$booking_details['advisor_id']:$booking_details['ruid'],'traveler_id'=>$booking_details['uid'],'listing_id'=>$listing_id,'booking_id'=>$booking_details['id'],'rating'=>$recommendation))->execute();
        }
    
        // Update Average Rating Of that listing in experience_listing
        
            $getAllRating=db_select('gbl_listing_reviews','r')->fields('r',array('average'))->condition('listing_id',$listing_id)->execute();
            $getAllRatingArray=$getAllRating->fetchAll(PDO::FETCH_ASSOC);
            $getAllRatingAvg=array();
            $sizeOFReviews=sizeof($getAllRatingArray);
            foreach($getAllRatingArray as $getAllRatingAr){
            $getAllRatingAvg[]=$getAllRatingAr['average'];
            
            }
            $totalReviews=array_sum($getAllRatingAvg);
            $avgRatingOverall=($totalReviews/$sizeOFReviews);
            //echo $avgRatingOverall;exit;
            $updateAvg=db_update('gbl_experience_list')->fields(array('average_ratings'=>$avgRatingOverall))->condition('eid',$listing_id)->execute();
            echo "1";exit;
    }else{  
        $currentTime=date('y-m-d H:i:s');
        $Current = strtotime($currentTime);
        $request_time=strtotime($resultAlreadyExists[0]['created']);
        $diff = abs($Current - $request_time);
        $years = floor($diff / (365*60*60*24));
        $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));
        $days = floor(($diff - ($years * 365*60*60*24) - ($months*30*60*60*24))/ (60*60*24));   
        //End
    
        if($days<7){        
            $booking_details = getbookingdata($bookingId);
            $listing_id=$booking_details['lid'];
            $insertArray=array('uid'=>$user->uid,
                                'booking_id'=>$bookingId,
                                'listing_id'=>$listing_id,
                                'communication'=>$communication,
                                'money'=>$money,
                                'safety'=>$safety,
                                'recommendation'=>$recommendation,
                                'professional'=>$professional,
                                'comments'=>$comments,
                                'average'=>$average,
                                'passions'=>$passions,
                                'passion_categories'=>$categories,
                                'created'=>date('Y-m-d H:i:s')
                            );
            $updateReview=db_update('gbl_listing_reviews')->fields($insertArray)->condition('id',$resultAlreadyExists[0]['id'])->execute();

            //Advisor Ranking Db Save Indivisually
            if($booking_details['advisor_id']){
            $UpdateAdvisorRating=db_update('gbl_advisor_rating')->fields(array('advisor_id'=>$booking_details['advisor_id'],'traveler_id'=>$booking_details['uid'],'listing_id'=>$listing_id,'rating'=>$recommendation))->condition('booking_id',$booking_details['id'])->execute();
            }
            /* if($recommendation==5){
            
            $OverviewData = getOverviewData($listing_id);
            $creditsEarn=variable_get('credit_value_review_fiveStar');
            $Credits=db_select('gbl_credit_user','c')->fields('c')->condition('uid',$booking_details['advisor_id'])->execute();
            $AlreadyExists=$Credits->fetchAll(PDO::FETCH_ASSOC);
            if(!empty($AlreadyExists)){
                $credits=($AlreadyExists[0]['credits']+$creditsEarn);
                $creditsEarn=($AlreadyExists[0]['credits_earned']+$creditsEarn);
                $updateCredits=db_update('gbl_credit_user')->fields(array('credits'=>$credits,'credits_earned'=>$creditsEarn))->condition('uid',$booking_details['advisor_id'])->execute();
            }else{
                $InsertCredits=db_insert('gbl_credit_user')->fields(array('credits'=>$creditsEarn,'uid'=>$booking_details['advisor_id'],'credits_earned'=>$creditsEarn,'created'=>now()))->execute();
            }
            } */
        
            // Update Average Rating Of that listing in experience_listing
        
            $getAllRating=db_select('gbl_listing_reviews','r')->fields('r',array('average'))->condition('listing_id',$listing_id)->execute();
            $getAllRatingArray=array();
            while($res = $getAllRating->fetchAssoc()){
                $getAllRatingArray[] = $res['average'];
            }
            $sizeOFReviews=sizeof($getAllRatingArray);
            $totalReviews=array_sum($getAllRatingArray);
            $avgRatingOverall=($totalReviews/$sizeOFReviews);
            $avgRatingOverall=round($avgRatingOverall,1);
            $updateAvg=db_update('gbl_experience_list')->fields(array('average_ratings'=>$avgRatingOverall))->condition('eid',$listing_id)->execute();

         
        
            echo "3";exit;
        }else{
            echo "2";exit;
        }
    }
}
function getPassionCategoryList($CatId=null){
    if($CatId != null){
        $Category=db_select('gbl_passions_category','c')->fields('c')->condition('pcid',$CatId)->execute();
    }else{
        $Category=db_select('gbl_passions_category','c')->fields('c')->orderBy('pcid','Asc')->execute();
    }
    $Category_result=$Category->fetchAll(PDO::FETCH_ASSOC);
    return $Category_result;
}
function getAdvisorStarRating($uid){
    $Rating=db_select('gbl_advisor_rating','c')->fields('c',array('rating'))->condition('advisor_id',$uid)->execute();
    $reviewsArray=array();
    while ($res = $Rating->fetchAssoc()){
        $reviewsArray[] = $res['rating'];
    }
    return $reviewsArray;
}

function CheckAvailSeatsForSession(){

$selectedtime=$_POST['session_time'];
$_SESSION['user_booking_details']['timeNew']=$selectedtime;

$selectedDate=strtotime($_POST['date']);
$selectedDate=date('Y-m-d',$selectedDate);
$checkAvail=db_select('gbl_booking','b')->fields('b',array('quantity_details'))->condition('lid',$_POST['lid'])->condition('arrive_at_date',$selectedDate)->condition('arrive_at_time',$selectedtime)->execute();
$checkAvailSeats=$checkAvail->fetchAll(PDO::FETCH_ASSOC);
$TotalPersons=array();
foreach($checkAvailSeats as $key=>$checkAvailSeat){

    $qty=unserialize($checkAvailSeat['quantity_details']);
    //echo "<pre>";Print_r($qty);

    if (array_key_exists('Adult', $qty) || array_key_exists('Child', $qty)) {       

        foreach($qty as $qt){  
            $TotalPersons[]=$qt['qty'];
        }       

    } else {

        foreach($qty as $qt){  
            //$TotalPersons[]=$qt['person_qty_adult']+$qt['person_qty_child']; 
            $TotalPersons[]=$qt['qty'];     
        }

    }

}

$totalPersons=array_sum($TotalPersons);


$avalibilty = $_POST['availiblitymax']-$totalPersons;
if($_POST['total']<=$avalibilty) {

$array_msg=array('msg'=>'','avalibilty_left'=>$avalibilty);
echo json_encode($array_msg);

} else {
	if($avalibilty<0){
		$avalibilty=0;
	}
    $array_msg=array('msg'=>' Available seats are : '.$avalibilty.'','avalibilty_left'=>$avalibilty);
    echo json_encode($array_msg);
    //echo "No seats are available!";
}

}


function cancel_booking() {
//die("here");
global $user;
    $booking = array();
    $query12 = db_select('gbl_booking', 'gb')
            ->fields('gb')
            ->condition('id', check_plain($_POST['bid'], '='));
    $result12 = $query12->execute();
    $booking = $result12->fetchAssoc();

    $comm = getCommisionByuserForBooking($_POST['lid']);
    if ($comm['commission'] != "") {
        $commission = $comm['commission'];
    } else if (variable_get('commission') != "") {
        $commission = variable_get('commission');
    } else {
        $commission = "0.0";
    }
    $Currentdatetime = date("Y-m-d H:i:s");
    $arrivalDate = date("Y-m-d", strtotime($booking['arrive_at_date']));
    $arrivalTime = $booking['arrive_at_time'];
    $pos = strpos($arrivalTime, "-");
    if ($pos > 0) {
        $arrivalTime = substr_replace($arrivalTime, '', $pos, -2);
    }
    $time_in_24_hour_format = date("H:i", strtotime($arrivalTime));
    $arrivaldatetime = date('Y-m-d H:i:s', strtotime($arrivalDate . "" . $time_in_24_hour_format));
    $refundAmount = ((100 - $commission) * $booking['grand_total']) / 100;
    $rulesDetail = getRulesDetails($_POST['lid']);
    $rulesDetail = unserialize($rulesDetail["value1"]);
    $policyType = $rulesDetail['cancellation_policies_type'];
    switch ($policyType) {
        case 'Relaxed':
            $expiredDate = date('Y-m-d H:i:s', strtotime($arrivaldatetime . ' - 14 day'));

            if (strtotime($expiredDate) >= strtotime($Currentdatetime)) {
                $refundpercent = 100;
                $totalRefundAmount = $refundAmount;
            }
            break;
        case 'Flexible':
            $expiredDate = date('Y-m-d H:i:s', strtotime($arrivaldatetime . ' - 14 day'));
            $expiredDate_4Weeks = date('Y-m-d H:i:s', strtotime($arrivaldatetime . ' - 28 day'));
            if (strtotime($expiredDate) >= strtotime($Currentdatetime)) {
                $refundpercent = 25;
                $totalRefundAmount = ($refundpercent * $refundAmount) / 100;
            } else if (strtotime($expiredDate_4Weeks) >= strtotime($Currentdatetime)) {
                $refundpercent = 50;
                $totalRefundAmount = ($refundpercent * $refundAmount) / 100;
            }
            break;
        case 'Moderate':
            $expiredDate_4Weeks = date('Y-m-d H:i:s', strtotime($arrivaldatetime . ' - 28 day'));
            $refundpercent = 50;
            if (strtotime($expiredDate_4Weeks) >= strtotime($Currentdatetime)) {
                $totalRefundAmount = ($refundpercent * $refundAmount) / 100;
            }
            break;
        case 'Strict':
            $expiredDate_8Weeks = date('Y-m-d H:i:s', strtotime($arrivaldatetime . ' - 56 day'));
            if (strtotime($expiredDate_8Weeks) >= strtotime($Currentdatetime)) {
                $refundpercent = 50;
                $totalRefundAmount = (50 * $refundAmount) / 100;
            }
            break;
        case 'Super-Strict':
            $totalRefundAmount = 0;
            $refundpercent = 0;

            break;
        case 'Custom':
            if (($rulesDetail['amount_week_select'] == 'weeks') || ($rulesDetail['amount_week_select'] == 'months')) {
                if ($rulesDetail['amount_week_select'] == 'weeks') {
                    $weeksCount = $rulesDetail['amount_week_rental'] * 7;
                    $expiredDate = date('Y-m-d H:i:s', strtotime($arrivaldatetime . ' - ' . $weeksCount . ' day'));
                } else if ($rulesDetail['amount_week_select'] == 'months') {
                    $expiredDate = date('Y-m-d H:i:s', strtotime($arrivaldatetime . ' - ' . $rulesDetail['amount_week_rental'] . ' month'));
                }
                if (strtotime($expiredDate) >= strtotime($Currentdatetime)) {
                    $refundpercent = $rulesDetail['amount_week'];
                    $totalRefundAmount = ($refundpercent * $refundAmount) / 100;
                }
            } else if ($rulesDetail['amount_day_select'] == 'days') {
                $expiredDate = date('Y-m-d H:i:s', strtotime($arrivaldatetime . ' - ' . $rulesDetail['amount_day_rental'] . ' month'));
                if (strtotime($expiredDate) >= strtotime($Currentdatetime)) {
                    $refundpercent = $rulesDetail['amount_day'];
                    $totalRefundAmount = ($refundpercent * $refundAmount) / 100;
                }
            }
            break;
        default:
            $policyinfo = "";
            $totalRefundAmount = 0;
            break;
    }
    $query = db_update('gbl_booking')
            ->fields(array('booking_status' => 'refund_request'))
            ->condition('id', trim(check_plain($_POST['bid'])))
            ->condition('lid', trim(check_plain($_POST['lid'])))
            ->condition('uid', $user->uid, '=');
    $result = $query->execute();
    /*     * ************************Insert in refund table****************************** */
    $query1 = db_insert('gbl_refunds')
            ->fields(array('refund_msg' => trim(check_plain($_POST["text_msg"])),'uid' => $user->uid, 'bid' => trim(check_plain($_POST['bid'])), 'lid' => trim(check_plain($_POST['lid'])), 'refund_status' => 'request', 'refund_amount' => $totalRefundAmount, 'refund_request_on' => $Currentdatetime));
    $result1 = $query1->execute();
    
        $query_credits = db_select('gbl_credit_user', 'cu');
            $query_credits->fields('cu',array('credits_assigned'))->condition('cu.uid', $user->uid);
            $result_credits = $query_credits->execute();
            $res_credits = $result_credits->fetchAll(PDO::FETCH_ASSOC);
            if(!empty($res_credits) && is_array($res_credits)){
                $credits_assigned=$res_credits[0]['credits_assigned'];
                //echo "<pre>";Print_r($res_credits[0]['credits_assigned']);exit;
                if($credits_assigned>0){
                    $booking_credits=50;
                    $creditData = db_update('gbl_credit_user')
                        ->fields(array('credits_assigned' => ($credits_assigned - $booking_credits),'credits' => ($credits_assigned - $booking_credits)))
                        ->condition('uid', $user->uid)
                        ->execute();
                }
                
            }
    /*********************************************************************************** */
    if ($result1) {
//mail send
        echo "sucess"; exit;
        //drupal_set_message(t('we have got your booking cancellation request.We will process it shortly'));
        //drupal_goto('mytrips');
    }

}