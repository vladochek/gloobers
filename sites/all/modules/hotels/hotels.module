<?php

global $user, $base_url;

function hotels_menu()
{

    $items = array();


    $items["hotel/%"] = array(
        'page callback' => 'getHotel',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );

    return $items;
}

function hotels_theme(&$existing, $type, $theme, $path)
{
    $module_path = drupal_get_path('module', 'hotels');

    return array(
        'hotel_list' => array(
            'template' => 'hotel_list',
            'path' => $module_path . '/templates',
        ),
        'add_hotel' => array(
            'template' => 'add_hotel',
            'path' => $module_path . '/templates',
        ),

    );
}

function get_facility_categories_full_info($facilities){
    if(is_array($facilities) && count($facilities)) {
        $codes = [];
        $groups = [];
        foreach ($facilities as $facility) {
            $codes[] = $facility->facilityCode;
            $groups[] = $facility->facilityGroupCode;
        }
        $query = db_select('gbl_hotel_amenities', 'am');
        $query->leftJoin('gbl_hotel_amenities_groups', 'amg', 'am.group_code = amg.code');
        $query->fields('am');
        $query->addExpression('amg.name', 'group_name');
        $query->condition('am.code', array_unique($codes), 'IN');
        $query->condition('am.group_code',  array_unique($groups), 'IN');
        return $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    }
}

function get_facility_groups_full_info($facilities){
    if(is_array($facilities) && count($facilities)) {
        $groups = [];
        foreach ($facilities as $facility) {
            $groups[] = $facility->facilityGroupCode;
        }
        $query = db_select('gbl_hotel_amenities_groups', 'amg');
        $query->fields('amg');
        $query->condition('amg.code',  array_unique($groups), 'IN');
        return $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    }
}



function getHotel(){
    $hotelCode = arg(1);
    $daterange = filter_input(INPUT_GET, 'daterange');
    $dates = isset($daterange) ? explode(' - ', $daterange) : '';
    $dateFromSegments = explode('/', $dates[0]);
    $checkIn = $dateFromSegments[2] . '-' . $dateFromSegments[1] . '-' . $dateFromSegments[0];
    $dateToSegments = explode('/', $dates[1]);
    $checkOut = $dateToSegments[2] . '-' . $dateToSegments[1] . '-' . $dateToSegments[0];
    $testCheckIn = explode('-', $checkIn);
    $testCheckOInValidation = checkdate($testCheckIn[1], $testCheckIn[2], $testCheckIn[0]);
    $testCheckOut = explode('-', $checkOut);
    $testCheckOutValidation = checkdate($testCheckOut[1], $testCheckOut[2], $testCheckOut[0]);

    $maxRate = filter_input(INPUT_GET, 'maxRate');
    $minRate = filter_input(INPUT_GET, 'minRate');
    $search_destination = filter_input(INPUT_GET, 'destination');
    $adults = filter_input(INPUT_GET, 'adults');
    $children = filter_input(INPUT_GET, 'childrens');//0
    $rooms = filter_input(INPUT_GET, 'rooms');//1
    $page = filter_input(INPUT_GET, 'page');//1
    $page = $page ? $page : 1;
    $rooms = $rooms ? $rooms : 1;
    $children = $children ? $children : 0;

    $mapsResponse = searchLocationByQuery($search_destination);

    if (isset($mapsResponse->results[0]->geometry->location->lat) &&
        isset($mapsResponse->results[0]->geometry->location->lng) && $testCheckOInValidation &&
        $testCheckOutValidation
    ) {
        $latitude = $mapsResponse->results[0]->geometry->location->lat;
        $longitude = $mapsResponse->results[0]->geometry->location->lng;
        $api = new Hotelbeds();
        $hotels = $api->hotelbeds_get_hotels($latitude, $longitude, $checkIn, $checkOut, $rooms, $adults, $children, $minRate, $maxRate, $page, $hotelCode);
        $facilityGroups = get_facility_groups_full_info($hotels['hotels_info'][0]->facilities);
        var_dump($facilityGroups);die;
    }
}