<?php function services(){menu_rebuild();$output='<div class="region region-content">			<div class="block block-system" id="block-system-main">				<div class="content">					<div class="admin clearfix">						<div class="left clearfix">													   <div class="admin-panel"><h3>Manage Users</h3>								<div class="body">									<ul class="admin-list">										<li class="leaf"><a href="'.url('admin/usersDetail/list').'">Users List</a>											<div class="description">Users list And Earnings</div>										</li>									</ul>							  </div>						</div>					    <div class="admin-panel"><h3>Manage Membership</h3>								<div class="body">									<ul class="admin-list">                                     													<li class="leaf"><a href="'.url('admin/listing/price').'">Membership Pricing</a>											<div class="description">Manage Membership Pricing</div>										</li>																		</ul>							  </div>						</div>						<div class="admin-panel"><h3>Manage User Passions</h3>							<div class="body">									<ul class="admin-list">                                     													<li class="leaf"><a href="'.url('admin/passion/category').'">Manage User Passions Category</a>											<div class="description">Manage User Passions Category</div>										</li>																		</ul>							  </div>								<div class="body">									<ul class="admin-list">                                     													<li class="leaf"><a href="'.url('admin/passions').'">Manage User Passions</a>											<div class="description">Manage User Passions</div>										</li>																		</ul>							  </div>							  </div>							  <div class="admin-panel"><h3>Manage Deals Item</h3>								<div class="body">									<ul class="admin-list">                                   													<li class="leaf"><a href="'.url('admin/deal/list').'">Deals List</a>											<div class="description">Manage Deals list</div>										</li>                                       <li class="leaf"><a href="'.url('admin/transactions/history').'">Transactions Details</a>											<div class="description">View All  Transactions list</div>										</li>																			</ul>							  </div>						</div>					<div class="admin-panel"><h3>Gloobers Charges Settings</h3>								<div class="body">									<ul class="admin-list">                                   													<li class="leaf"><a href="'.url('admin/revenue/charges').'">Charges Paid by user to gloobers</a>											<div class="description">Manage Profit charges</div>										</li>	                                       <li class="leaf"><a href="'.url('admin/revenue/user/charges').'">Manage commision paid by user to gloobers</a>											<div class="description">Manage Profit charges By user</div>										</li>                                      <li class="leaf"><a href="'.url('admin/paypal/credentials').'">Manage Paypal Api Credentials</a>											<div class="description">Insert/update paypal Api credentials</div>										</li>																			<li class="leaf"><a href="'.url('admin/manage/credits').'">Manage Credits per dollor</a>											<div class="description">Add/edit credits per dollor</div>										</li>									</ul>							  </div>						</div>							</div>				<div class="right clearfix">							<div class="admin-panel"><h3>Manage Homepage Video</h3>								<div class="body">									<ul class="admin-list">                                   													<li class="leaf"><a href="'.url('admin/manage/video').'">Manage home page video</a>											<div class="description">Manage Profit charges</div>										</li>																	</ul>							  </div>					       </div>					<div class="admin-panel"><h3>Manage Advisor Pricing Plans</h3>								<div class="body">									<ul class="admin-list">								         													<li class="leaf"><a href="'.url('admin/manage/plans').'">Manage Advisor plans</a>											<div class="description">Add,edit,delete advisor plans for user</div>										</li>									</ul>							  </div>                                  							  						</div>						<div class="admin-panel"><h3>Manage Countries</h3>								<div class="body">									<ul class="admin-list">								         													<li class="leaf"><a href="'.url('admin/country/list').'">Countries List</a>											<div class="description">See Countries list detail containing name,currency etc.</div>										</li>									</ul>							  </div>																		</div>                  <div class="admin-panel"><h3>Manage Experience Listing</h3>								<div class="body">									<ul class="admin-list">								         													<li class="leaf"><a href="'.url('admin/experiencetype').'">Experience Type</a>											<div class="description">Manage Experience Type</div>										</li>										<li class="leaf"><a href="'.url('admin/experienceCategory').'">Experience Category</a>											<div class="description">Manage Experience Category</div>										</li>									</ul>							  </div>																		</div>									    </div>				</div>									</div>  </div>	</div>';	return $output;}function userDetail_list(){$title="";if(isset($_GET['title']) && $_GET['title'] != ""){	$title = trim(check_plain($_GET['title']));	}drupal_add_css(drupal_get_path('module', 'services') .'/css/experience_view.css','file');$userList=getAllusersList($title);$searchForm=drupal_get_form('searchUser_form');$output = '';$userList = pager_array_splice($userList, 10);$output .= theme('pager', array('quantity' => 10));return theme('userDetail_list',array('userList'=>$userList,'searchForm'=>$searchForm,'pagination'=>$output));}/*****************************************Multi delete option in table******************************************************/ function auto_form_records($form, &$form_state) { /************************************************************/ $output			=	'';$searchQuery	=   '';$searchCriteria	=	'gcl.country_name';$filter				=	'%';$filterCond			=	'like';$filterFields		=	'gcl.id';if (arg(8)!='0' && arg(8)!='') {        $filter			=	arg(8);        $filterCond		=	'=';        switch ($filter) {                case 'yes':            $filter				=	1;            $filterFields		=	'gcl.activate';            break;        case 'no':            $filter				=	0;            $filterFields		=	'gcl.activate';            break;        default:            $filter				=	'%';            $filterCond			=	'like';            $filterFields		=	'gcl.id';            break;        }    }	/*********************/	if (arg(4)!='00' && arg(4)!='') {        $searchQuery			=	arg(4);        $searchCriteria		=	arg(6);            } /************************************************************///Table header    $header = array(	   // '',        t('Country Name'),         t('Continent'),        t('ISO Code') ,        t('Phone code'),        t('Currency Code'),		t('Currency'),        t('Status'),        t('Action')		    );	//DB query    $dbresult = 	db_select('gbl_country_list', 'gcl')->extend('PagerDefault');   // $query 		= 	db_select('gbl_country_list', 'gcl');  	$dbresult->fields('gcl');		$dbresult->condition($filterFields,$filter,$filterCond);	$dbresult->condition($searchCriteria,"%$searchQuery%",'like');	//$query->orderBy($order, $sort);	$dbresult->limit(20);			 $result=$dbresult->execute();       while($dbrow = $result->fetchObject())	   {	              $select_id[] = array(			$dbrow->id            // $dbrow->country_name,            // $dbrow->continent,            );		    if ($dbrow->activate==1) {        			 $visible_status		=	 '<a href="'.url('admin/country/activate/'.$dbrow->id.'/0').'">Deactivate</a>';			}        else {                  $visible_status		=	 '<a href="'.url('admin/country/activate/'.$dbrow->id.'/1').'">Activate</a>';        }            $rows[$dbrow->id] = array(			//$dbrow->id,            $dbrow->country_name,            $dbrow->continent,                     $dbrow->iso_code,                     $dbrow->phone_code,                     $dbrow->currency_code,                     $dbrow->currency_name,						 $visible_status,					 '<a href="'.url('admin/country/edit/'.$dbrow->id).'" >Edit</a>&nbsp',            );        }		$form['page_no']=array(		                 '#type' => 'hidden',                         '#value' =>($_GET['page'])?$_GET['page']:0				 		                  );		 $form['checkboxes'] = array(        '#type' => 'tableselect',        '#header' => $header,        '#options' => $rows,        '#empty' => 'Country list is empty!',        //'#default_value' => $select_id    );	$form['activate'] = array(            '#type' => 'submit',            '#value' => t('Activate'),    );	 $form['deactivate'] = array(            '#type' => 'submit',            '#value' => t('Deactivate'),    );	 $form['pager'] = array('#markup' => theme('pager'));        return $form;		}function auto_form_records_submit($form, &$form_state){		$selected = array_filter($form_state['values']['checkboxes']);	if(count($selected)>0)	{		if($form_state['values']['op']=="Deactivate")		{				 $query =	db_update('gbl_country_list')				->fields(array('activate'=>0))				->condition('id', $selected, 'IN')				->execute();				drupal_set_message(t('Countries Deactivated Successfully'));		}		else		{		$query =	db_update('gbl_country_list')				->fields(array('activate'=>1))				->condition('id', $selected, 'IN')				->execute();				drupal_set_message(t('Countries Activated Successfully'));		}	}    $url=current_path();     drupal_goto($url);       }/************************************************************************************************/function gbl_country_search_form($form,&$form_state) {$filterArr			=	array('all'=>'All','yes'=>'Activated','no'=>'Deactivated');    $form['page_no']=array(		                 '#type' => 'hidden',                         '#value' =>($_GET['page'])?$_GET['page']:0				 		                  );        //Filter Button    $form['lt_idea']['filter'] = array(                                '#type' => 'select',                                '#title' => t('Country visible status'),                                '#required' => False,                                '#options' => $filterArr,                                '#default_value'	=>	arg(8),								//'#attributes' => array('onchange' => "form.submit('dropdown')"),                            );    $criteria				=	array(                       'gcl.country_name'=>'Country',                       'gcl.continent'=>'Continent',                       'gcl.phone_code'=>'Phone Code',                       'gcl.currency_name'=>'Currency',                                          );    $form['lt_idea']['criteria'] = array(                                  '#type' => 'select',                                  '#title' => t('Search By'),                                  '#required' => false,                                  '#options' => $criteria,                                  '#default_value' => (arg(6)=='')?'country_name':arg(6),								  //'#attributes' => array('onchange' => "form.submit('dropdown')"),                              );    $form['lt_idea']['search'] = array(                                '#type' => 'textfield',                                '#title' => t('Search Country'),                                '#required' => FALSE,                                '#default_value' => (arg(4)=='00')?'':arg(4),                            );    $form['actions'] = array('#type' => 'actions');    $form['actions']['submit'] = array(                                     '#type' => 'submit',                                     '#value' => t('Search'),                                     '#weight' => 19,                                 );		    return $form;}function gbl_country_search_form_submit($form,&$form_state){$filter		=	$form_state['values']['filter'];     $formFields		=	$form_state['values'];    $criteria		=	($form_state['values']['criteria']!='')?$form_state['values']['criteria']:'gcl.country_name';    $search			=	($form_state['values']['search']!='')?$form_state['values']['search']:'00';	$url			=	current_path();   drupal_goto('admin/country/list/search/'.$search.'/criteria/'.$criteria.'/filter/'.$filter);   // if (strpos($url,'filter')) {   /* if($filter){	        drupal_goto('admin/country/list/search/'.$search.'/criteria/'.$criteria.'/filter/'.$filter);    }    else {        drupal_goto('admin/country/list/search/'.$search.'/criteria/'.$criteria);    } */}/********************************************Add new Country***********************************************/function country_add_form($form,&$form_state){global $user;$continent=getContinent();$form['country'] = array(                      '#type' => 'fieldset',                      '#title' => t('Add New Country:'),                  );    $form['country']['#tree'] = TRUE;        	$form['country']['country_name'] = array(                               '#type' => 'textfield',                               '#title' => t('Country'),                               '#required' => TRUE,							   '#maxlength' => 50,							   //'#attributes' => array('required'=>'required'),							   '#autocomplete_path' => 'country/autocomplete'                           );						              $form['country']['continent'] = array(                                  '#type' => 'select',                                  '#title' => t('Select Continent'),                                  '#required' => TRUE,	                                 //  '#attributes' => array('required'=>'required'),								  								  '#options'=>$continent,                              );	$form['country']['iso_code'] = array(                             '#type' => 'textfield',                             '#title' => t('ISO Code'),                             //'#required' => TRUE,							 '#maxlength' => 20,                         );    $form['country']['phone_code'] = array(                             '#type' => 'textfield',                             '#title' => t('Phone Code'),							 '#maxlength' => 20,                            							                          );										     $form['country']['currency_code'] = array(                             '#type' => 'textfield',                             '#title' => t('Country code'),                             //'#required' => TRUE,							 '#maxlength' => 10,							                         );	     $form['country']['currency_name'] = array(                             '#type' => 'textfield',                             '#title' => t('Currency Name'),                             //'#required' => TRUE,							 '#maxlength' => 30,							                         );							         $form['actions'] = array('#type' => 'actions');    $form['actions']['submit'] = array(                                     '#type' => 'submit',                                     '#value' => t('Save'),                                     '#weight' => 19,                                   									 );$form['actions']['cancel'] = array(    '#type'   => 'submit',    '#value'  => t('Cancel'),    '#submit' => array('country_add_form_cancel'),    '#limit_validation_errors' => array(),	'#weight' => 20,  ); return $form;}function country_add_form_cancel($form, &$form_state){   drupal_goto('admin/country/list');}function country_add_form_validate($form,&$form_state){$formFields		=	$form_state['values'];$result = db_select('gbl_country_list', 'gcl')    ->fields('gcl')	->condition('country_name',trim($formFields['country']['country_name']),'=')	->execute();	if($result->rowCount() >0)	{		form_set_error('error','Country already exist');		return false;	}	else {		return true;	}}function country_add_form_submit($form,&$form_state){$formFields		=	$form_state['values'];	$result = db_insert('gbl_country_list') ->fields(array(  'country_name' => trim($formFields['country']['country_name']),  'continent' => trim($formFields['country']['continent']),  'iso_code' => trim($formFields['country']['iso_code']),  'phone_code' => trim($formFields['country']['phone_code']),  'currency_code' => trim($formFields['country']['currency_code']),  'currency_name'=>trim($formFields['country']['currency_name']),  ))->execute();      if($result)    {	      drupal_set_message('New Country added Successfully!!');    drupal_goto('admin/country/list');	}}function country_edit_form($form,&$form_state){$continent=getContinent();$countryData=getCountryData(arg(3));$form['country'] = array(                      '#type' => 'fieldset',                      '#title' => t('Update Country Details:'),                  );    $form['country']['#tree'] = TRUE; 	$form['country']['country_id']=array(	                                   '#type' => 'hidden',									   '#value' => arg(3)	                                     );	$form['country']['country_name'] = array(                               '#type' => 'textfield',                               '#title' => t('Country'),                               '#required' => TRUE,							   '#maxlength' => 50,							   //'#attributes' => array('required'=>'required'),							   //'#autocomplete_path' => 'country/autocomplete'							   '#default_value'=>($countryData['country_name'])?$countryData['country_name']:'',                           );						              $form['country']['continent'] = array(                                  '#type' => 'select',                                  '#title' => t('Select Continent'),                                  '#required' => TRUE,	                                 //  '#attributes' => array('required'=>'required'),								  								  '#options'=>$continent,								  '#default_value' =>$countryData['continent'],                              );	$form['country']['iso_code'] = array(                             '#type' => 'textfield',                             '#title' => t('ISO Code'),                             //'#required' => TRUE,							 '#maxlength' => 2,							 '#default_value'=>($countryData['iso_code'])?$countryData['iso_code']:'',                         );    $form['country']['phone_code'] = array(                             '#type' => 'textfield',                             '#title' => t('Phone Code'),							 '#maxlength' => 15,                             '#default_value'=>($countryData['phone_code'])?$countryData['phone_code']:'',							                          );										     $form['country']['currency_code'] = array(                             '#type' => 'textfield',                             '#title' => t('Country code'),                             //'#required' => TRUE,							 '#maxlength' => 3,							 '#default_value'=>($countryData['currency_code'])?$countryData['currency_code']:'',							                         );	     $form['country']['currency_name'] = array(                             '#type' => 'textfield',                             '#title' => t('Currency Name'),                             //'#required' => TRUE,							 '#maxlength' => 29,							  '#default_value'=>($countryData['currency_name'])?$countryData['currency_name']:'',							                         );							         $form['actions'] = array('#type' => 'actions');    $form['actions']['submit'] = array(                                     '#type' => 'submit',                                     '#value' => t('Update'),                                     '#weight' => 19,                                   									 );$form['actions']['cancel'] = array(    '#type'   => 'submit',    '#value'  => t('Cancel'),    '#submit' => array('country_add_form_cancel'),    '#limit_validation_errors' => array(),	'#weight' => 20,  ); return $form;}function country_edit_form_submit($form,&$form_state){  $formFields		=	$form_state['values'];   $fieldsArr		=	array(                      'country_name'=>trim($formFields['country']['country_name']),                      'continent' => trim($formFields['country']['continent']),					  'iso_code' => trim($formFields['country']['iso_code']),					  'phone_code' => trim($formFields['country']['phone_code']),					  'currency_code' => trim($formFields['country']['currency_code']),					  'currency_name'=>trim($formFields['country']['currency_name']),                  );$returnId		=	db_update('gbl_country_list')                 ->fields($fieldsArr)                 ->condition('id', trim($formFields['country']['country_id']), '=')                 ->execute();    drupal_set_message('Country Details Data Has Been Updated Successfully!!');    drupal_goto('admin/country/list');}function country_status(){$status=arg(4);$countryId=arg(3);$result		=	db_update('gbl_country_list')                 ->fields(array('activate'=>$status))                 ->condition('id',$countryId, '=')                 ->execute();				 	if($status==0)	{	$statusDetail="Deactivated";	}	else	{	$statusDetail="Activated";	}drupal_set_message(t('Country'.$statusDetail.'Successfully'));drupal_goto('admin/country/list');	}/**************************************Experience Type****************************************************************/function experience_type(){	$header = array(                  array(                      "data" => t('Id'),                      "field" => "id"                  ),                  array(                      "data" => t('Experience Type'),                      "field" => "experience_type"                  ),				  				                    array(                      "data" => t('Status'),                  ),				  array(                      "data" => t('Action'),                  )              );    $rows		=	array();    $query 		= 	db_select('gbl_experience_type', 'get');    $query->fields('get');    $query->condition('status',1,'=');	$result		=	$query->execute();	while($data = $result->fetchObject())	{			if ($data->status) {		$visible_status		=	t('Activated');		}		else {		$visible_status		=	t('Deactivated');		} 	$rows[] = array(                    $data->id,                    $data->experience_type,                    $visible_status,					 '<a href="'.url('admin/experienceType/edit/'.$data->id).'" >'.t('Edit').'</a>',                  );		}		  				   $output .='<div style="clear:both"></div>';				   $output.='<ul class="action-links"><li><a href="'.url('admin/experienceType/add').'">Add New Experience Type</a></li></ul>';    $output .= theme_table(                   array(                       "header" => $header,                       "rows" => $rows,                       "attributes" => array("width"=>"100%"),                     //  "sticky" => true, // Table header will be sticky                       "caption" => "",                       "colgroups" => array(),                       "empty" => t("Expereince type list is empty!"), // The message to be displayed if table is empty                   )               );    return $output;			  			  }/**************Add new experience Type****************************************************************************************/function experience_type_add_form($form,&$form_state){     $form=array();   $form['experiencetype'] = array(                      '#type' => 'fieldset',                      '#title' => t('Add New Experience Type'),                  );    $form['experiencetype']['#tree'] = TRUE;        	$form['experiencetype']['experience_type'] = array(                               '#type' => 'textfield',                               '#title' => t('Experience Type'),                               '#required' => TRUE,							   '#maxlength' => 100,							   //'#attributes' => array('required'=>'required'),							                             );			     						      $form['experiencetype']['experience_type_action'] = array(                              '#type' => 'radios',                               '#title' => t('Experience Type Status'),                               '#required' => TRUE,							  '#options' => array('1'=>t('Activate'),'0'=>t('Deactivate')),							  '#default_value' =>1,							   //'#attributes' => array('required'=>'required'),							  );		     						     $form['actions'] = array('#type' => 'actions');    $form['actions']['submit'] = array(                                     '#type' => 'submit',                                     '#value' => t('Save'),                                     '#weight' => 19,                                   									 );$form['actions']['cancel'] = array(    '#type'   => 'submit',    '#value'  => t('Cancel'),    '#submit' => array('experiencetype_cancel'),    '#limit_validation_errors' => array(),	'#weight' => 20,  ); return $form;}function experience_type_add_form_submit($form,&$form_state){$query=db_insert('gbl_experience_type')		 ->fields(array(	  'experience_type' => trim($form_state['values']['experiencetype']['experience_type']),	  'status' =>$form_state['values']['experiencetype']['experience_type_action'],	  	))->execute();      if($query)    {	      drupal_set_message('New Experience Type added Successfully!!');    drupal_goto('admin/experiencetype');	}}function experiencetype_cancel($form,&$form_state){drupal_goto('admin/experiencetype');}function experience_type_edit_form($form,&$form_state){  $query=db_select('gbl_experience_type','get')      ->fields('get')	  ->condition('id',arg(3),'=')	  ->execute();  $data=$query->fetchAssoc(); 	  /* echo "<pre>";  print_r($data);  die; */   $form=array();   $form['experiencetype'] = array(                      '#type' => 'fieldset',                      '#title' => t('Edit Experience Type'),                  );    $form['experiencetype']['#tree'] = TRUE; 	$form['experiencetype']['experience_type'] = array(                               '#type' => 'hidden',                                '#value' => arg(3)							                             );		$form['experiencetype']['experience_type'] = array(                               '#type' => 'textfield',                               '#title' => t('Experience Type'),                               '#required' => TRUE,							   '#maxlength' => 100,							  '#default_value' =>$data['experience_type'],							   //'#attributes' => array('required'=>'required'),							                             );			     						      $form['experiencetype']['experience_type_action'] = array(                              '#type' => 'radios',                               '#title' => t('Experience Type Status'),                               '#required' => TRUE,							  '#options' => array('1'=>t('Activate'),'0'=>t('Deactivate')),							  '#default_value' =>$data['status'],							   //'#attributes' => array('required'=>'required'),							  );		     						     $form['actions'] = array('#type' => 'actions');    $form['actions']['submit'] = array(                                     '#type' => 'submit',                                     '#value' => t('Save'),                                     '#weight' => 19,                                   									 );$form['actions']['cancel'] = array(    '#type'   => 'submit',    '#value'  => t('Cancel'),    '#submit' => array('experiencetype_cancel'),    '#limit_validation_errors' => array(),	'#weight' => 20,  ); return $form;}  function experience_type_edit_form_submit($form,&$form_state){$query=db_update('gbl_experience_type')		 ->fields(array(	  'experience_type' => trim($form_state['values']['experiencetype']['experience_type']),	  'status' =>$form_state['values']['experiencetype']['experience_type_action'],	  	))	->condition('id',arg(3),'=')    ->execute();          drupal_set_message('Experience Type data updated Successfully');    drupal_goto('admin/experiencetype');	} /*********************************************Experience Category***************************************************************************/function experience_category(){$header = array(                  array(                      "data" => t('Id'),                      "field" => "id"                  ),				   array(                      "data" => t('Experience category'),                      "field" => "category_name"                  ),                  array(                      "data" => t('Experience Type'),                      //"field" => "experience_type"                  ),				  				                    array(                      "data" => t('Status'),                  ),				  array(                      "data" => t('Action'),                  )              );    $rows		=	array();    $query 		= 	db_select('gbl_experience_category', 'gec')->extend('PagerDefault');    $query->fields('gec');    $query->condition('status',1,'=');	$result		=	$query->execute();	while($data = $result->fetchObject())	{	$experienceTypeData=getExperienceTypeById($data->tid);			if ($data->status) {		$visible_status		=	t('Activated');		}		else {		$visible_status		=	t('Deactivated');		} 	$rows[] = array(                    $data->cid,                    $data->category_name,					$experienceTypeData['experience_type'],                    $visible_status,					 '<a href="'.url('admin/experienceCategory/edit/'.$data->cid).'" >'.t('Edit').'</a>',                  );		}		  				   $output .='<div style="clear:both"></div>';				   $output.='<ul class="action-links"><li><a href="'.url('admin/experienceCategory/add').'">Add New Experience Category</a></li></ul>';    $output .= theme_table(                   array(                       "header" => $header,                       "rows" => $rows,                       "attributes" => array("width"=>"100%"),                     //  "sticky" => true, // Table header will be sticky                       "caption" => "",                       "colgroups" => array(),                       "empty" => t("Expereince category list is empty"), // The message to be displayed if table is empty                   )               ).theme("pager");    return $output;			 }function experience_category_add_form($form,&$form_state){$form=array();   $experienceType=getExperienceType();   $form['experiencecategory'] = array(                      '#type' => 'fieldset',                      '#title' => t('Add New Experience Category'),                  );    $form['experiencecategory']['#tree'] = TRUE;        $form['experiencecategory']['experience_type'] = array(                              '#type' => 'select',                               '#title' => t('Experience Type'),                               '#required' => TRUE,							  '#options' => $experienceType,							   //'#attributes' => array('required'=>'required'),							  );		$form['experiencecategory']['experience_category'] = array(                               '#type' => 'textfield',                               '#title' => t('Experience category'),                               '#required' => TRUE,							   '#maxlength' => 100,							   //'#attributes' => array('required'=>'required'),							                             );			     						    		     						     $form['actions'] = array('#type' => 'actions');    $form['actions']['submit'] = array(                                     '#type' => 'submit',                                     '#value' => t('Save'),                                     '#weight' => 19,                                   									 );$form['actions']['cancel'] = array(    '#type'   => 'submit',    '#value'  => t('Cancel'),    '#submit' => array('experiencecategory_cancel'),    '#limit_validation_errors' => array(),	'#weight' => 20,  ); return $form;}function experiencecategory_cancel($form,&$form_state){drupal_goto('admin/experienceCategory');}function experience_category_add_form_submit($form,&$form_state){$query=db_insert('gbl_experience_category')        ->fields(array('tid'=>$form_state['values']['experiencecategory']['experience_type'],'category_name'=>trim($form_state['values']['experiencecategory']['experience_category'])))		->execute();	if($query)    {    drupal_set_message('New Experience Category added Successfully');    drupal_goto('admin/experienceCategory');   }	}function experience_category_edit_form($form,&$form_state){   $experienceType=getExperienceType();   $query=db_select('gbl_experience_category','gec')      ->fields('gec')	  ->condition('cid',arg(3),'=')	  ->execute();  $data=$query->fetchAssoc(); 	   $form['experiencecategory'] = array(                      '#type' => 'fieldset',                      '#title' => t('Update Experience Category'),                  );    $form['experiencecategory']['#tree'] = TRUE;        $form['experiencecategory']['experience_type'] = array(                              '#type' => 'select',                               '#title' => t('Experience Type'),                               '#required' => TRUE,							  '#options' => $experienceType,							  '#default_value'=>$data['tid'],							   //'#attributes' => array('required'=>'required'),							  );		$form['experiencecategory']['experience_category'] = array(                               '#type' => 'textfield',                               '#title' => t('Experience category'),                               '#required' => TRUE,							   '#maxlength' => 100,							   '#default_value'=>$data['category_name'],							   //'#attributes' => array('required'=>'required'),							                             );			     						    	 $form['experiencecategory']['experience_category_action'] = array(                              '#type' => 'radios',                               '#title' => t('Experience Category Status'),                               '#required' => TRUE,							  '#options' => array('1'=>t('Activate'),'0'=>t('Deactivate')),							  '#default_value' =>$data['status'],							   //'#attributes' => array('required'=>'required'),							  );		     						     $form['actions'] = array('#type' => 'actions');    $form['actions']['submit'] = array(                                     '#type' => 'submit',                                     '#value' => t('Save'),                                     '#weight' => 19,                                   									 );$form['actions']['cancel'] = array(    '#type'   => 'submit',    '#value'  => t('Cancel'),    '#submit' => array('experiencecategory_cancel'),    '#limit_validation_errors' => array(),	'#weight' => 20,  ); return $form;}function experience_category_edit_form_submit($form,&$form_state){ $query=db_update('gbl_experience_category')       ->fields(array('tid'=>$form_state["values"]["experiencecategory"]["experience_type"],	   'category_name'=>$form_state["values"]["experiencecategory"]["experience_category"],	   'status'=>$form_state["values"]["experiencecategory"]["experience_category_action"]))	   ->condition('cid',arg(3),'=')	   ->execute();	  drupal_set_message(' Experience Category updated Successfully');    drupal_goto('admin/experienceCategory');   }function member_listing_price(){$output="";$header = array(                  array(                      "data" => t('Id'),                      "field" => "id"                  ),				   array(                      "data" => t('Package Name'),                      "field" => "package_name"                  ),				   array(                      "data" => t('Package Description'),                    //  "field" => "package_name"                  ),                  array(                      "data" => t('Package Cost(in $)'),                      "field" => "package_cost"                  ),				  				  				  array(                      "data" => t('Action'),                  )              );    $rows		=	array();    $query 		= 	db_select('gbl_package_list', 'gec');    $query->fields('gec');    $result		=	$query->execute();	while($data = $result->fetchObject())	{		$rows[] = array(                    $data->id,                    $data->package_name,                    $data->description,                    $data->package_cost,					'<a href="'.url('admin/listing/price/edit/'.$data->id).'" >'.t('Edit').'</a>',                  );		}		  				   $output .='<div style="clear:both"></div>';				   $output.='<ul class="action-links"><li><a href="'.url('admin/listing/price/add').'">Add New Membership Pricing</a></li></ul>';    $output .= theme_table(                   array(                       "header" => $header,                       "rows" => $rows,                       "attributes" => array("width"=>"100%"),                       "sticky" => true, // Table header will be sticky                       "caption" => "",                       "colgroups" => array(),                       "empty" => t("Membership pricing data is empty"), // The message to be displayed if table is empty                   )               ).theme("pager");    return $output;}function listing_pricing_edit_form($form,&$form_state){$query 		= 	db_select('gbl_package_list', 'gec');$query->fields('gec');$query->condition('id',arg(4));$result		=	$query->execute();$detail=$result->fetchAssoc();	$form=array();     $form['experiencecategory'] = array(                      '#type' => 'fieldset',                      '#title' => t('Update Membership Listing Price'),                  );    $form['experiencecategory']['#tree'] = TRUE;        $form['experiencecategory']['package_name'] = array(                              '#type' => 'textfield',                               '#title' => t('Package Name'),                               '#required' => TRUE,							   '#maxlength' => 100,							  '#attributes' => array('required'=>'required'),							  '#default_value'=>($detail['package_name'])?$detail['package_name']:''							  );	$form['experiencecategory']['package_description'] = array(                              '#type' => 'textarea',                               '#title' => t('Package Description'),                               '#required' => TRUE,							   '#attributes' => array('required'=>'required'),							  '#default_value'=>($detail['description'])?$detail['description']:''							  );		$form['experiencecategory']['package_cost'] = array(                               '#type' => 'textfield',                               '#title' => t('Package Cost'),                               '#required' => TRUE,							   '#attributes' => array('required'=>'required'),	                               '#default_value'=>($detail['package_cost'])?$detail['package_cost']:''							                              );			     						    		     						     $form['actions'] = array('#type' => 'actions');    $form['actions']['submit'] = array(                                     '#type' => 'submit',                                     '#value' => t('Save'),                                     '#weight' => 19,                                   									 );/* $form['actions']['cancel'] = array(    '#type'   => 'submit',    '#value'  => t('Cancel'),    '#submit' => array('experiencecategory_cancel'),    '#limit_validation_errors' => array(),	'#weight' => 20,  ); */ return $form;}function listing_pricing_edit_form_submit($form,&$form_state){$query=db_update('gbl_package_list')       ->fields(array('package_name'=>trim($form_state['values']['experiencecategory']['package_name']),'description'=>trim($form_state['values']['experiencecategory']['package_description']),'package_cost'=>trim($form_state['values']['experiencecategory']['package_cost'])))         ->condition('id',arg(4),'=')	 	   ->execute();drupal_set_message('Membership Price updated Successfully');drupal_goto('admin/listing/price');}function listing_pricing_add_form($form,&$form_state){$form=array();     $form['experiencecategory'] = array(                      '#type' => 'fieldset',                      '#title' => t('Add New Membership Listing Price'),                  );    $form['experiencecategory']['#tree'] = TRUE;        $form['experiencecategory']['package_name'] = array(                              '#type' => 'textfield',                               '#title' => t('Package Name'),                               '#required' => TRUE,							   '#maxlength' => 100,							  '#attributes' => array('required'=>'required'),							  );    $form['experiencecategory']['package_description'] = array(                              '#type' => 'textarea',                               '#title' => t('Package Description'),                               '#required' => TRUE,							   '#attributes' => array('required'=>'required'),							  							  );								  	$form['experiencecategory']['package_cost'] = array(                               '#type' => 'textfield',                               '#title' => t('Package Cost'),                               '#required' => TRUE,							   '#attributes' => array('required'=>'required'),							                             );			     						    		     						     $form['actions'] = array('#type' => 'actions');    $form['actions']['submit'] = array(                                     '#type' => 'submit',                                     '#value' => t('Save'),                                     '#weight' => 19,                                   									 );/* $form['actions']['cancel'] = array(    '#type'   => 'submit',    '#value'  => t('Cancel'),    '#submit' => array('experiencecategory_cancel'),    '#limit_validation_errors' => array(),	'#weight' => 20,  ); */ return $form;}function listing_pricing_add_form_submit($form,&$form_state){$query=db_insert('gbl_package_list')       ->fields(array('package_name'=>trim($form_state['values']['experiencecategory']['package_name']),'description'=>trim($form_state['values']['experiencecategory']['package_description']),'package_cost'=>trim($form_state['values']['experiencecategory']['package_cost'])))  	   ->execute();drupal_set_message('New Membership Price Added Successfully');drupal_goto('admin/listing/price');	   }function deal_list(){global $user,$base_url;if(!$user->uid){drupal_goto('login');}drupal_add_css(drupal_get_path('module', 'services') .'/css/services.css','file');  $output			=	'';$searchQuery	=   '';$dealtype	=   '';$searchCriteria	=	'u.name'; $filter				=	'%'; $filterCond			=	'like'; $filterFields		    =	'eid';$tempForm		=		drupal_get_form('gbl_deal_search_form');$output			.=		drupal_render($tempForm);if (isset($_GET['criteria']) && isset($_GET['search'])) {        $searchQuery			=	$_GET['search'];        $searchCriteria		=	$_GET['criteria'];           }if (isset($_GET['type'])){$dealtype=$_GET['type'];}if (isset($_GET['sort']) && isset($_GET['order'])) {        // Sort it Ascending or Descending?        if ($_GET['sort'] == 'asc')            $sort = 'ASC';        else            $sort = 'DESC';        // Which column will be sorted        switch ($_GET['order']) {        case 'Deal Title':            $order = 'title';            break;         case 'Deal Type':            $order = 'list_type';            break;        case 'Deal Owner':            $order = 'name';            break;         case 'Deal Created On':            $order = 'gbl.created';            break; 		        default:            $order = 'eid';        }    }    else {        $sort = 'DESC';        $order = 'eid';    }$header = array(                  array(                      "data" => t('S.No'),                    //  "field" => "title"                  ),                 /* array(                      "data" => t('Booking id'),                                        ),*/				  array(                      "data" => t('Deal Title'),                      "field" => "title"                  ),				  array(                      "data" => t('Deal Type'),                      "field" => "list_type"                  ),                  array(                      "data" => t('Deal Owner'),                    //  "field" => "name"                  ),                                     array(                      "data" => t('Deal Owner Email'),                      "field" => "mail"                  ), 				  /* array(                      "data" => t('Base Price'),                      //"field" => "idea_description"                  ),*/				   				  array(                      "data" => t('Owner Earned'),                      //"field" => "idea_description"                  ),				  array(                      "data" => t('Gloobers Earned'),                      //"field" => "idea_description"                  ),				  array(                      //"data" => t('Total Refunded'),                       "data" => t('Amount to Refund'),                      //"field" => "idea_description"                  ),				  array(                      "data" => t('Total Bookings'),                      //"field" => "idea_description"                  ),				   array(                      "data" => t('Deal Created On'),                      "field" => "gbl.created"                  ),        				 				  				                    array(                      "data" => t('Action'),                  )              );			  $rows		=	array();/******************************/    /*$query 		= 	db_select('users', 'u')->extend('PagerDefault');///connect to gbl_users_meta here    $query ->join('gbl_experience_list','gbl','u.uid = gbl.uid');	$query ->fields('gbl',array('eid','list_type','title','created'));	$query->fields('u',array('name','mail','uid'));	$query->condition('gbl.visibility_status',1,'=');*/	$query 		= 	db_select('users', 'u')->extend('PagerDefault');///connect to gbl_users_meta here	$query ->join('gbl_booking','gb','u.uid = gb.uid');	$query ->join('gbl_experience_list','gbl','gb.lid = gbl.eid');	$query ->fields('gb',array('id','created','grand_total'));	$query ->fields('gbl',array('eid','list_type','title','created'));	$query->fields('u',array('name','mail','uid'));	$query->condition('gbl.visibility_status',1,'=');		if($dealtype)	{	$query->condition('list_type',"%$dealtype%",'like');	} else {		$query->orderBy('gb.id', 'DESC');		}	$query->condition($filterFields,$filter,$filterCond);	$query->condition($searchCriteria,"%$searchQuery%",'like');	$query->orderBy($order, $sort);/***********************************/	  $result =$query->execute();$siteCommission=variable_get('commission');$ownerCommission=100-$siteCommission;if(isset($_GET['page']))				  {				  $pageno=$_GET['page'];				  $noOfRecords=10;				  $i=$noOfRecords*$pageno+1;				  }				  else				  {				  $i=1;				  }$ownerCommissionAmount=$siteCommissionAmount=$refundamount=0;$data = $result->fetchObject();//echo "<pre>";print_r($data);exit;while($data = $result->fetchObject())	{	//change here url depend on type of deal type	//$base_price=getBasePrice($data->eid);	//$total_booking=getTotalBookingByList($data->eid);		/*$profit=getAmountEarnedBydeal($data->eid);	$total_booking=getBookingCustomersCount($data->eid);	$finalAmount=($profit['grand_profit']-$profit['refund_total']);	//changes made here	$refundamount=$profit['refund_total']+$profit['trans_fees_total']; //change    $ownerCommissionAmount=($ownerCommission*$finalAmount)/100;    $siteCommissionAmount=($siteCommission*$finalAmount)/100;*/  	$total_booking=getBookingCustomersCount($data->eid);	$finalAmount=$data->grand_total;	$refundamount=getRefundAmount($data->id); //change    $ownerCommissionAmount=($ownerCommission*$finalAmount)/100;    $siteCommissionAmount=($siteCommission*$finalAmount)/100;		$rows[] = array( 	                  $i,	                  //$data->id,                      $data->title,                      $data->list_type,                     '<a href="'.url('profile/view/'.$data->uid).'" >'.$data->name.'</a>',                       $data->mail,                    //  ($base_price['price'])?'$'.$base_price['price']:'',										 '$'.round($ownerCommissionAmount,2),					  '$'.round($siteCommissionAmount,2),					  '$'.round($refundamount['refund_amount'],2),	                        $total_booking,					  					  format_interval(REQUEST_TIME - $data->created),										  					   '<a href="'.url('admin/experience/view/'.$data->eid).'" >View Deal</a>',                       /* '<a href="'.url('admin/experience/view/'.$data->eid).'" >View Deal</a>'.'&nbsp&nbsp&nbsp'.                    '<a href="'.url('admin/list/customers/'.$data->eid).'" >Customers</a>',*/                  );	$i++;			  	}	$output .= theme_table(                   array(                       "header" => $header,                       "rows" => $rows,                       "attributes" => array("width"=>"100%"),                       "sticky" => false, // Table header will be sticky                       "caption" => "",                       "colgroups" => array(),                       "empty" => t("Deal list is empty!"), // The message to be displayed if table is empty                   )               ).theme("pager");    return $output;		}function gbl_deal_search_form($form,&$form_state){$form=array(); $form['#method'] = 'get'; $criteria				=	array(                       'u.name'=>'Deal Owner',                       'u.mail'=>'Owner Email',                       'gbl.title'=>'Deal Title'                       //'li.idea_skills_required'=>'Skills',                                          );    $form['deal_search']['criteria'] = array(                                  '#type' => 'select',                                  '#title' => t('Search By'),                                  '#required' => false,                                  '#options' => $criteria,                                  '#default_value' => (isset($_GET['criteria']))?$_GET['criteria']:'u.name',                              );    	$form['deal_search']['type'] = array(                                '#type' => 'select',                                //'#title' => t('Search Deal'),                                '#required' => FALSE,								'#options'=>array(''=>t('All'),'experience'=>t('Experience'),'hotels'=>t('Hotels'),'vacation'=>t('Vacation Rentals')),                                '#default_value' =>(isset($_GET['type']))?$_GET['type']:'',                            );		    $form['deal_search']['search'] = array(                                '#type' => 'textfield',                                //'#title' => t('Search Deal'),                                '#required' => FALSE,                                '#default_value' =>(isset($_GET['search']))?$_GET['search']:'',                            );							    $form['actions'] = array('#type' => 'actions');    $form['actions']['submit'] = array(                                     '#type' => 'submit',                                     '#value' => t('Search'),                                                                      );    return $form;}function list_customers($eid=null){$eid=arg(3);$filter=$search=$criteria="";if(isset($_GET['filter']) && $_GET['filter'] != ""){		$filter = trim(check_plain($_GET['filter']));	}if(isset($_GET['search']) && $_GET['search'] != ""){		$search = trim(check_plain($_GET['search']));	}if(isset($_GET['criteria']) && $_GET['criteria'] != ""){		$criteria = trim(check_plain($_GET['criteria']));	}	$bookings=getAllBookingInfo($eid,$filter,$search,$criteria) ;$bookingsCount=getAllBookingInfoCount($eid,$filter,$search,$criteria) ;$output = '';$bookings = pager_array_splice($bookings, 10);$output .= theme('pager', array('quantity' => 10));$searchForm=drupal_get_form('gbl_user_search_form');drupal_add_css(drupal_get_path('module', 'services') .'/css/view_customer.css','file');return theme('list_customers',array('bookings'=>$bookings,'bookingsCount'=>$bookingsCount,'searchForm'=>$searchForm,'pagination'=>$output));} function gbl_user_search_form($form,&$form_state){$form=array(); $form['#method'] = 'get'; $filter=array(             ''=>'All',             'pending'=>'Pending',			 'completed'=>'Completed',			 'refund_request'=>'Refund Requested',			 'refunded'=>'Refunded',			 'booked'=>'Booked'			 			 );  $criteria				=	array(                       'customer'=>'Customer',                       'bookingId'=>'Booking Id',                                                                 ); $form['deal_search']['filter'] = array(                                 '#type' => 'select',                                  '#title' => t('Filter By Booking status'),                                  '#required' => false,                                  '#options' => $filter,                                  '#default_value' => (isset($_GET['filter']))?$_GET['filter']:'',								  '#attributes' => array('class' => array('form-control')),                                   );				    $form['deal_search']['criteria'] = array(                                  '#type' => 'select',                                  '#title' => t('Search By'),                                  '#required' => false,                                  '#options' => $criteria,                                  '#default_value' => (isset($_GET['criteria']))?$_GET['criteria']:'',								   '#attributes' => array('class' => array('form-control')),                              );$form['deal_search']['search'] = array(                                '#type' => 'textfield',                                //'#title' => t('Search Deal'),                                '#required' => FALSE,                                '#default_value' =>(isset($_GET['search']))?$_GET['search']:'',								'#attributes' => array('placeholder'=>'Search Customer by name,email','class' => array('form-control')),                            );							    $form['actions'] = array('#type' => 'actions');    $form['actions']['submit'] = array(                                     '#type' => 'submit',                                     '#value' => t('Search'),                                                                      );    return $form;			}function commision_charges_by_user(){drupal_add_css(drupal_get_path('module', 'services') .'/css/services.css','file');  $title=$output			=	'';$tempForm		=		drupal_get_form('search_user_commisson');$output			.=		drupal_render($tempForm);if (isset($_GET['search'])){$title=$_GET['search'];}if (isset($_GET['sort']) && isset($_GET['order'])) {        // Sort it Ascending or Descending?        if ($_GET['sort'] == 'asc')            $sort = 'ASC';        else            $sort = 'DESC';        // Which column will be sorted        switch ($_GET['order']) {        case 'Customer Email':            $order = 'mail';            break;         case 'commission':            $order = 'commission';            break;        /* case 'Booking Status':            $order = 'booking_status';            break;         case 'Booked On':            $order = 'gbl.created';            break;  */		        default:            $order = 'uid';        }    }    else {        $sort = 'DESC';        $order = 'uid';    }$header = array(                  array(                      "data" => t('S.No'),                    //  "field" => "title"                  ),				   array(                      "data" => t('Customer Name'),                      "field" => "name"                  ),				  array(                      "data" => t('Customer Email'),                      "field" => "mail"                  ),				   array(                      "data" => t('commission'),                      "field" => "commission"                  ),				 /*  array(                      "data" => t('Booking Status'),                      "field" => "booking_status"                  ),				   array(                      "data" => t('Booked On'),                      "field" => "created"                  ), */				   array(                      "data" => t('Action'),                                       ), 			);	    $query 		= 	db_select('gbl_users_meta', 'u')->extend('PagerDefault');///connect to gbl_users_meta here	$query->fields('u',array('name','mail','first_name','last_name','commission','uid'));	if($title!="")	{	/***************************************/	$pos=strpos($title," ");		if($pos>0)		{		$titleArr=explode(" ",$title);		$title=array_filter($titleArr);		$titleResult=array_values($title);					$title1=$titleResult[0];			$title2=$titleResult[1];		}		else		{			$title1=$title;		$title2=$title;		}	/*****************************************/		$query->condition(db_or()->condition('name',"%$title%",'like')->condition('mail',"%$title%",'like')->condition('mail',"%$title%",'like')->condition('first_name',"%$title1%",'like')->condition('last_name',"%$title2%",'like'));	}	$query->orderBy($order, $sort);	$result =$query->execute();		/***********************************/$i=1;	while($data = $result->fetchObject()){if($data->commission!=""){$commission=$data->commission;}else if(variable_get('commission')!=""){$commission=variable_get('commission');}else{$commission="0.0";}if($data->first_name){$name=$data->first_name." ".$data->last_name;}else{$name=$data->name;}$rows[] = array( 	                  $i,                       '<a href="'.url('user/'.$data->uid).'" >'.ucwords($name).'</a>',                      $data->mail,                                          $commission."%",					   '<a href="'.url('admin/commision/edit/'.$data->uid).'" >Edit Commision</a>'					  					                    );		$i++;		  }	$output .= theme_table(                   array(                       "header" => $header,                       "rows" => $rows,                       "attributes" => array("width"=>"100%"),                       "sticky" => true, // Table header will be sticky                       "caption" => "",                       "colgroups" => array(),                       "empty" => t("User list is empty!"), // The message to be displayed if table is empty                   )               ).theme("pager");    return $output;							}function user_edit_commission_form($form,&$form_state){$data=array();$userId=arg(3);//set custom commison per user otherwise default will be called$query 		= 	db_select('gbl_users_meta', 'u');$query->fields('u',array('commission','uid'));$query->condition('uid',$userId);$result=$query->execute();$data=$result->fetchAssoc();if($data['commission']!=""){$commission=$data['commission'];}else if(variable_get('commission')!=""){$commission=variable_get('commission');}else{$commission="0.0";}$form['charges'] = array(                      '#type' => 'fieldset',                      '#title' => t('Add Commission paid by user to gloobers'),                  ); $form['charges']['commission'] = array(    '#type' => 'textfield',    '#title' => t('Commission (in %)'),    '#default_value' =>$commission,    '#size' => 25,    '#maxlength' => 5,    '#description' => t('Commission paid to gloobers while booking'),   // '#required' => TRUE,   );	   $form['actions'] = array('#type' => 'actions');    $form['actions']['submit'] = array(                                     '#type' => 'submit',                                     '#value' => t('Save'),                                                                      ); return $form;  }function user_edit_commission_form_validate($form,&$form_state){if((is_numeric($form_state['values']['commission'])) || (is_float($form_state['values']['commission'])) ){if($form_state['values']['commission']>100){form_set_error('commission','Please enter value less than 100');return false;}return true;}else{form_set_error('commission','Please enter only numeric value');return false;}return true;}function user_edit_commission_form_submit($form,&$form_state){$query=db_update('gbl_users_meta');$query ->fields(array('commission'=>$form_state['values']['commission']))       ->condition('uid',arg(3));$result=$query->execute();if($result){drupal_set_message('Commission data saved successfully');drupal_goto('admin/revenue/user/charges');}else{drupal_set_message('Something went wrong','error');drupal_goto('admin/revenue/user/charges');}	   }function search_user_commisson($form,&$form_state){$form=array(); $form['#method'] = 'get'; $form['user_search']['search'] = array(                                '#type' => 'textfield',                                //'#title' => t('Search User'),                                '#required' => FALSE,                                '#default_value' =>(isset($_GET['search']))?$_GET['search']:'',                            );							    $form['actions'] = array('#type' => 'actions');    $form['actions']['submit'] = array(                                     '#type' => 'submit',                                     '#value' => t('Search'),                                                                      );    return $form;}/****************************************************************************/function advisor_plans(){global $user,$base_url;if(!$user->uid){drupal_goto('login');}$plansList=getAllAdvisorPlans();$i=1;$output="";$header = array(                  array(                      "data" => t('S.No'),                    //  "field" => "title"                  ),				   array(                      "data" => t('Plan name'),                    //  "field" => "name"                  ),				  array(                      "data" => t('Description'),                   //   "field" => "mail"                  ),				   array(                      "data" => t('Price(in $)'),                     // "field" => "commission"                  ),				  array(                      "data" => t('Credit(in %)'),                     // "field" => "commission"                  ),				  array(                      "data" => t('CashBack'),                   //   "field" => "mail"                  ),								   array(                      "data" => t('Action'),                                       ), 			);foreach($plansList as $plan){	if($plan['cashback'])	{		$cashbackStatus=t('Available');	}	else	{	$cashbackStatus=t('Not Available');	}			$rows[] = array( 	                  $i,                       ucwords($plan['plan_name']),                      $plan['description'],                                          '$'.$plan['price'],                      $plan['credit_percent'].'%',					  $cashbackStatus,					   '<a href="'.url('admin/plan/edit/'.$plan['pid']).'" >Edit Plan</a>'					  					                    );		$i++;		  }$output .='<div style="clear:both"></div>';		    $output.='<ul class="action-links"><li><a href="'.url('admin/advisor/plan/add').'">Add New Advisor Plan</a></li></ul>';			$output .= theme_table(                   array(                       "header" => $header,                       "rows" => $rows,                       "attributes" => array("width"=>"100%"),                       "sticky" => true, // Table header will be sticky                       "caption" => "<h3>Advisors plans</h3>",                       "colgroups" => array(),                       "empty" => t("Advisors plan list is empty!"), // The message to be displayed if table is empty                   )               ).theme("pager");    return $output;				}