<?php
function listing_menu()
{
$items = array();

	$items['hotels'] = array(
	//'title' => 'hotels',
	'page callback' => 'hotels_listing',
	//'access arguments' => array('access container'),
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	);

	$items['experience'] = array(
	//'title' => 'hotels',
	'page callback' => 'experience_listing',
	//'access arguments' => array('access container'),
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	);

	$items['experience/view/%'] = array(
	//'title' => 'hotels',
	'page callback' => 'experience_listing_view',
	//'access arguments' => array('access container'),
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	);

	$items['listing/review'] = array(
	'page callback' => 'getListingReviewsAjax',
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	); 

	$items['listing/review/form'] = array(
	'page callback' => 'listing_review',
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	); 

	$items['listing/review/data'] = array(
	'page callback' => 'listing_review_data',
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	); 

	$items['add/wishlist'] = array(
	'page callback' => 'add_wishlist',
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	); 

	$items['wishlist'] = array(
	'page callback' => 'my_wishlist',
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	); 

	$items['listing'] = array(
	'page callback' => 'my_listing',
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	); 

	$items['availability'] = array(
	'page callback' => 'confirm_booking',
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	); 

	$items['booking/summary'] = array(
	'page callback' => 'booking_summary',
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	); 
	
	$items['booking/success'] = array(
	'page callback' => 'booking_success',
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	); 
	
	$items['booking/payment'] = array(
	'page callback' => 'booking_payment',
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	); 

	$items['type/autocomplete'] = array(
	'title' => t('AutoComp Menu'),
	'page callback' => 'selectAllTypes',
	'access arguments' => array('access content'),
	'type' => MENU_CALLBACK,
	);

	$items['session/timings'] = array(
	'title' => t('AutoComp Menu'),
	'page callback' => 'get_session_timings',
	'access arguments' => array('access content'),
	'type' => MENU_CALLBACK,
	);

	$items['experience/pricing'] = array(
	'title' => t('AutoComp Menu'),
	'page callback' => 'get_experience_pricing',
	'access arguments' => array('access content'),
	
	'type' => MENU_CALLBACK,
	);
	$items['bookings'] = array(
	'page callback' => 'bookings_details',
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	); 
	

/* 	$items['listing/count'] = array(
	'title' => t('AutoComp Menu'),
	'page callback' => 'getAllListingsCount',
	'access arguments' => array('access content'),
	'type' => MENU_CALLBACK,
	); */
	
	return $items;
}

function listing_theme() {
  $module_path = drupal_get_path('module', 'listing');

   return array(
    'hotels_listing' => array(
      'template' => 'hotels_listing',
      'path' => $module_path.'/templates',
    ),
    'experience_listing' => array(
      'template' => 'experience_listing',
      'path' => $module_path.'/templates',
    ),
    'experience_listing_view' => array(
      'template' => 'experience_listing_view',
      'path' => $module_path.'/templates',
    ),
    'wishlist' => array(
      'template' => 'my_wishlist',
      'path' => $module_path.'/templates',
    ),
    'my_listing' => array(
      'template' => 'my_listing',
      'path' => $module_path.'/templates',
    ),
    'listing_review' => array(
      'template' => 'listing_review',
      'path' => $module_path.'/templates',
    ),
    'confirm_booking' => array(
      'template' => 'confirm_booking',
      'path' => $module_path.'/templates',
    ),	
    'booking_payment' => array(
      'template' => 'booking_payment',
      'path' => $module_path.'/templates',
    ),	

    'booking_summary' => array(
      'template' => 'booking_summary',
      'path' => $module_path.'/templates',
    ),	

    'booking_success' => array(
      'template' => 'booking_success',
      'path' => $module_path.'/templates',
    ),	
	'bookings_details' => array(
      'template' => 'bookings_details',
      'path' => $module_path.'/templates',
    ),	
	
  );
}
function hotels_listing()
{

	menu_rebuild();
	return theme('hotels_listing');
}

function experience_listing()
{
	$filter = array();
	if(isset($_POST["action"]) && $_POST["action"] == "filter"){
		$filter = $_POST;
	}
	if(isset($_GET["search"])){
		$prepAddr = str_replace(' ','+',$_GET["search"]["place"]);

		$geocode=file_get_contents('http://maps.google.com/maps/api/geocode/json?address='.$prepAddr.'&sensor=false');

		$output= json_decode($geocode);

		$lat = $output->results[0]->geometry->location->lat;
		$filter['lat'] = $lat;
		$long = $output->results[0]->geometry->location->lng;
		$filter['long'] = $long;
		$city = $state_short = $country = $address = $state_long = '';
		foreach($output->results[0]->address_components as $addressC){
			if($addressC->types[0] == "administrative_area_level_2"){
				$city = $addressC->long_name;
				$filter['city'] = $city;
			}
			else if($addressC->types[0] == "administrative_area_level_1"){
				$state_short = $addressC->short_name;
				$state_long = $addressC->long_name;
				$filter['state_short'] = $state_short;
				$filter['state_long'] = $state_long;
			}
			else if($addressC->types[0] == "country"){
				$country = $addressC->long_name;
				$filter['country'] = $country;
			}
			else if($addressC->types[0] == "sublocality_level_1"){
				$address = $addressC->long_name;
				$filter['address'] = $address;
			}
		}
		
		$filter["search"] = $_GET["search"];
	}
	menu_rebuild();
	$listings = getAllListings($filter,'global');

	return theme('experience_listing',array('listings'=>$listings));
}

function experience_listing_search_form($form, &$form_state){
	$experienceType=getExperienceType();
	$experienceCategory=getExperienceCategory();
	  $form['product_details']['type'] = array(
		'#type' => 'select',
/* 		'#title' => t('Experience Type'), */
		'#default_value' => isset($values['type']) ? $values['type'] : 0,
		  '#attributes' => array(
			'class' => array('form-control'),
		  ),
		'#options'=>$experienceType,
		'#required' => TRUE
	  );
	$form['product_details']['experiencehtml'] = array(
	 '#type' => 'markup',
	 '#markup' => '<h3>'.t('About your Experience').'</h3>',
	);
	  $form['product_details']['category'] = array(
		'#type' => 'select',
/* 		'#title' => t('Experience category'), */
		'#default_value' => isset($values['category']) ? $values['category'] :0,
		 '#attributes' => array(
			'class' => array('form-control'),
		  ),
		'#options'=>$experienceCategory,
		'#required' => TRUE
	  );

	return $form;
}

function experience_listing_view(){
	$reviews = getListingReviews(arg(2));
	$SuperAverage = getListingReviewsSuperAverage(arg(2));
	$SuperAverage1 = getListingReviewsSuperAverage(arg(2));
	$reviewsCount = getListingReviewsCount(arg(2));
	$reviewsAverage = getListingReviewsAverage(arg(2));
	$photos = getPhotosData(arg(2));
	$OverviewData=getOverviewData(arg(2));
	$userReviewsCount=getUserReviewsCount($OverviewData["uid"]);
	$amentiesdata=getAmentiesByproduct(arg(2));
	$amentiesdata = unserialize($amentiesdata["value1"]);
	$locationDetail=getListingData(arg(2));
	$pricingData = getPricingData(arg(2));
	$basePrice = getBasePrice(arg(2));
	$calendarDetail=getSchedulingData(arg(2));
	$scheduleSessionData=getScheduleSessionData(arg(2));
	$extras = getProductExtraData(arg(2));
	$rulesDetail=getRulesDetails(arg(2));
	$rulesDetail=unserialize($rulesDetail["value1"]);
	$nearPlaces = findNearByPlaces($OverviewData);
	$experienceType = getExperienceListingTypeById($OverviewData['experience_type']);
/*    	echo "<pre>";
	print_r($rulesDetail); die; */
	return theme('experience_listing_view', array('scheduleSessionData'=>$scheduleSessionData,'basePrice'=>$basePrice,'SuperAverage1'=>$SuperAverage1,'SuperAverage'=>$SuperAverage,'reviewsCount'=>$reviewsCount,'userReviewsCount'=>$userReviewsCount,'reviewsAverage'=>$reviewsAverage,'reviews'=>$reviews,'nearPlaces'=>$nearPlaces,'experienceType'=>$experienceType,'photos'=>$photos,'OverviewData'=>$OverviewData,'amentiesdata'=>$amentiesdata,'locationDetail'=>$locationDetail,'pricingData'=>$pricingData,'calendarDetail'=>$calendarDetail,'extras'=>$extras,'rulesDetail'=>$rulesDetail));
}


function findNearByPlaces($data = array()){

	$center_lat = $data["latitude"];
	$center_lng = $data["longitude"];
	
	$radius = 10;

	$query = sprintf("SELECT eid,title,address1, latitude, longitude, city, ( 3959 * acos( cos( radians('%s') ) * cos( radians( latitude ) ) * cos( radians( longitude ) - radians('%s') ) + sin( radians('%s') ) * sin( radians( latitude ) ) ) ) AS distance FROM gbl_experience_list HAVING distance < '%s' ORDER BY distance LIMIT 0 , 20",
	mysql_real_escape_string($center_lat),
	mysql_real_escape_string($center_lng),
	mysql_real_escape_string($center_lat),
	mysql_real_escape_string($radius));
	
	$result = db_query($query);
	
	$records = array();
	foreach($result as $places){
		$records[] = $places;
	}
	
	return $records;
}

function getListingReviews($eid = ""){
 	$reviews = array();
	$query = db_select('gbl_listing_reviews','r')
			->fields('r',array('listing_id','uid','created','comments'))
			->condition('listing_id',$eid)
			->range(0,2)
			->execute();
	while($data = $query->fetchAssoc()){
		$reviews[] = $data;
	} 
	
	return $reviews;
}


function getListingReviewsCount($eid = ""){
 	$reviews = array();
	$query = db_select('gbl_listing_reviews','r')
			->fields('r',array('listing_id','uid','created','comments'))
			->condition('listing_id',$eid)
			->execute();
	return $query->rowCount();
}

function getListingReviewsAjax(){
	$pageSize = 2;
	global $base_url;
	$page = isset($_POST["page"])?$_POST["page"]:1;
	$listing_id = isset($_POST["listing_id"])?$_POST["listing_id"]:arg(2);
	$limit = ($page - 1)*$pageSize;

	$str = "";
	$query = db_select('gbl_listing_reviews','r')
			->fields('r',array('listing_id','uid','created','comments'))
			->condition('listing_id',$listing_id)
			->range($limit,$pageSize)
			->execute();
	while($data = $query->fetchAssoc()){
		$userDetails = user_load($data["uid"]);
		if($userDetails->field_first_name["und"][0]["value"] != ""){
			$name =  $userDetails->field_first_name["und"][0]["value"]." ".$userDetails->field_last_name["und"][0]["value"];
		}
		else{
			$name =  $userDetails->name;
		}
		
		if($userDetails->picture->fid != ""){
			$file 	= file_load($userDetails->picture->fid);
			$imgpath = $file->uri;
			$src = file_create_url($imgpath);
		}
		else{
			$src = $base_url . drupal_get_path('theme', 'gloobers')."/images/no-profile-male-img.jpg";
		}
		$str .='<div class="blogger-block"><div class="blogger-profile">
			<div class="blogger-dp">
			<img alt="display pic" src="'.$src.'">
			</div>
			<a href="#">'.$name.'</a>
			</div>
			<div class="blog-description">
			<p>'.$data["comments"].'</p> 
			<div class="description-detail">
			<span>'.date("F, Y",strtotime($data["created"])).'</span>
			<a href="javascript:void(0)">+ More</a>                                     
			</div>
			</div></div>
			<script>
			jQuery(document).ready(function(){
				jQuery(".description-detail").each(function() {
					var content = jQuery(this).prev("p").text();
					if(content.length > 300){
						jQuery(this).prev("p").css("height","90px").css("overflow", "hidden"); 
						jQuery(this).addClass("rev-more");
						jQuery(this).children("a").show();
					}
					else{
						jQuery(this).children("a").hide();
					}
				});	
			});
			</script>';
	} 	
	echo $str; die;
}

function getListingReviewsAverage($eid = ""){
	$result = db_query("select AVG(accuracy) as accuracy_avg,AVG(communication) as communication_avg,AVG(cleanliness) as cleanliness_avg,AVG(location) as location_avg,AVG(check_in) as check_in,AVG(value) as value_avg from gbl_listing_reviews where listing_id = ".$eid);
	return $result;	
}

function getListingReviewsSuperAverage($eid = ""){
	$result = db_query("select AVG(average) as average_avg from gbl_listing_reviews where listing_id = ".$eid);
	return $result;	
}

function getUserReviewsCount($uid = ""){
	$query = db_select('gbl_listing_reviews','r')
			->fields('r')
			->condition('uid',$uid)
			->execute();
	return $query->rowCount();
}

function listing_review(){
	$reviewform = drupal_get_form('listing_review_form');
	return theme('listing_review', array('reviewform'=>$reviewform));
}

function listing_review_form($form,$form_state){

$form = array();
 
$form['comment'] = array(
'#title' => t('Comments'),
'#type' => 'textarea',
'#size' => '30',
"#attributes" => array("required" => "required"),
'#required' => TRUE,
 
);

$form['accuracy'] = array(
'#type' => 'hidden',
'#size' => '30',
'#attributes' => array('class' => 'accuracy'),
//'#required' => TRUE,
 
);

$form['communication'] = array(
'#type' => 'hidden',
'#size' => '30',
'#attributes' => array('class' => 'communication'),
 
);

$form['cleanliness'] = array(
'#type' => 'hidden',
'#size' => '30',
'#attributes' => array('class' => 'cleanliness'),
 
);

$form['location'] = array(
'#type' => 'hidden',
'#size' => '30',
'#attributes' => array('class' => 'location'),
 
);

$form['check_in'] = array(
'#type' => 'hidden',
'#size' => '30',
'#attributes' => array('class' => 'check_in'),
 
);

$form['value'] = array(
'#type' => 'hidden',
'#size' => '30',
'#attributes' => array('class' => 'value'),
 
);
  
$form['submit'] = array(
'#type' => 'submit',
'#value' => t('Submit'),
);

/* $form['cancel'] = array(
'#name' => 'cancel',
'#type' => 'button',
'#value' => t('Cancel'),
'#limit_validation_errors' => array(),
"#executes_submit_callback" => FALSE,
'#attributes' => array('onclick' => 'location.href="/'.$lang_name.'/project/'.$projectId.'";'),
); */
return $form;
}


function listing_review_data(){
	$aResponse['error'] = false;
	$aResponse['message'] = '';

	$aResponse['server'] = ''; 
		
	if(isset($_POST['action']))
	{
		if(htmlentities($_POST['action'], ENT_QUOTES, 'UTF-8') == 'rating')
		{
			$id = intval($_POST['idBox']);
			$rate = floatval($_POST['rate']);
			
			// YOUR MYSQL REQUEST HERE or other thing :)
			$success = true;
			// else $success = false;
			
			
			// json datas send to the js file
			if($success)
			{
				$aResponse['message'] = 'Your rate has been successfuly recorded. Thanks for your rate :)';
				
				// ONLY FOR THE DEMO, YOU CAN REMOVE THE CODE UNDER
					$aResponse['server'] .= '<strong>Rate received :</strong> '.$rate.'<br />';
					$aResponse['server'] .= '<strong>ID to update :</strong> '.$id;
				// END ONLY FOR DEMO
				
				echo json_encode($aResponse);
			}
			else
			{
				$aResponse['error'] = true;
				$aResponse['message'] = 'An error occured during the request. Please retry';
				
				// ONLY FOR THE DEMO, YOU CAN REMOVE THE CODE UNDER
					$aResponse['server'] = '<strong>ERROR :</strong> Your error if the request crash !';
				// END ONLY FOR DEMO
				
				
				echo json_encode($aResponse);
			}
		}
		else
		{
			$aResponse['error'] = true;
			$aResponse['message'] = '"action" post data not equal to \'rating\'';
			
			// ONLY FOR THE DEMO, YOU CAN REMOVE THE CODE UNDER
				$aResponse['server'] = '<strong>ERROR :</strong> "action" post data not equal to \'rating\'';
			// END ONLY FOR DEMO
				
			
			echo json_encode($aResponse);
		}
	}
	else
	{
		$aResponse['error'] = true;
		$aResponse['message'] = '$_POST[\'action\'] not found';
		$aResponse['server'] = '<strong>ERROR :</strong> $_POST[\'action\'] not found';
		echo json_encode($aResponse);
	}
}

function listing_review_form_submit($form,$form_state){
	global $user;
	$accuracy=$communication=$cleanliness=$location=$check_in=$value=$average=0.0;
	
    $accuracy=($form_state['values']['accuracy'])?$form_state['values']['accuracy']:0;
	$communication=($form_state['values']['communication'])?$form_state['values']['communication']:0;
	$cleanliness=($form_state['values']['cleanliness'])?$form_state['values']['cleanliness']:0;
	$location=($form_state['values']['location'])?$form_state['values']['location']:0;
	$check_in=($form_state['values']['check_in'])?$form_state['values']['check_in']:0;
	$value=($form_state['values']['value'])?$form_state['values']['value']:0;
	$average = ($accuracy + $communication + $cleanliness + $location + $check_in + $value)/6;
	
	/**********************/
	$eid = 33;
	
	$nid = db_insert('gbl_listing_reviews')
	  ->fields(array(
		'listing_id' => $eid,
		'uid' => $user->uid,
		'comments' => trim($form_state['values']['comment']),
		'accuracy' => $accuracy,
		'cleanliness' => $cleanliness,
		'communication' => $communication,
		'location' => $location,
		'check_in' =>$check_in,
		'value' =>$value,
		'average' => $average
	  ))
	  ->execute();
	  
	if ($nid){
		$result = db_query("select AVG(average) as average_avg from gbl_listing_reviews where listing_id = ".$eid);
		
		foreach($result as $rating){
			$query = db_update('gbl_experience_list')
				  ->fields(array(
					'average_ratings' => round($rating->average_avg, 1)
				  ))
				  ->condition('eid',$eid)
				  ->execute();
		}
		
		drupal_set_message(t('Review data saved successfully.'));
	}
		
}

function getAllListings($filter=array(),$type='',$uid=''){
	$pageSize = 8;
	$str = '';
	$listings = array();
	global $base_url;
	$filteredListing = array();
	$query = db_select('gbl_experience_list', 'el');
 	$query->join('gbl_pricing', 'pr', 'el.eid = pr.listing_id');
	$query->leftJoin('gbl_experience_category', 'ec', 'ec.cid = el.experience_category');
	$query->join('gbl_experience_type', 'et', 'et.id = el.experience_type'); 
	$query->leftJoin('gbl_scheduling_sessions', 'sh', 'el.eid = sh.listing_id'); 
	if($uid != "" && $type=='my_wishlist'){
		$query->join('gbl_my_wishlist', 'w', 'el.eid = w.listing_id'); 
	}
	$query->fields('el',array('eid','title','latitude','longitude','city','state','country','average_ratings','uid'));
	$query->fields('pr',array('quantity_max','price'))
	->fields('ec',array('category_name'))
	->fields('et',array('experience_type'))
	->fields('sh',array('startDate','endDate'));
	if($uid != "" && $type=='my_wishlist'){
		$query->fields('w',array('in_wishlist'));
	}
	
	$query->groupBy('el.eid');

	if($uid != "" && $type=='my_wishlist'){
		$query->orderBy('w.added', 'DESC');
		$query->condition('w.uid', $uid);
		$query->condition('w.in_wishlist', 1);
		$or = db_or()->condition('sh.startDate', date('Y-m-d'), '>=')->isNull('sh.startDate');
		$query->condition($or);
	}
	else if($uid != "" && $type=='my_listing'){
		$query->orderBy('el.created', 'DESC');
		$query->condition('el.uid', $uid);
	}
	else{
		$query->orderBy('el.created', 'DESC');
		$or = db_or()->condition('sh.startDate', date('Y-m-d'), '>=')->isNull('sh.startDate');
		$query->condition($or);
	}
	if(empty($filter)){
		$query = $query->range(0,$pageSize);
		$result = $query->execute();

		while($record = $result->fetchAssoc()) {
			$listings[] = $record;
		}
		return $listings; 
	}
	else if(!empty($filter) && !isset($filter["offset"]) && !isset($filter["search"])){
		if(isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && !isset($filter["typeId"]) && !isset($filter["catID"])){
			$query->orderBy('el.average_ratings', 'DESC');
			$query->condition('el.average_ratings',$filter["rate"],'<=');
		}
		else if(!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && !isset($filter["typeId"]) && !isset($filter["catID"])){
			$query->orderBy('pr.price', 'ASC');	
			$query->condition('pr.price', array($filter["min"], $filter["max"]), 'BETWEEN');		
		}
		else if(!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && isset($filter["typeId"]) && !isset($filter["catID"])){
			$query->orderBy('pr.price', 'ASC');
			$query->condition('pr.price', array($filter["min"], $filter["max"]), 'BETWEEN');			
			$query->condition('et.id',$filter["typeId"],'=');
		}
		else if(!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && isset($filter["typeId"]) && isset($filter["catID"])){
			$query->orderBy('pr.price', 'ASC');
			$query->condition('pr.price', array($filter["min"], $filter["max"]), 'BETWEEN');			
			$query->condition('et.id',$filter["typeId"],'=');
			$query->condition('ec.cid',$filter["catID"],'=');
		}
		else if(!isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && isset($filter["typeId"]) && !isset($filter["catID"])){
			$query->condition('et.id',$filter["typeId"],'=');
		}
		else if(!isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && isset($filter["typeId"]) && isset($filter["catID"])){
			$query->condition('et.id',$filter["typeId"],'=');
			$query->condition('ec.cid',$filter["catID"],'=');
		}
		
		$query = $query->range(0,$pageSize);
		$result = $query->execute();
		while($record = $result->fetchAssoc()) {
			$basePrice = getBasePrice($record["eid"]);
			$photos = getPhotosData($record["eid"]);
			$userDetails = user_load($record["uid"]);
			$wstatus = getWishlistStatus($record["eid"]);
			$starPath = base_path() . drupal_get_path('theme', 'gloobers').'/images/icons/stars.png';
			$wstatus = isset($wstatus["in_wishlist"])?$wstatus["in_wishlist"]:0;
			$wstyle = '';
			if($wstatus == 1){
				$wstyle = "background:url(".$base_url."/".drupal_get_path('theme', 'gloobers')."/images/heart-ico-red.png";
			}
			if($userDetails->picture != ""){
				$file 	= file_load($userDetails->picture->fid);
				$imgpath = $file->uri;
				$src = file_create_url($imgpath);
			}
			else{
				$src = $base_url .'/'. drupal_get_path('theme', 'gloobers')."/images/no-profile-male-img.jpg";
			}
			$str .= '<div class="result-block loadData" id="myData_">
				<div class="slider-block">
					<div class="flexslider">
					<ul class="slides">';
			if(count($photos)>0){
				foreach($photos as $photo){
				$photo 	= unserialize($photo["value1"]);
				$file 	= file_load($photo["fid"]);
				$imgpath = $file->uri;
				$style = 'listing_slider';
				
			$str .='	<li><a href="'.$base_url.'/experience/view/'.$record["eid"].'" >
						<img src="'.image_style_url($style,$imgpath).'" alt="place" />
						</a></li>';
				}
			}
			else{
			$str .='	<li><a href="'.$base_url.'/experience/view/'.$record["eid"].'" >
						<img src="'.$base_url . drupal_get_path('theme', 'gloobers').'/images/img/place1.png" alt="place" />
						</a></li>';			
			}
			
			$str .='	</ul>
				</div> <!-- flex ends -->';
			global $user;
			if(!$user->uid){
			
			$str .='	<a class="inlinepop" href="#login-popup"><div class="dr-heart">  </div></a><!-- heart ico -->';
			}
			else{
				$str .='	<div class="dr-heart dr-heart-live" style='.$wstyle.'><input type="hidden" value="'.$wstatus.'" id="status_'.$record["eid"].'" class="status"> <input type="hidden" value="'.$record["eid"].'" id="listingId_'.$record["eid"].'" class="listingID">  </div><!-- heart ico -->';
			}
				
			$str .='<div class="dr-timing">
					<i><img src="'.$base_url .'/'. drupal_get_path('theme', 'gloobers').'/images/alarm-ico.png" alt="time" /></i>
					<p>24h</p>
				 </div><!-- heart ico -->
				<div class="dr-pricing">
					<div class="price-range">
						<p><small>From</small></p>
						<p>'.$basePrice["price"].' $</p>
					</div><!-- price range -->
				</div><!-- heart ico -->
				
				
				
				</div><!-- slide ends -->
				
					  <div class="commenter">
						<div class="cmntr-profile">
							<img src="'.$src.'" alt="rudy" />
						</div><!-- cmnter pro -->         
					 </div><!-- cmmntr ends -->

						<div class="place-rating">
							<div class="basic" data-average="5" data-id="1"></div>
						</div><!-- ratin ends -->
							<h4><a href="'.$base_url.'/experience/view/'.$record[eid].'">'.$record["title"].'</a></h4>
								<p>'.$record["city"].', '.$record["state"].'</p>
									<p><span>'.$record["experience_type"].'</span></p>  
									
									<div class="share-outer-vj">
										<div id="share" class="share share-result">
											<i><img src="'.$base_url .'/'.drupal_get_path('theme', 'gloobers').'/images/plane-ico-b.png" alt="share" /></i>
											<p>Share with your friends</p>
											<small><img src="'.$base_url .'/'. drupal_get_path('theme', 'gloobers').'/images/move-right.png" alt="share" /></small>
										</div><!-- result share --> 
										   
										<div id="quick-share" class="quick-share">
												<ul>
													<li><p>Add to MY</p><div class="circle">+</div></li>
													<li><p><span>Embed</span></p><input type="text" placeholder="<iframe width="560" heigh..." /></li>
													<li class="social">
														<div class="soical fb"><a href="#"><img src="'.$base_url .'/'. drupal_get_path('theme', 'gloobers').'/images/fb-ico-w.png" alt="ico" /></a></div>
														<div class="soical twt"><a href="#"><img src="'.$base_url .'/'. drupal_get_path('theme', 'gloobers').'/images/twt-ico-w.png" alt="ico" /></a></div>
														<div class="soical ggl"><a href="#"><img src="'.$base_url .'/'. drupal_get_path('theme', 'gloobers').'/images/ggl-ico-w.png" alt="ico" /></a></div>
														<div class="soical plus"><a href="#"><img src="'.$base_url .'/'. drupal_get_path('theme', 'gloobers').'/images/plus-ico-w.png" alt="ico" /></a></div>
													 </li>
												</ul>
											</div><!-- quick ends -->
									</div> <!-- toggle wrap -->
									
			</div>';	
			$i++;
		}
		$count = getAllListingsCount($filter,$type,$uid);
		$filteredListing["count"] = $count;
		$filteredListing["string"] = $str.'<script>jQuery(document).ready(function($){jQuery(".flexslider").flexslider({slideshow: false});
			jQuery(".inlinepop").colorbox({inline:true, width:"40%", href:"#login-pop"});
			jQuery( ".share" ).on("click",function() {jQuery(this).parent().find(".quick-share").toggle( "slow");});
				jQuery(".basic").jRating({
		bigStarsPath: "'.$starPath.'",
		isDisabled : true,
		length : 5,
		type : "small"
	});});	</script>';
		echo json_encode($filteredListing); die;
	}
	else if(!empty($filter) && !isset($filter["offset"]) && isset($filter["search"])){
	
		foreach($filter["search"] as $key=>$value){
			if($key == "place"){
				if($value != ''){
					if(isset($filter["city"])){
						$query->condition('el.city',$filter["city"],'like');
					}
					else if(isset($filter["state_short"])){
						$or = db_or()->condition('el.state',$filter["state_short"],'like')->condition('el.state',$filter["state_long"],'like');
						$query->condition($or);
					}	
					else if(isset($filter["country"])){
						$query->condition('el.country',$filter["country"],'like');
					}					
				}
			}
			if($key == "type"){
				if($value != ''){
					$value = substr($value,0,(strlen($value)-2));
					$value = explode(",",$value);

					$query->condition('et.experience_type', array($value), 'IN');
				}			
			}
 			if($key == "when"){
				if($value != ''){
					$value = date('Y-m-d',strtotime($value));

					$query->condition('sh.startDate', '2014-10-03', '>');
					$query->condition('sh.endDate', '2014-10-03', '<');
				}			
			}

			if($key == "person"){
				if($value != ''){
					$or = db_or()->isNull('pr.quantity_max')->condition('pr.quantity_max',$value, '>=');
					$query->condition($or);
				}			
			} 			
		}
		$query = $query->range(0,$pageSize);
		$result = $query->execute();

		while($record = $result->fetchAssoc()) {
			$listings[] = $record;
		}
		
		return $listings;	
	}
	else{
		
		if(isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && !isset($filter["typeId"]) && !isset($filter["catID"])){
			$query->orderBy('el.average_ratings', 'DESC');
			$query->condition('el.average_ratings',$filter["rate"],'<=');
		}
		else if(!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && !isset($filter["typeId"]) && !isset($filter["catID"])){
			$query->orderBy('pr.price', 'ASC');
			$query->condition('pr.price', array($filter["min"], $filter["max"]), 'BETWEEN');			
		}
		else if(!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && isset($filter["typeId"]) && !isset($filter["catID"])){
			$query->orderBy('pr.price', 'ASC');
			$query->condition('pr.price', array($filter["min"], $filter["max"]), 'BETWEEN');			
			$query->condition('et.id',$filter["typeId"],'=');
		}
		else if(!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && isset($filter["typeId"]) && isset($filter["catID"])){
			$query->orderBy('pr.price', 'ASC');
			$query->condition('pr.price', array($filter["min"], $filter["max"]), 'BETWEEN');			
			$query->condition('et.id',$filter["typeId"],'=');
			$query->condition('ec.cid',$filter["catID"],'=');
		}
		else if(!isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && isset($filter["typeId"]) && !isset($filter["catID"])){
			$query->condition('et.id',$filter["typeId"],'=');
		}
		else if(!isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && isset($filter["typeId"]) && isset($filter["catID"])){
			$query->condition('et.id',$filter["typeId"],'=');
			$query->condition('ec.cid',$filter["catID"],'=');
		}
		$query->range($filter["offset"],$pageSize);
		$result = $query->execute();
		$i = ++$limit;
		while($record = $result->fetchAssoc()) {
			$basePrice = getBasePrice($record["eid"]);
			$photos = getPhotosData($record["eid"]);
			$userDetails = user_load($record["uid"]);
			$wstatus = getWishlistStatus($record["eid"]);
			$wstatus = isset($wstatus["in_wishlist"])?$wstatus["in_wishlist"]:0;
			$starPath = base_path() . drupal_get_path('theme', 'gloobers').'/images/icons/stars.png';
			$wstyle = '';
			if($wstatus == 1){
				$wstyle = "background:url(".$base_url."/".drupal_get_path('theme', 'gloobers')."/images/heart-ico-red.png";
			}
			if($userDetails->picture != ""){
				$file 	= file_load($userDetails->picture->fid);
				$imgpath = $file->uri;
				$src = file_create_url($imgpath);
			}
			else{
				$src = $base_url .'/'. drupal_get_path('theme', 'gloobers')."/images/no-profile-male-img.jpg";
			}
			$str .= '<div class="result-block loadData" id="myData_">
				<div class="slider-block">
					<div class="flexslider">
					<ul class="slides">';
			if(count($photos)>0){
				foreach($photos as $photo){
				$photo 	= unserialize($photo["value1"]);
				$file 	= file_load($photo["fid"]);
				$imgpath = $file->uri;
				$style = 'listing_slider';
				
			$str .='	<li>
						<img src="'.image_style_url($style,$imgpath).'" alt="place" />
						</li>';
				}
			}
			else{
			$str .='	<li>
						<img src="'.$base_url . drupal_get_path('theme', 'gloobers').'/images/img/place1.png" alt="place" />
						</li>';			
			}
			
			$str .='	</ul>
				</div> <!-- flex ends -->';
			global $user;
			if(!$user->uid){
			
			$str .='	<a class="inlinepop" href="#login-popup"><div class="dr-heart">  </div></a><!-- heart ico -->';
			}
			else{
				$str .='	<div class="dr-heart dr-heart-live" style='.$wstyle.'><input type="hidden" value="'.$wstatus.'" id="status_'.$record["eid"].'" class="status"> <input type="hidden" value="'.$record["eid"].'" id="listingId_'.$record["eid"].'" class="listingID">  </div><!-- heart ico -->';
			}
				
			$str .='<div class="dr-timing">
					<i><img src="'.$base_url .'/'. drupal_get_path('theme', 'gloobers').'/images/alarm-ico.png" alt="time" /></i>
					<p>24h</p>
				 </div><!-- heart ico -->
				<div class="dr-pricing">
					<div class="price-range">
						<p><small>From</small></p>
						<p>'.$basePrice["price"].' $</p>
					</div><!-- price range -->
				</div><!-- heart ico -->
				
				
				
				</div><!-- slide ends -->
				
					  <div class="commenter">
						<div class="cmntr-profile">
							<img src="'.$src.'" alt="rudy" />
						</div><!-- cmnter pro -->         
					 </div><!-- cmmntr ends -->
						<div class="place-rating">
							<div class="basic" data-average="5" data-id="1"></div>
						</div><!-- ratin ends -->
							<h4><a href="'.$base_url.'/experience/view/'.$record[eid].'">'.$record["title"].'</a></h4>
								<p>'.$record["city"].', '.$record["state"].'</p>
									<p><span>'.$record["experience_type"].'</span></p>  
									
									<div class="share-outer-vj">
										<div id="share" class="share share-result">
											<i><img src="'.$base_url .'/'. drupal_get_path('theme', 'gloobers').'/images/plane-ico-b.png" alt="share" /></i>
											<p>Share with your friends</p>
											<small><img src="'.$base_url .'/'. drupal_get_path('theme', 'gloobers').'/images/move-right.png" alt="share" /></small>
										</div><!-- result share --> 
										   
										<div id="quick-share" class="quick-share">
												<ul>
													<li><p>Add to MY</p><div class="circle">+</div></li>
													<li><p><span>Embed</span></p><input type="text" placeholder="<iframe width="560" heigh..." /></li>
													<li class="social">
														<div class="soical fb"><a href="#"><img src="'.$base_url .'/'. drupal_get_path('theme', 'gloobers').'/images/fb-ico-w.png" alt="ico" /></a></div>
														<div class="soical twt"><a href="#"><img src="'.$base_url .'/'. drupal_get_path('theme', 'gloobers').'/images/twt-ico-w.png" alt="ico" /></a></div>
														<div class="soical ggl"><a href="#"><img src="'.$base_url .'/'. drupal_get_path('theme', 'gloobers').'/images/ggl-ico-w.png" alt="ico" /></a></div>
														<div class="soical plus"><a href="#"><img src="'.$base_url .'/'. drupal_get_path('theme', 'gloobers').'/images/plus-ico-w.png" alt="ico" /></a></div>
													 </li>
												</ul>
											</div><!-- quick ends -->
									</div> <!-- toggle wrap -->
									
			</div>';	
			$i++;
		}
		if(strlen($str)>0){
			echo $str.'<script>jQuery(document).ready(function($){jQuery(".flexslider").flexslider({slideshow: false});
			jQuery(".inlinepop").colorbox({inline:true, width:"40%", href:"#login-pop"});
			jQuery( ".share" ).on("click",function() {jQuery(this).parent().find(".quick-share").toggle( "slow");});
				jQuery(".basic").jRating({
		bigStarsPath: "'.$starPath.'",
		isDisabled : true,
		length : 5,
		type : "small"
	});});	</script>'; die;
		}
		else{
			echo $str; die;
		}
	}

}

function getAllListingsCount($filter=array(),$type='',$uid=''){
	$pageSize = 8;
	$str = '';
	$listings = array();
	global $base_url;
	$filteredListing = array();
	$query = db_select('gbl_experience_list', 'el');
 	$query->join('gbl_pricing', 'pr', 'el.eid = pr.listing_id');
	$query->leftJoin('gbl_experience_category', 'ec', 'ec.cid = el.experience_category');
	$query->join('gbl_experience_type', 'et', 'et.id = el.experience_type'); 
	$query->leftJoin('gbl_scheduling_sessions', 'sh', 'el.eid = sh.listing_id'); 
	if($uid != "" && $type=='my_wishlist'){
		$query->join('gbl_my_wishlist', 'w', 'el.eid = w.listing_id'); 
	}
	$query->fields('el',array('eid','title','latitude','longitude','city','state','country','average_ratings','uid'));
	$query->fields('pr',array('quantity_max','price'))
	->fields('ec',array('category_name'))
	->fields('et',array('experience_type'))
	->fields('sh',array('startDate','endDate'));
	if($uid != "" && $type=='my_wishlist'){
		$query->fields('w',array('in_wishlist'));
	}
	
	$query->groupBy('el.eid');

	if($uid != "" && $type=='my_wishlist'){
		$query->orderBy('w.added', 'DESC');
		$query->condition('w.uid', $uid);
		$query->condition('w.in_wishlist', 1);
		$or = db_or()->condition('sh.startDate', date('Y-m-d'), '>=')->isNull('sh.startDate');
		$query->condition($or);
	}
	else if($uid != "" && $type=='my_listing'){
		$query->orderBy('el.created', 'DESC');
		$query->condition('el.uid', $uid);
	}
	else{
		$query->orderBy('el.created', 'DESC');
		$or = db_or()->condition('sh.startDate', date('Y-m-d'), '>=')->isNull('sh.startDate');
		$query->condition($or);
	}
	if(empty($filter)){
		$query = $query->range(0,$pageSize);
		$result = $query->execute();

		while($record = $result->fetchAssoc()) {
			$listings[] = $record;
		}
		return $listings; 
	}
	else if(!empty($filter) && !isset($filter["offset"]) && !isset($filter["search"])){
		if(isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && !isset($filter["typeId"]) && !isset($filter["catID"])){
			$query->orderBy('el.average_ratings', 'DESC');
			$query->condition('el.average_ratings',$filter["rate"],'<=');
		}
		else if(!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && !isset($filter["typeId"]) && !isset($filter["catID"])){
			$query->orderBy('pr.price', 'ASC');	
			$query->condition('pr.price', array($filter["min"], $filter["max"]), 'BETWEEN');		
		}
		else if(!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && isset($filter["typeId"]) && !isset($filter["catID"])){
			$query->orderBy('pr.price', 'ASC');
			$query->condition('pr.price', array($filter["min"], $filter["max"]), 'BETWEEN');			
			$query->condition('et.id',$filter["typeId"],'=');
		}
		else if(!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && isset($filter["typeId"]) && isset($filter["catID"])){
			$query->orderBy('pr.price', 'ASC');
			$query->condition('pr.price', array($filter["min"], $filter["max"]), 'BETWEEN');			
			$query->condition('et.id',$filter["typeId"],'=');
			$query->condition('ec.cid',$filter["catID"],'=');
		}
		else if(!isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && isset($filter["typeId"]) && !isset($filter["catID"])){
			$query->condition('et.id',$filter["typeId"],'=');
		}
		else if(!isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && isset($filter["typeId"]) && isset($filter["catID"])){
			$query->condition('et.id',$filter["typeId"],'=');
			$query->condition('ec.cid',$filter["catID"],'=');
		}
		$result = $query->execute();
		return $result->rowCount();
	}
	else if(!empty($filter) && !isset($filter["offset"]) && isset($filter["search"])){
	
		foreach($filter["search"] as $key=>$value){
			if($key == "place"){
				if($value != ''){
					if(isset($filter["city"])){
						$query->condition('el.city',$filter["city"],'like');
					}
					else if(isset($filter["state_short"])){
						$or = db_or()->condition('el.state',$filter["state_short"],'like')->condition('el.state',$filter["state_long"],'like');
						$query->condition($or);
					}	
					else if(isset($filter["country"])){
						$query->condition('el.country',$filter["country"],'like');
					}					
				}
			}
			if($key == "type"){
				if($value != ''){
					$value = substr($value,0,(strlen($value)-2));
					$value = explode(",",$value);

					$query->condition('et.experience_type', array($value), 'IN');
				}			
			}
 			if($key == "when"){
				if($value != ''){
					$value = date('Y-m-d',strtotime($value));

					$query->condition('sh.startDate', '2014-10-03', '>');
					$query->condition('sh.endDate', '2014-10-03', '<');
				}			
			}

			if($key == "person"){
				if($value != ''){
					$or = db_or()->isNull('pr.quantity_max')->condition('pr.quantity_max',$value, '>=');
					$query->condition($or);
				}			
			} 			
		}
		$result = $query->execute();

		return $result->rowCount();
	}
	else{
		
		if(isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && !isset($filter["typeId"]) && !isset($filter["catID"])){
			$query->orderBy('el.average_ratings', 'DESC');
			$query->condition('el.average_ratings',$filter["rate"],'<=');
		}
		else if(!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && !isset($filter["typeId"]) && !isset($filter["catID"])){
			$query->orderBy('pr.price', 'ASC');
			$query->condition('pr.price', array($filter["min"], $filter["max"]), 'BETWEEN');			
		}
		else if(!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && isset($filter["typeId"]) && !isset($filter["catID"])){
			$query->orderBy('pr.price', 'ASC');
			$query->condition('pr.price', array($filter["min"], $filter["max"]), 'BETWEEN');			
			$query->condition('et.id',$filter["typeId"],'=');
		}
		else if(!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && isset($filter["typeId"]) && isset($filter["catID"])){
			$query->orderBy('pr.price', 'ASC');
			$query->condition('pr.price', array($filter["min"], $filter["max"]), 'BETWEEN');			
			$query->condition('et.id',$filter["typeId"],'=');
			$query->condition('ec.cid',$filter["catID"],'=');
		}
		else if(!isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && isset($filter["typeId"]) && !isset($filter["catID"])){
			$query->condition('et.id',$filter["typeId"],'=');
		}
		else if(!isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && isset($filter["typeId"]) && isset($filter["catID"])){
			$query->condition('et.id',$filter["typeId"],'=');
			$query->condition('ec.cid',$filter["catID"],'=');
		}
		$result = $query->execute();
		return $result->rowCount();
	}
}

function getWishlistStatus($listingId = ""){
	global $user;
	$query = db_select('gbl_my_wishlist','w')
			->fields('w',array('in_wishlist'))
			->condition('listing_id',$listingId)
			->condition('uid',$user->uid)
			->execute();
	return $query->fetchAssoc();
}

function add_wishlist(){
	global $user;
	
	$listingId = isset($_POST["listingId"])?$_POST["listingId"]:'';
	$status = isset($_POST["status"])?$_POST["status"]:'';
	
	if($status == 0){
		$status = 1;
	}
	else{
		$status = 0;
	}
	
	$query = db_select('gbl_my_wishlist','w')
			->fields('w',array('id'))
			->condition('listing_id',$listingId)
			->condition('uid',$user->uid)
			->execute();
	$result = $query->fetchAssoc();	
	if(!empty($result)){
		$nid = db_update('gbl_my_wishlist')
		  ->fields(array(
			'in_wishlist' => $status,
			'modified' => time()
		  ))
		->condition('listing_id',$listingId)
		->condition('uid',$user->uid)
		->execute();	
		if($nid){
			echo $status."-".$listingId; die;
		}		
	}
	else{
		$nid = db_insert('gbl_my_wishlist')
		  ->fields(array(
			'listing_id' => $listingId,
			'uid' => $user->uid,
			'in_wishlist' => $status,
			'added' => time()
		  ))
		->execute();
		if($nid){
			echo $status."-".$listingId; die;
		}
	}
}

function my_wishlist(){
	global $user;
	$filter = array();
	if(isset($_POST["action"]) && $_POST["action"] == "filter"){
		$filter = $_POST;
	}
	$listings = getAllListings($filter,'my_wishlist',$user->uid);
	return theme('wishlist', array('listings'=>$listings));
}

function my_listing(){
	global $user;
	$filter = array();
	if(isset($_POST["action"]) && $_POST["action"] == "filter"){
		$filter = $_POST;
	}
	$listings = getAllListings($filter,'my_listing',$user->uid);
	return theme('my_listing', array('listings'=>$listings));
}

function confirm_booking(){
	$scheduleSessionData=getScheduleSessionData(arg(1));
	return theme('confirm_booking',array('scheduleSessionData'=>$scheduleSessionData));
}

function getBasePrice($eid=""){
	$query = db_select('gbl_pricing','p')
			->fields('p',array('price'))
			->orderBy('price')
			->condition('listing_id',$eid)
			->range(0,1)
			->execute();
	return $query->fetchAssoc();
}

function booking_summary(){
    
	 
	$listID = isset($_REQUEST["listing_id"])?$_REQUEST["listing_id"]:0;
	$postedData = $_REQUEST;
	$OverviewData=getOverviewData($listID);
	$pricingData = getPricingData($listID);
	$basePrice = getBasePrice($listID);
	$rulesDetail=getRulesDetails($listID);
	$rulesDetail=unserialize($rulesDetail["value1"]);
	$extras = getProductExtraData($listID);
	//$bookingForm = booking_details_form();
	$bookingForm=drupal_get_form('booking_details_form');
	$scheduleSessionData=getScheduleSessionData($listID);
	$schedulingData=getSchedulingData($listID);
	return theme('booking_summary',array('extras'=>$extras,'schedulingData'=>$schedulingData,'scheduleSessionData'=>$scheduleSessionData,'bookingForm'=>$bookingForm,'postedData'=>$postedData,'OverviewData'=>$OverviewData,'pricingData'=>$pricingData,'basePrice'=>$basePrice,'rulesDetail'=>$rulesDetail));
}
function selectAllTypes($string = '') {
  $matches = array();

  if ($string) {
    $items = array_map('trim', explode(',', $string));
    $last_item = array_pop($items);
    $prefix = implode(', ', $items);

    $result = db_select('gbl_experience_type')->fields('gbl_experience_type', array('experience_type'))->condition('experience_type', '%' . db_like($last_item) . '%', 'LIKE')->range(0, 10)->execute();
    foreach ($result as $type) {
      if (!in_array($type->experience_type, $items)) {
        $value = !empty($prefix) ? $prefix . ', ' . $type->experience_type : $type->experience_type;
        $matches[$value] = check_plain($value);
      }
    }
  }

  drupal_json_output($matches);
}

function experience_homepage_search_form($form,$form_state){
	$form = array();

	$form['destination'] = array(
	'#type' => 'textfield',
	'#size' => '30',
	"#attributes" => array("class" =>array('loc'),'id'=>'destination4','placeholder'=>'Paris, New York, Londre...'),
	);
	
	$form['type'] = array(
	'#type' => 'textfield',
	'#size' => '30',
	'#autocomplete_path' => 'type/autocomplete',
	"#attributes" => array("class" =>array('exp'),'placeholder'=>'Hiking, Sky Dinving...'),
	);
	
	$form['when'] = array(
	'#type' => 'textfield',
	'#size' => '30',
	"#attributes" => array("class" =>array('cal'),'id'=>'destination4','placeholder'=>'When?','id'=>'datepicker'),
	);
	
	$form['participants'] = array(
	'#type' => 'textfield',
	'#size' => '30',
	"#attributes" => array("class" =>array('loc'),'id'=>'destination4','placeholder'=>'Participants'),
	);
	
	$form['search'] = array(
	'#type' => 'submit',
	'#attributes' => array('class'=>array('btn-bg')),
	'#value' => 'Search'
	);

	return $form;
}

function booking_details_form($form,$form_state){

$error = drupal_get_messages();
if(!isset($error['error'])){
	 unset($_SESSION['first_name']);		   
     unset($_SESSION['last_name']);		   
     unset($_SESSION['email']);		   
     unset($_SESSION['company']);		   
     unset($_SESSION['address']);		   
     unset($_SESSION['city']);		   
     unset($_SESSION['state']);		   
     unset($_SESSION['country']);		   
     unset($_SESSION['zipcode']);	   
     unset($_SESSION['phone_number']);	   
     unset($_SESSION['message']);
}
else{
drupal_set_message($error['error'][0],'error');
}
global $user;
	$form = array();
	$overviewData=getOverviewData($_SESSION['listing_id']);
	$countries = getCountryListWithIsoCode();
	$userDetails = user_load($overviewData["uid"]);
    $traveller =user_load($user->uid);	
	$current_year=date("Y");
	$expiration_year=array();
	$form['#attributes'] = array('onsubmit' => 'return validate_booking();' );
	for($i=$current_year;$i<($current_year+20);$i++)
	{
	$expiration_year[$i]=$i;
	}
	$monthCount=array();
	for($i=1;$i<=12;$i++)
	{
	$monthCount[$i]=$i;
	}
	if($userDetails->field_first_name["und"][0]["value"] != ""){
	$name= ucwords($userDetails->field_first_name["und"][0]["value"]." ".$userDetails->field_last_name["und"][0]["value"]);
	}else{
	$name= ucwords($userDetails->name);
	}

	$form['markup-contact-details'] = array(
	'#type' => 'markup',
	'#markup' => '<div class="card-no address-area left-col-payment"><h1 class="gray-bg">Billing Address</h1>',
	
	);
	
	$form['first_name'] = array(
	'#type' => 'textfield',
	'#title' => 'Name',
	'#size' => '30',
	'#required'=>true,
	"#attributes" => array("class" =>array('loc input-col half'),'placeholder'=>'First Name'),
	'#default_value'=>($traveller->field_first_name)?$traveller->field_first_name["und"][0]["value"]:$_SESSION['first_name'],
	'#prefix'=>'<div class="row-form">',
	
	);
	
	$form['last_name'] = array(
	'#type' => 'textfield',
	/* '#title' => 'Last Name', */
	'#size' => '30',
	'#required'=>true,
	'#default_value'=>($traveller->field_last_name)?$traveller->field_last_name["und"][0]["value"]:$_SESSION['last_name'],
	"#attributes" => array("class" =>array('loc input-col half move-right'),'placeholder'=>'Last Name'),
	'#suffix'=>'</div>',
	);
	
	/* $form['phone'] = array(
	'#type' => 'textfield',
	'#title' => 'Phone',
	'#size' => '30',
	"#attributes" => array("class" =>array('loc input-col'),'placeholder'=>'Phone'),
	); */
	
	$form['email'] = array(
	'#type' => 'textfield',
	'#title' => 'Email',
	'#size' => '30',
	'#required'=>true,
	"#attributes" => array("class" =>array('loc input-col'),'placeholder'=>'Email'),
	'#default_value'=>($traveller->mail)?$traveller->mail:$_SESSION['email'],
	'#prefix'=>'<div class="row-form">',
	'#suffix'=>'</div>',
	);
	$form['company'] = array(
	'#type' => 'textfield',
	'#title' => t('Company'),
	'#size' => '30',
	'#default_value'=>$_SESSION['company'],
	"#attributes" => array("class" =>array('loc input-col'),'placeholder'=>'Company'),
	'#prefix'=>'<div class="row-form">',
	'#suffix'=>'</div>',
	);
	
	$form['address'] = array(
	'#type' => 'textfield',
	'#title' => 'Address',
	'#size' => '30',
	'#default_value'=>$_SESSION['address'],
	"#attributes" => array("class" =>array('loc input-col'),'placeholder'=>'Address'),
	'#prefix'=>'<div class="row-form">',
	'#suffix'=>'</div>',
	);

	$form['city'] = array(
	'#type' => 'textfield',
	'#title' => 'City/Town/Suburb',
	'#size' => '30',
	'#default_value'=>$_SESSION['city'],
	'#required'=>true,
	"#attributes" => array("class" =>array('loc input-col'),'placeholder'=>'City/Town/Suburb'),
	'#prefix'=>'<div class="row-form">',
	'#suffix'=>'</div>',
	);

/* 	$countries = getCountryListWithIsoCode(); */
	
	/* $form['country'] = array(
	'#type' => 'select',
	'#title' => 'Country',
	'#options' => $countries,
	'#prefix'=>'<div class="row-form">',
	'#suffix'=>'</div>',

	); */

	$form['state'] = array(
	'#type' => 'textfield',
	'#title' => 'State',
	'#size' => '30',
	'#required'=>true,
	'#default_value'=>$_SESSION['state'],
	'#prefix'=>'<div class="row-form">',
	'#suffix'=>'</div>',
	"#attributes" => array("class" =>array('loc input-col'),'placeholder'=>'State'),
	);
    $form['country'] = array(
	'#type' => 'select',
	'#title' => t('Country'),
	'#options' => $countries,
	'#default_value'=>$_SESSION['country'],
	'#prefix'=>'<div class="row-form">',
	'#required'=>true,
	'#suffix'=>'</div>',
/* 	"#attributes" => array("class" =>array('loc')), */
	);	
	
	$form['zipcode'] = array(
	'#type' => 'textfield',
	'#title' => 'Postcode/ZIP',
	'#size' => '30',
	'#required'=>true,
	'#default_value'=>$_SESSION['zipcode'],
	'#prefix'=>'<div class="row-form">',
	'#maxlength'=>10,
	"#attributes" => array("class" =>array('loc input-col'),'placeholder'=>'Postcode/ZIP'),
	'#suffix' => '</div><div class="row-form">                            	
								<p>'.$name."  ".'needs to approve your RESERVATION</p>
                            </div>'
	);
	
	$form['message'] = array(
    '#type' => 'textarea',
	'#attributes' => array(
		'class' => array('form-control','input-col'),'placeholder' => t('Message')),
	'#default_value'=>$_SESSION['message'],	
	
    '#title' => t('Enter Your Message to'." ".$name),
	'#prefix'=>'<div class="row-form">',
	'#suffix'=>'</div>'
	
	  );
	$form['phone_number'] = array(
	'#type' => 'textfield',
	'#title' => 'Confirm Phone Number',
	'#size' => '20',
	'#required'=>true,
	'#default_value'=>$_SESSION['phone_number'],
	'#maxlength'=>15,
	"#attributes" => array("class" =>array('loc input-col'),'placeholder'=>'Phone Number'),
	'#prefix'=>'<div class="row-form">',
	'#suffix' => '</div>'
	);  
	$form['markup-payment-details'] = array(
	'#type' => 'markup',
	'#markup' => '</div><div class="card-no address-area left-col-payment"><h1 class="gray-bg">Payment</h1>',
	);

	/* $form['booking-country'] = array(
	'#type' => 'select',
	'#title' => 'Country',
	'#options' => $countries,
 	"#attributes" => array("class" =>array('pay-select')),
     '#prefix'=>'<div class="row-form">',
	'#suffix'=>'</div>',	
	); */
	
	$form['payment_type'] = array(
	'#type' => 'select',
	'#title' => 'Payment Type',
	/* '#options' => array('paypal'=>'PayPal','credit-card'=>'Credit card'), */
	'#options' => array('credit-card'=>'Credit card'),
	 "#attributes" => array("class" =>array('pay-select')),
    '#prefix'=>'<div class="row-form">',
	'#suffix'=>'</div>',	 
	);	
	
	
	$form['credit_card_type'] = array(
	'#type' => 'select',
	'#title' => 'Credit Card Type',
	'#options' => array('visa'=>'Visa','master_card'=>'Master Card','discover'=>'Discover'),
	 "#attributes" => array("class" =>array('pay-select')), 
	 '#prefix'=>'<div class="credit-card-details"><div class="row-form">',
	'#suffix'=>'</div>',
	);	

	$form['credit_card_no'] = array(
	'#type' => 'textfield',
	'#title' => 'Credit Card No.',
	'#size' => '30',
	'#prefix'=>'<div class="row-form">',
	'#suffix'=>'</div>',
	"#attributes" => array("class" =>array('card-no input-col'),'placeholder'=>'Credit Card No.','autocomplete' => 'off'),
	);	

	$form['credit_expiration_month'] = array(
	'#type' => 'select',
	'#prefix' => '<div class="card-exp-month"><div class="row-form">',
	//'#suffix'=>'</div>',
	'#title' => 'Expiration Date',
	'#options' => $monthCount,
	"#attributes" => array("class" =>array('loc','half')),
	);	
	
	
	$form['credit_expiration_year'] = array(
	'#type' => 'select',	
	//'#prefix'=>'<div class="row-form">',
	'#suffix'=>'</div></div>',
	'#options' =>$expiration_year,
	"#attributes" => array("class" =>array('loc','half','move-right')),
	);	
	
	
	$form['credit_varification_no'] = array(
	'#type' => 'textfield',
	'#title' => 'Card Varification No',
	'#size' => '30',
	'#prefix'=>'<div class="row-form">',
	'#suffix'=>'<div class="row-form"><p>You will be redirected to a paypal page. You have to complete the entire process </p></div></div></div>',
	"#attributes" => array("class" =>array('loc input-col'),'placeholder'=>'Card Varification No'),
	);	
	
	$form['terms_checkbox'] = array(
    '#type' => 'checkboxes',
	'#prefix' => '<div class="row-form"><div class="terms-check">',
    //'#title' => t('I hereby agree on Gloobers Terms & Conditions.'),
	 '#options' => array('terms'=>'<p>'.t('I hereby agree on Gloobers Terms & Conditions.').'</p>'),
	'#suffix'=>'</div></div>'
  );
	
	$form['amount'] = array(
	'#type' => 'hidden',
	'#default_value' => isset($_GET['total-amount'])?$_GET['total-amount']:0,
	);
	/*****************************************************************************/
	$form['booking_on'] = array(
	'#type' => 'hidden',
	'#default_value' => isset($_GET['booking-on'])?$_GET['booking-on']:'',
	);
/* 	$form['listId'] = array(
	'#type' => 'hidden',
	'#default_value' => isset($_GET['listing_id'])?$_GET['listing_id']:'',
	); */
	/* $form['security'] = array(
	'#type' => 'hidden',
	'#default_value' => isset($_GET['security-dep'])?$_GET['security-dep']:0,
	); */
	/* $form['additional_amount'] = array(
	'#type' => 'hidden',
	'#default_value' => isset($_GET['additional-services-amount'])?$_GET['additional-services-amount']:0,
	); */
	/* $form['participants'] = array(
	'#type' => 'hidden',
	'#default_value' => isset($_GET['participants'])?serialize($_GET['participants']):0,
	); */
	/***********************************************************************************/

	$form['submit'] = array(
	'#type' => 'submit',
	'#value' => t('PAY NOW'),
	'#size' => '30',
	"#attributes" => array("class" =>array('list-btn','btn-bg','submit-btn')),
	'#prefix'=>'<div class="row-form"><div class="terms-check">',
	'#suffix'=>'</div></div></div>'
	);		
	
	return $form;
	
}



function getCountryListWithIsoCode(){
	$countries = array();
	$query = db_select('gbl_country_list','c')
			->fields('c',array('country_name','iso_code'))
			->execute();
	while($data=$query->fetchAssoc()){
		$countries[$data['iso_code']] = $data['country_name'];
	}
	return $countries;
}

function booking_details_form_submit($form,$form_state){

 global $user;
 $overviewData=getOverviewData($_SESSION['listing_id']);
 $provider = user_load($overviewData["uid"]);
 /*****************************************************/
 $bilingdetail=array();
 $_SESSION['first_name']=$bilingdetail['first_name']=trim($form_state['values']['first_name']);
 $_SESSION['last_name']=$bilingdetail['last_name']=trim($form_state['values']['last_name']);
 $_SESSION['email']=$bilingdetail['email']=trim($form_state['values']['email']);
 $_SESSION['company']=$bilingdetail['company']=trim($form_state['values']['company']);
 $_SESSION['address']=$bilingdetail['address']=trim($form_state['values']['address']);
 $_SESSION['city'] =$bilingdetail['city']=trim($form_state['values']['city']);
 $_SESSION['state']= $bilingdetail['state']=trim($form_state['values']['state']);
 $_SESSION['country']= $bilingdetail['country']=trim($form_state['values']['country']);
 $_SESSION['zipcode']= $bilingdetail['zipcode']=trim($form_state['values']['zipcode']);
 $_SESSION['phone_number']= $bilingdetail['phone_number']=trim($form_state['values']['phone_number']);
 $_SESSION['message']=$message=trim($form_state['values']['message']);
 
 if(isset($_SESSION['check-out'])){
	$bilingdetail['check-out-date'] = $_SESSION['check-out'];
 }
 if(isset($_SESSION['check-out-time'])){
	$bilingdetail['check-out-time'] = $_SESSION['check-out-time'];
 }
 if(isset($_SESSION['duration'])){
	$bilingdetail['duration'] = $_SESSION['duration'];
 }
 /*****************************************************************/
	$paymentType = urlencode('Sale');				// 'Authorization' or 'Sale'
	$firstName = urlencode($form_state['values']['first_name']);
	$lastName = urlencode($form_state['values']['last_name']);
	$creditCardType = urlencode($form_state['values']['credit_card_type']);
	$creditCardNumber = urlencode($form_state['values']['credit_card_no']);
	$expDateMonth = $form_state['values']['credit_expiration_month'];
	/* $booking_creditcard_country = $form_state['values']['booking-country']; */

	$padDateMonth = urlencode(str_pad($expDateMonth, 2, '0', STR_PAD_LEFT));
	 
	$expDateYear = urlencode($form_state['values']['credit_expiration_year']);
	$cvv2Number = urlencode($form_state['values']['credit_varification_no']);
	$address1 = urlencode($form_state['values']['address']);

	$city = urlencode($form_state['values']['city']);
	$state = urlencode($form_state['values']['state']);
	$zip = urlencode($form_state['values']['zipcode']);
	$country = urlencode($form_state['values']['country']);				// US or other valid country code
	//$amount = urlencode($form_state['values']['amount']);
	$amount = urlencode($_SESSION['total_amount']);
	$currencyID = urlencode('USD');							// or other currency ('GBP', 'EUR', 'JPY', 'CAD', 'AUD')
	 
	$nvpStr =	"&PAYMENTACTION=$paymentType&AMT=$amount&CREDITCARDTYPE=$creditCardType&ACCT=$creditCardNumber".
				"&EXPDATE=$padDateMonth$expDateYear&CVV2=$cvv2Number&FIRSTNAME=$firstName&LASTNAME=$lastName".
				"&STREET=$address1&CITY=$city&STATE=$state&ZIP=$zip&COUNTRYCODE=$country&CURRENCYCODE=$currencyID";
	 
	/* echo $nvpStr; die; */
	$httpParsedResponseAr = PPHttpPost('DoDirectPayment', $nvpStr);
	 /* echo "<pre>";
	 print_r($_SESSION);
	 print_r($_GET);
	print_r($httpParsedResponseAr); */ 
	if($httpParsedResponseAr['ACK']=='Success' || $httpParsedResponseAr['ACK']=='SUCCESSWITHWARNING')
	{
	$amount=urlencode($httpParsedResponseAr['AMT']);
	$timeStamp=urldecode($httpParsedResponseAr['TIMESTAMP']);
	$currency=urldecode($httpParsedResponseAr['CURRENCYCODE']);
	$transId=urldecode($httpParsedResponseAr['TRANSACTIONID']);
  	$date = date('Y-m-d H:i:s', strtotime ($timeStamp));
    /******************Insert in booking table*******************************************************/ 
	$participantsDetails=unserialize($_SESSION['participants']);
	
	$total_cost = 0;
	$quantity=0;
	foreach($participantsDetails as $key=>$value)
	{
	$key = explode("-",$key);
	$total_cost = $total_cost+($key[1]*$value);
	$quantity=$quantity+$key[1];
	}
	 /* echo "<pre>";
	print_r($_SESSION);
	echo date('Y-m-d',$_SESSION['booking-on']);
	die; */ 
	
	/* echo "<pre>";
	print_r($_GET);
	die; */
    $listId=$_SESSION['listing_id'];
    $arrival_time=$_SESSION['booking-on_time'];	
	$additional_amount=($_SESSION['additional-services-amount'])?$_SESSION['additional-services-amount']:0;
	$booking_date_from=date('Y-m-d',strtotime($_SESSION['booking-on']));
	$security_deposit=$_SESSION['Security'];
	$grandTotal=$_SESSION['total_amount'];
	$bookingID = random_string(10);
	$query=db_insert('gbl_booking')
	       ->fields(array('lid'=>$listId,'uid'=>$user->uid,'quantity'=>$quantity,'quantity_details'=>$_SESSION['participants'],'additional_cost'=>$additional_amount,'additional_services'=>($_SESSION["additional-services"])?$_SESSION["additional-services"]:'','total_cost'=>$total_cost,'security'=>$security_deposit,'grand_total'=>$grandTotal,'arrive_at_date'=>$booking_date_from,'created'=>time(),'booking_status'=>'booked','other_details'=>serialize($bilingdetail),'arrive_at_time'=>$arrival_time,'booking_id'=>$bookingID));
	$result=$query->execute();   
    /****************************Get new id after insert and insert in payment table*******************************/
	if($result)
	{
	$query1=db_insert('gbl_payment')
	       ->fields(array('bid'=>$result,'trans_id'=>$transId,'payment_status'=>'completed','payment_at'=>$date))
           ->execute();
   
     /********************************Mail Send to provider*****************************************************************************/
		if(!empty($provider->field_first_name))
		{
		$providename=	$provider->field_first_name['und'][0]['value']."  ".$provider->field_last_name['und'][0]['value'];
		}
		else
		{
		$providename=$provider->name;
		}
	    $title	=	'Hello '.ucfirst($providename).',<br/>';
		$body			=	'<p>'.$bilingdetail['first_name']." ".$bilingdetail['last_name'].' has booked your deal - <b>'.$overviewData['title'].'</b></p>
			                     <p><b>Guest Name:</b>'.$bilingdetail['first_name']." ".$bilingdetail['last_name'].'</p><p><b>Arrival Date:</b>'.$_SESSION['booking-on'].'</p><p><b>Arrival Time</b>'.$_SESSION['booking-on_time'].'</p><p><b>Amount Paid</b>'.$_SESSION['total_amount'].'</p>'; 
			
                                
			$module			=	'listing';
			$key			=	'message_to_provider_booking_confirmation';
			$to_email 		= 	 trim($provider->mail);
			$subject		=	'Booking Confirmation:'.$overviewData['title'];		
			sendNotificationEmail($module,$key,$to_email,$subject,$title,$body);
     /***********************************Mail send to Traveller*************************************************************************/  	 
	$traveller=user_load($user->uid);
	if(!empty($traveller->field_first_name))
	{
	$travellername=$traveller->field_first_name['und'][0]['value']."  ".$traveller->field_last_name['und'][0]['value'];
	}
	else
	{
	$travellername=$traveller->name;
	}
     $title	=	'Hello '.ucfirst($bilingdetail['first_name']." ".$bilingdetail['last_name']).',<br/>';
 			$body			=	'<p>Your Booking has been confirmed for - <b>'.$overviewData['title'].'</b></p>
			                     <p><b>Guest Name:</b>'.$bilingdetail['first_name']." ".$bilingdetail['last_name'].'</p><p><b>Arrival Date:</b>'.$_SESSION['booking-on'].'</p><p><b>Arrival Time</b>'.$_SESSION['booking-on_time'].'</p><p><b>Amount Paid</b>'.$_SESSION['total_amount'].'</p>';			
                             
			$module			=	'listing';
			$key			=	'message_to_traveller_confirmation';
			$to_email 		= 	 trim($bilingdetail['email']);
			$subject		=	'Booking Confirmation:'.$overviewData['title'];		
			sendNotificationEmail($module,$key,$to_email,$subject,$title,$body);
	/**************************************************************************************/
/* 	 unset($_SESSION['Security']);		   
     unset($_SESSION['listing_id']);		   
     unset($_SESSION['additional-services-amount']);		   
     unset($_SESSION['additional-services']);		   
     unset($_SESSION['total_amount']);		   
     unset($_SESSION['participants']);		   
     unset($_SESSION['booking-on']);		   
     unset($_SESSION['booking-on_time']); */
	 unset($_SESSION['first_name']);		   
     unset($_SESSION['last_name']);		   
     unset($_SESSION['email']);		   
     unset($_SESSION['company']);		   
     unset($_SESSION['address']);		   
     unset($_SESSION['city']);		   
     unset($_SESSION['state']);		   
     unset($_SESSION['country']);		   
     unset($_SESSION['zipcode']);	   
     unset($_SESSION['phone_number']);	   
     unset($_SESSION['message']);
	} 
	drupal_goto('booking/success/'.$bookingID);
	}
	else if($httpParsedResponseAr['ACK']=='Failure')
	{
	$errorMessage=urldecode($httpParsedResponseAr['L_LONGMESSAGE0']);
	drupal_set_message($errorMessage,'error');
	//drupal_goto(current_path());
	}
	

}


function PPHttpPost($methodName_, $nvpStr_) {
	$environment = 'sandbox';
 
	// Set up your API credentials, PayPal end point, and API version.
	$API_UserName = urlencode('amar-facilitator_api1.deftsoft.com'); // set your spi username
	$API_Password = urlencode('BL4Y6KT88QKFWWM3'); // set your spi password
	$API_Signature = urlencode('AFcWxV21C7fd0v3bYYYRCpSSRl31A3PORePesfy8F2bEvk6o38EgjSje'); // set your spi Signature
	
	$API_Endpoint = "https://api-3t.paypal.com/nvp";
	if("sandbox" === $environment || "beta-sandbox" === $environment) {
		$API_Endpoint = "https://api-3t.$environment.paypal.com/nvp";
	}
	$version = urlencode('51.0');
 
	// Set the curl parameters.
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $API_Endpoint);
	curl_setopt($ch, CURLOPT_VERBOSE, 1);
 
	// Turn off the server and peer verification (TrustManager Concept).
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
	curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
 
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	curl_setopt($ch, CURLOPT_POST, 1);
 
	// Set the API operation, version, and API signature in the request.
	$nvpreq = "METHOD=$methodName_&VERSION=$version&PWD=$API_Password&USER=$API_UserName&SIGNATURE=$API_Signature$nvpStr_";
 
	// Set the request as a POST FIELD for curl.
	curl_setopt($ch, CURLOPT_POSTFIELDS, $nvpreq);
 
	// Get response from the server.
	$httpResponse = curl_exec($ch);
 
	if(!$httpResponse) {
		exit("$methodName_ failed: ".curl_error($ch).'('.curl_errno($ch).')');
	}
 
	// Extract the response details.
	$httpResponseAr = explode("&", $httpResponse);
 
	$httpParsedResponseAr = array();
	foreach ($httpResponseAr as $i => $value) {
		$tmpAr = explode("=", $value);
		if(sizeof($tmpAr) > 1) {
			$httpParsedResponseAr[$tmpAr[0]] = $tmpAr[1];
		}
	}
 
	if((0 == sizeof($httpParsedResponseAr)) || !array_key_exists('ACK', $httpParsedResponseAr)) {
		exit("Invalid HTTP Response for POST request($nvpreq) to $API_Endpoint.");
	}
 
	return $httpParsedResponseAr;
}

function booking_success(){
	$city = 'Chandigarh';
	return theme('booking_success',array('city'=>$city));
}

function get_session_timings(){
	$cdate = $_POST['cdate'];
	$listID = $_POST['listing_id'];

	$result = db_query("SELECT repeatPeriodBy,repeatEvery FROM `gbl_scheduling_sessions` WHERE  '".$cdate."' between `startDate` AND `endRepeatDate` and listing_id=".$listID);
	foreach($result as $data){
		$sessionData['repeatPeriodBy'] = $data->repeatPeriodBy;
		$sessionData['repeatEvery'] = $data->repeatEvery;
	}
	$sessionData['date'] = $cdate;
	echo json_encode($sessionData);
}

function booking_payment(){
	global $user;
	if(!$user->uid){
		if(isset($_POST['duration'])){
			$_SESSION["durationValue"] = $_POST['duration'];
		}
		$dest = drupal_get_destination();
		unset($_SESSION['destination']);
		$_SESSION['destination']  = $dest["destination"];
		drupal_goto('login', $dest);
	}
	$bookingForm=drupal_get_form('booking_details_form');
	return theme('booking_payment',array('bookingForm'=>$bookingForm));
}

function getSchedulingDataPrice($cdate='',$listID=''){
	$pricingData = '';
	//echo "SELECT pricingData FROM `gbl_scheduling_sessions` WHERE  ('".$cdate."' between `startDate` AND `endRepeatDate` or  `startDate` = '".$cdate."') and listing_id=".$listID; die;
	$result = db_query("SELECT pricingData FROM `gbl_scheduling_sessions` WHERE  ('".$cdate."' between `startDate` AND `endRepeatDate` or  `startDate` = '".$cdate."') and listing_id=".$listID);
	foreach($result as $data){
		$pricingData = $data->pricingData;
	}
	return $pricingData;
}

function get_experience_pricing(){
	$qty = $_POST["qty"];
	$listID = $_POST["listing_id"];
	$pricingData = '';
	$result = db_query("SELECT price,price_group_type FROM `gbl_pricing` WHERE  ('".$qty."' between `min` AND `max` or  `min` = '".$qty."') and listing_id=".$listID);
	foreach($result as $data){
		$pricingData['price'] = $data->price;
		$pricingData['gtype'] = $data->price_group_type;
	}
	echo json_encode($pricingData);
}

function random_string($length) {
    $key = '';
    $keys = array_merge(range(0, 9), range('a', 'z'));

    for ($i = 0; $i < $length; $i++) {
        $key .= $keys[array_rand($keys)];
    }

    return $key;
}
/****************Show Booked deals to provider with details**********************************************************************/
function bookings_details()
{
global $user;
$bookingsCount=0;
$title =$type =$booking_status=$search_filter="";
if(isset($_GET['title']) && $_GET['title'] != ""){
		$title = trim(check_plain($_GET['title']));
	}
if(isset($_GET['type']) && $_GET['type'] != ""){
		$type = trim(check_plain($_GET['type']));
	}
if(isset($_GET['booking_status']) && $_GET['booking_status'] != ""){
		$booking_status = trim(check_plain($_GET['booking_status']));
	}	
if(isset($_GET['search_filter']) && $_GET['search_filter'] != ""){
  $search_filter = trim(check_plain($_GET['search_filter']));
}	
$bookings=getAllBookings($user->uid,$title,$type,$booking_status,$search_filter);
$bookingsCount=getAllBookingsCount($user->uid,$title,$type,$booking_status,$search_filter);
$searchForm=drupal_get_form('search_bookings_details_form');
return theme('bookings_details',array('bookings'=>$bookings,'bookingsCount'=>$bookingsCount,'searchForm'=>$searchForm));
}
function getAllBookings($userId=null,$title=null,$type=null,$booking_status,$search_filter)
{
$data=array();
$query=db_select('gbl_experience_list','gel');
$query->join('gbl_booking', 'gb', 'gb.lid = gel.eid');
$query->join('gbl_users_meta', 'gum', 'gum.uid = gb.uid');
$query->fields('gel',array('eid','list_type','title','short_description','visibility_status'));
$query->fields('gb');
$query->fields('gum');
$query->condition('gel.uid',$userId);
if($title !="")
	{
	if($search_filter=="customer")
	{
	/***************************************/
	$pos=strpos($title," ");
		if($pos>0)
		{
		$titleArr=explode(" ",$title);
		$title=array_filter($titleArr);
		$titleResult=array_values($title);		
			$title1=$titleResult[0];
			$title2=$titleResult[1];
		}
		else
		{	
		$title1=$title;
		$title2=$title;
		}
	/*****************************************/
	
	$query->condition(db_or()->condition('name',"%$title%",'like')->condition('mail',"%$title%",'like')->condition('mail',"%$title%",'like')->condition('first_name',"%$title1%",'like')->condition('last_name',"%$title2%",'like'));
	}
	else if($search_filter=="title")
	{
	$query->condition(db_or()->condition('title',"%$title%",'like')->condition('short_description',"%$title%",'like'));
    }
  }
if($type!="")
{
$query->condition('list_type',"%$type%",'like');
}
if($booking_status!="")
{
$query->condition('booking_status',"%$booking_status%",'like');
}
$result=$query->execute();
while($record = $result->fetchAssoc()) {
		$data[] = $record;
	}	
	return $data;         
}
function getAllBookingsCount($userId=null,$title=null,$type=null,$booking_status=null,$search_filter=null)
{
$data=array();
$query=db_select('gbl_experience_list','gel');
$query->join('gbl_booking', 'gb', 'gb.lid = gel.eid');
$query->join('gbl_users_meta', 'gum', 'gum.uid = gb.uid');
$query->fields('gel',array('eid','list_type','title','short_description','visibility_status'));
$query->fields('gb');
$query->fields('gum');
$query->condition('gel.uid',$userId);
if($title !="")
	{
	if($search_filter=="customer")
	{
	/***************************************/
	$pos=strpos($title," ");
		if($pos>0)
		{
		$titleArr=explode(" ",$title);
		$title=array_filter($titleArr);
		$titleResult=array_values($title);		
			$title1=$titleResult[0];
			$title2=$titleResult[1];
		}
		else
		{	
		$title1=$title;
		$title2=$title;
		}
	/*****************************************/
	
	$query->condition(db_or()->condition('name',"%$title%",'like')->condition('mail',"%$title%",'like')->condition('mail',"%$title%",'like')->condition('first_name',"%$title1%",'like')->condition('last_name',"%$title2%",'like'));
	}
	else if($search_filter=="title")
	{
	$query->condition(db_or()->condition('title',"%$title%",'like')->condition('short_description',"%$title%",'like'));
    }
  }
if($type!="")
{
$query->condition('list_type',"%$type%",'like');
}
if($booking_status!="")
{
$query->condition('booking_status',"%$booking_status%",'like');
}
$result=$query->execute();
return $result->rowCount();        
}
function search_bookings_details_form($form,&$form_state)
{
$form=array();
$form['#method'] = 'get';
$form['search-class']=array(
'#prefix'=>'<div class="listing-search">'
);
$form['type'] = array(
'#title' => t('Filter By List Type'),
'#type' => 'select',
'#options'=>array(''=>'All','experience'=>'Experience listing','vacation'=>'Vacation Rental','hotel'=>'Hotels'),
'#default_value'=>isset($_GET['type'])?$_GET['type']:'',
'#attributes' => array('onchange' => 'this.form.submit();','class' => array('form-control')),
);

$form['booking_status'] = array(
'#title' => t('Filter By Booking Status'),
'#type' => 'select',
'#options'=>array(''=>'All','pending'=>'Pending','completed'=>'Completed','refund_request'=>'Refund Requested','refunded'=>'Refunded','booked'=>'Booked'),
'#default_value'=>isset($_GET['booking_status'])?$_GET['booking_status']:'',
'#attributes' => array('class' => array('form-control')),
);
$form['search_filter'] = array(
'#title' => t('Search By'),
'#type' => 'select',
'#options'=>array('customer'=>'Customer','title'=>'Deal Title'),
'#default_value'=>isset($_GET['search_filter'])?$_GET['search_filter']:'',
'#attributes' => array('class' => array('form-control')),
);
$form['title'] = array(
/* '#title' => t('Search'), */
'#type' => 'textfield',
/* '#value'=> 'Search', */
'#size' => '30',
'#default_value'=>isset($_GET['title'])?$_GET['title']:'',
'#attributes' => array('placeholder'=>'Search Listing','class' => array('form-control')),
);
$form['submit'] = array(
'#type' => 'submit',
'#value' => t('Search'),
'#suffix'=>'</div>'
);
return $form;
}