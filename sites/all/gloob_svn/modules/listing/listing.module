<?php
function listing_menu()
{
$items = array();

	$items['hotels'] = array(
	//'title' => 'hotels',
	'page callback' => 'hotels_listing',
	//'access arguments' => array('access container'),
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	);

	$items['experience'] = array(
	//'title' => 'hotels',
	'page callback' => 'experience_listing',
	'access arguments' => array('access container'),
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	);

	$items['experience/view/%'] = array(
	//'title' => 'hotels',
	'page callback' => 'experience_listing_view',
	//'access arguments' => array('access container'),
	'access callback' => true, 
	
	'type' => MENU_NORMAL_ITEM,
	);

	$items['listing/review'] = array(
	'page callback' => 'getListingReviewsAjax',
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	); 

	$items['listing/review/form'] = array(
	'page callback' => 'listing_review',
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	); 

	$items['listing/review/data'] = array(
	'page callback' => 'listing_review_data',
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	); 

	$items['add/wishlist'] = array(
	'page callback' => 'add_wishlist',
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	); 

	$items['wishlist'] = array(
	'page callback' => 'my_wishlist',
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	); 

	$items['listing'] = array(
	'page callback' => 'my_listing',
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	); 

	$items['availability'] = array(
	'page callback' => 'confirm_booking',
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	); 

	$items['booking/summary'] = array(
	'page callback' => 'booking_summary',
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	); 
	
	$items['booking/success'] = array(
	'page callback' => 'booking_success',
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	); 
	
	$items['booking/payment'] = array(
	'page callback' => 'booking_payment',
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	); 

	$items['type/autocomplete'] = array(
	'title' => t('AutoComp Menu'),
	'page callback' => 'selectAllTypes',
	'access arguments' => array('access content'),
	'type' => MENU_CALLBACK,
	);

	$items['session/timings'] = array(
	//'title' => t('AutoComp Menu'),
	'page callback' => 'get_session_timings',
	'access arguments' => array('access content'),
	'type' => MENU_CALLBACK,
	);

	$items['experience/pricing'] = array(
	'title' => t('AutoComp Menu'),
	'page callback' => 'get_experience_pricing',
	'access arguments' => array('access content'),	
	'type' => MENU_CALLBACK,
	);
	$items['bookings'] = array(
	'page callback' => 'bookings_details',
	'access callback' => true, 
	//'access callback' => 'user_is_logged_in',
	'type' => MENU_NORMAL_ITEM,
	); 
	$items['experience/updateViewsCount'] = array(
	'page callback' => 'update_views_count',
	'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	);
    $items['transactions/history'] = array(
	'page callback' => 'transactions_history',
	//'access callback' => true, 
	'access callback' => 'user_is_logged_in',
	'type' => MENU_NORMAL_ITEM,
	);
	$items['mytrips'] = array(	
	'page callback' => 'bookings_history_by_traveller',
	//'access callback' => true,
    'access callback' => 'user_is_logged_in',	
	'type' => MENU_NORMAL_ITEM,
	); 
    $items['income/details'] = array(	
	'page callback' => 'income_details',
	'access callback' => 'user_is_logged_in',
	//'access callback' => true, 
	'type' => MENU_NORMAL_ITEM,
	);	
   $items['product/ajax/getList'] = array(
    'page callback' => 'getAllAjaxListingsBylistType', 
    'access arguments' => TRUE,
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
/* 	$items['listing/count'] = array(
	'title' => t('AutoComp Menu'),
	'page callback' => 'getAllListingsCount',
	'access arguments' => array('access content'),
	'type' => MENU_CALLBACK,
	); */
	/*************************Added on 11 feb 2015******************************************/
	//will redirect search form on homepage results
	$items['search-destination/%'] = array(
    'page callback' => 'search_listings_results',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  /*****************experience page view**********************************************/
  $items['experience/%'] = array(
	//'title' => 'hotels',
	'page callback' => 'experience_listing_details',
	//'access arguments' => array('access container'),
	'access callback' => true, 
	
	'type' => MENU_NORMAL_ITEM,
	);
/***************************************************************/
	/*AJAX CALL FOR ORDER SUMMARY*/
	$items['experience/ajax/getOrder'] = array(
		'page callback' => 'getOrderPricingDetails', 
		'access arguments' => TRUE,
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
    );
/****************************9March_2015***********************/
    $items['booking/confirmation'] = array(
	'page callback' => 'booking_confirmation',
	'access callback' => true,	
	'type' => MENU_NORMAL_ITEM,
	);
  /****************************12March_2015***********************/
    $items['booking/mailsendtoprovider'] = array(
	'page callback' => 'mailSendtoProviderTraveller',
	'access callback' => true,	
	'type' => MENU_NORMAL_ITEM,
	);
	return $items;
}

function listing_theme() {
  $module_path = drupal_get_path('module', 'listing');

   return array(
    'hotels_listing' => array(
      'template' => 'hotels_listing',
      'path' => $module_path.'/templates',
    ),
    'experience_listing' => array(
      'template' => 'experience_listing',
      'path' => $module_path.'/templates',
    ),
    'experience_listing_view' => array(
      'template' => 'experience_listing_view',
      'path' => $module_path.'/templates',
    ),
    'wishlist' => array(
      'template' => 'my_wishlist',
      'path' => $module_path.'/templates',
    ),
    'my_listing' => array(
      'template' => 'my_listing',
      'path' => $module_path.'/templates',
    ),
    'listing_review' => array(
      'template' => 'listing_review',
      'path' => $module_path.'/templates',
    ),
    'confirm_booking' => array(
      'template' => 'confirm_booking',
      'path' => $module_path.'/templates',
    ),	
    'booking_payment' => array(
      'template' => 'booking_payment',
      'path' => $module_path.'/templates',
    ),	

    'booking_summary' => array(
      'template' => 'booking_summary_new',
      'path' => $module_path.'/templates',
    ),	
	'booking_confirmation_new' => array(
      'template' => 'booking_confirmation_new',
      'path' => $module_path.'/templates',
    ),	

    'booking_success' => array(
      'template' => 'booking_success',
      'path' => $module_path.'/templates',
    ),	
	'bookings_details' => array(
      'template' => 'bookings_details',
      'path' => $module_path.'/templates',
    ),	
	'transactions_history' => array(
      'template' => 'transactions_history',
      'path' => $module_path.'/templates',
    ),	
	'booking_history' => array(
      'template' => 'booking_history',
      'path' => $module_path.'/templates',
    ),
	'income_details' => array(
      'template' => 'income_details',
      'path' => $module_path.'/templates',
    ),
	'results' => array(
      'template' => 'results',
      'path' => $module_path.'/templates',
    ),	
	'experience_listing_details' => array(
      'template' => 'experience_listing_details',
      'path' => $module_path.'/templates',
    ),	
  );
}
function hotels_listing()
{
	menu_rebuild();
	return theme('hotels_listing');
}

function experience_listing() {
    $listings = array();
    unset($_SESSION['listing_id']);
    unset($_SESSION['product_id']);
    unset($_SESSION['postedData']);
    unset($_SESSION['participants']);
    unset($_SESSION['booking-on']);
    unset($_SESSION['booking-on_time']);
    unset($_SESSION['additional-services']);
    unset($_SESSION['additional-services-amount']);
    unset($_SESSION['Security']);
    unset($_SESSION['total_amount']);
    unset($_SESSION['duration']);
    unset($_SESSION['sub_total']);
    unset($_SESSION['discount']);

    $filter = $homeSearch = array();
    $type = '';
    global $user;
    if (isset($_POST["action"]) && $_POST["action"] == "filter") {
        $filter = $_POST;
    } else if (isset($_POST["action"]) && $_POST["action"] == "search") {
        $prepAddr = str_replace(' ', '+', $_POST["place"]);
        
        $geocode = file_get_contents('http://maps.google.com/maps/api/geocode/json?address=' . $prepAddr . '&sensor=false');

        $output = json_decode($geocode);
        $lat = $output->results[0]->geometry->location->lat;
        $homeSearch['lat'] = $lat;
        $long = $output->results[0]->geometry->location->lng;
        $homeSearch['long'] = $long;
        $city = $state_short = $country = $address = $state_long = '';
        foreach ($output->results[0]->address_components as $addressC) {
            if ($addressC->types[0] == "administrative_area_level_2") {
                $city = $addressC->long_name;
                $homeSearch['city'] = $city;
            } else if ($addressC->types[0] == "administrative_area_level_1") {
                $state_short = $addressC->short_name;
                $state_long = $addressC->long_name;
                $homeSearch['state_short'] = $state_short;
                $homeSearch['state_long'] = $state_long;
            } else if ($addressC->types[0] == "country") {
                $country = $addressC->long_name;
                $homeSearch['country'] = $country;
            } else if ($addressC->types[0] == "sublocality_level_1") {
                $address = $addressC->long_name;
                $homeSearch['address'] = $address;
            } else if ($addressC->types[0] == "continent") {
                $query = db_select('gbl_country_list', 'cl')
                        ->fields('cl', array('country_name'))
                        ->condition('continent', $addressC->long_name, '=');
                $result = $query->execute();
                while ($res = $result->fetchAssoc()) {
                    $countriesArray[] = $res['country_name'];
                }
                $homeSearch['continent'] = $addressC->long_name;
            }
        }
        $filter = $_POST;
        $homeSearch['search'] = $_POST;
    }
    
    
//    echo "<pre>";
//    print_r($filter);
//    die;

    if (isset($_POST['type'])) {
        $type = $_POST['type'];
    }

    $listings = getAllListings($filter, $type, $user->uid, $homeSearch, $countriesArray);
    $listingCount = getAllListingsCount($filter, $type, $user->uid, $homeSearch, $countriesArray);

//        echo "<pre>";
//        print_r($listings);
//        die;
    return theme('experience_listing', array('listings' => $listings, 'listingCount' => $listingCount));
}

function experience_listing_search_form($form, &$form_state){
	$experienceType=getExperienceType();
	$experienceCategory=getExperienceCategory();
	  $form['product_details']['type'] = array(
		'#type' => 'select',
/* 		'#title' => t('Experience Type'), */
		'#default_value' => isset($values['type']) ? $values['type'] : 0,
		  '#attributes' => array(
			'class' => array('form-control'),
		  ),
		'#options'=>$experienceType,
		'#required' => TRUE
	  );
	$form['product_details']['experiencehtml'] = array(
	 '#type' => 'markup',
	 '#markup' => '<h3>'.t('About your Experience').'</h3>',
	);
	  $form['product_details']['category'] = array(
		'#type' => 'select',
/* 		'#title' => t('Experience category'), */
		'#default_value' => isset($values['category']) ? $values['category'] :0,
		 '#attributes' => array(
			'class' => array('form-control'),
		  ),
		'#options'=>$experienceCategory,
		'#required' => TRUE
	  );

	return $form;
}

function experience_listing_view(){
$listId=arg(2);

if($listId=="" || (is_numeric($listId)==false))
{
drupal_not_found();
}
unset($_SESSION['listing_id']);
unset($_SESSION['product_id']);
unset($_SESSION['postedData']);
unset($_SESSION['participants']);
unset($_SESSION['booking-on']);
unset($_SESSION['booking-on_time']);
unset($_SESSION['additional-services']);
unset($_SESSION['additional-services-amount']);
unset($_SESSION['Security']);
unset($_SESSION['total_amount']);
unset($_SESSION['duration']);
unset($_SESSION['sub_total']);
unset($_SESSION['discount']);

	$reviews = getListingReviews(arg(2));
	$SuperAverage = getListingReviewsSuperAverage(arg(2));
	$SuperAverage1 = getListingReviewsSuperAverage(arg(2));
	$reviewsCount = getListingReviewsCount(arg(2));
	$reviewsAverage = getListingReviewsAverage(arg(2));
	$photos = getPhotosData(arg(2));
	$OverviewData=getOverviewData(arg(2));
	if(empty($OverviewData))
	{
	drupal_not_found();
	}
	
	$userReviewsCount=getUserReviewsCount($OverviewData["uid"]);
	$amentiesdata=getAmentiesByproduct(arg(2));
	$amentiesdata = unserialize($amentiesdata["value1"]);
	$locationDetail=getListingData(arg(2));
	$pricingData = getPricingData(arg(2));
	$basePrice = getBasePrice(arg(2));
	$calendarDetail=getSchedulingData(arg(2));
	$scheduleSessionData=getScheduleSessionData(arg(2));
	$extras = getProductExtraData(arg(2));
	$rulesDetail=getRulesDetails(arg(2));
	$rulesDetail=unserialize($rulesDetail["value1"]);
	$nearPlaces = findNearByPlaces($OverviewData);
	$experienceType = getExperienceListingTypeById($OverviewData['experience_type']);
/*    	echo "<pre>";
	print_r($rulesDetail); die; */
	return theme('experience_listing_view', array('scheduleSessionData'=>$scheduleSessionData,'basePrice'=>$basePrice,'SuperAverage1'=>$SuperAverage1,'SuperAverage'=>$SuperAverage,'reviewsCount'=>$reviewsCount,'userReviewsCount'=>$userReviewsCount,'reviewsAverage'=>$reviewsAverage,'reviews'=>$reviews,'nearPlaces'=>$nearPlaces,'experienceType'=>$experienceType,'photos'=>$photos,'OverviewData'=>$OverviewData,'amentiesdata'=>$amentiesdata,'locationDetail'=>$locationDetail,'pricingData'=>$pricingData,'calendarDetail'=>$calendarDetail,'extras'=>$extras,'rulesDetail'=>$rulesDetail));
}


function findNearByPlaces($data = array()){

	$center_lat = $data["latitude"];
	$center_lng = $data["longitude"];
	
	$radius = 10;

	$query = sprintf("SELECT eid,title,address1, latitude, longitude, city, ( 3959 * acos( cos( radians('%s') ) * cos( radians( latitude ) ) * cos( radians( longitude ) - radians('%s') ) + sin( radians('%s') ) * sin( radians( latitude ) ) ) ) AS distance FROM gbl_experience_list HAVING distance < '%s' ORDER BY distance LIMIT 0 , 20",
	mysql_real_escape_string($center_lat),
	mysql_real_escape_string($center_lng),
	mysql_real_escape_string($center_lat),
	mysql_real_escape_string($radius));
	
	$result = db_query($query);
	
	$records = array();
	foreach($result as $places){
		$records[] = $places;
	}
	
	return $records;
}

function getListingReviews($eid = "",$uid=null){
 	$reviews = array();
	$query = db_select('gbl_listing_reviews','r')
			->fields('r',array('listing_id','uid','created','comments'))
			->condition('listing_id',$eid);
	if($uid!="")
    {
	$query->condition('uid',$uid,'=');
    }
	
	$query->range(0,2);
	$result=$query->execute();
	while($data = $result->fetchAssoc()){
		$reviews[] = $data;
	} 
	
	return $reviews;
}


function getListingReviewsCount($eid = "",$uid=null){
 	$reviews = array();
	$query = db_select('gbl_listing_reviews','r')
			->fields('r',array('listing_id','uid','created','comments'))
			->condition('listing_id',$eid);
	if($uid!="")
    {
	$query->condition('uid',$uid,'=');
    }		
	$result=$query->execute();
	return $result->rowCount();
}

function getListingReviewsAjax(){
	$pageSize = 2;
	global $base_url;
	$page = isset($_POST["page"])?$_POST["page"]:1;
	$listing_id = isset($_POST["listing_id"])?$_POST["listing_id"]:arg(2);
	$limit = ($page - 1)*$pageSize;

	$str = "";
	$query = db_select('gbl_listing_reviews','r')
			->fields('r',array('listing_id','uid','created','comments'))
			->condition('listing_id',$listing_id)
			->range($limit,$pageSize)
			->execute();
	while($data = $query->fetchAssoc()){
		$userDetails = user_load($data["uid"]);
		if($userDetails->field_first_name["und"][0]["value"] != ""){
			$name =  $userDetails->field_first_name["und"][0]["value"]." ".$userDetails->field_last_name["und"][0]["value"];
		}
		else{
			$name =  $userDetails->name;
		}
		
		if($userDetails->picture->fid != ""){
			$file 	= file_load($userDetails->picture->fid);
			$imgpath = $file->uri;
			$src = file_create_url($imgpath);
		}
		else{
			$src = $base_url . drupal_get_path('theme', 'gloobers')."/images/no-profile-male-img.jpg";
		}
		$str .='<div class="blogger-block"><div class="blogger-profile">
			<div class="blogger-dp">
			<img alt="display pic" src="'.$src.'">
			</div>
			<a href="#">'.$name.'</a>
			</div>
			<div class="blog-description">
			<p>'.$data["comments"].'</p> 
			<div class="description-detail">
			<span>'.date("F, Y",strtotime($data["created"])).'</span>
			<a href="javascript:void(0)">+ More</a>                                     
			</div>
			</div></div>
			<script>
			jQuery(document).ready(function(){
				jQuery(".description-detail").each(function() {
					var content = jQuery(this).prev("p").text();
					if(content.length > 300){
						jQuery(this).prev("p").css("height","90px").css("overflow", "hidden"); 
						jQuery(this).addClass("rev-more");
						jQuery(this).children("a").show();
					}
					else{
						jQuery(this).children("a").hide();
					}
				});	
			});
			</script>';
	} 	
	echo $str; die;
}

function getListingReviewsAverage($eid = ""){
	$result = db_query("select AVG(accuracy) as accuracy_avg,AVG(communication) as communication_avg,AVG(cleanliness) as cleanliness_avg,AVG(location) as location_avg,AVG(check_in) as check_in,AVG(value) as value_avg from gbl_listing_reviews where listing_id = ".$eid);
	return $result;	
}

function getListingReviewsSuperAverage($eid = ""){
	$result = db_query("select AVG(average) as average_avg from gbl_listing_reviews where listing_id = ".$eid);
	return $result;	
}

function getUserReviewsCount($uid = ""){
	$query = db_select('gbl_listing_reviews','r')
			->fields('r')
			->condition('uid',$uid)
			->execute();
	return $query->rowCount();
}

function listing_review(){
	$reviewform = drupal_get_form('listing_review_form');
	return theme('listing_review', array('reviewform'=>$reviewform));
}

function listing_review_form($form,$form_state){

$form = array();
 $form['listId'] = array(
'#type' => 'hidden',
'#size' => '30',
'#attributes' => array('class' => 'listid'), 
);
 
$form['comment'] = array(
'#title' => t('Comments'),
'#type' => 'textarea',
'#size' => '30',
"#attributes" => array("required" => "required"),
'#required' => TRUE, 
);

$form['accuracy'] = array(
'#type' => 'hidden',
'#size' => '30',
'#attributes' => array('class' => 'accuracy'),
//'#required' => TRUE,
 
);

$form['communication'] = array(
'#type' => 'hidden',
'#size' => '30',
'#attributes' => array('class' => 'communication'),
 
);

$form['cleanliness'] = array(
'#type' => 'hidden',
'#size' => '30',
'#attributes' => array('class' => 'cleanliness'),
 
);

$form['location'] = array(
'#type' => 'hidden',
'#size' => '30',
'#attributes' => array('class' => 'location'),
 
);

$form['check_in'] = array(
'#type' => 'hidden',
'#size' => '30',
'#attributes' => array('class' => 'check_in'),
 
);

$form['value'] = array(
'#type' => 'hidden',
'#size' => '30',
'#attributes' => array('class' => 'value'),
 
);
  
$form['submit'] = array(
'#type' => 'submit',
'#value' => t('Submit'),
);

/* $form['cancel'] = array(
'#name' => 'cancel',
'#type' => 'button',
'#value' => t('Cancel'),
'#limit_validation_errors' => array(),
"#executes_submit_callback" => FALSE,
'#attributes' => array('onclick' => 'location.href="/'.$lang_name.'/project/'.$projectId.'";'),
); */
return $form;
}


function listing_review_data(){
	$aResponse['error'] = false;
	$aResponse['message'] = '';

	$aResponse['server'] = ''; 
		
	if(isset($_POST['action']))
	{
		if(htmlentities($_POST['action'], ENT_QUOTES, 'UTF-8') == 'rating')
		{
			$id = intval($_POST['idBox']);
			$rate = floatval($_POST['rate']);
			
			// YOUR MYSQL REQUEST HERE or other thing :)
			$success = true;
			// else $success = false;
			
			
			// json datas send to the js file
			if($success)
			{
				$aResponse['message'] = 'Your rate has been successfuly recorded. Thanks for your rate :)';
				
				// ONLY FOR THE DEMO, YOU CAN REMOVE THE CODE UNDER
					$aResponse['server'] .= '<strong>Rate received :</strong> '.$rate.'<br />';
					$aResponse['server'] .= '<strong>ID to update :</strong> '.$id;
				// END ONLY FOR DEMO
				
				echo json_encode($aResponse);
			}
			else
			{
				$aResponse['error'] = true;
				$aResponse['message'] = 'An error occured during the request. Please retry';
				
				// ONLY FOR THE DEMO, YOU CAN REMOVE THE CODE UNDER
					$aResponse['server'] = '<strong>ERROR :</strong> Your error if the request crash !';
				// END ONLY FOR DEMO
				
				
				echo json_encode($aResponse);
			}
		}
		else
		{
			$aResponse['error'] = true;
			$aResponse['message'] = '"action" post data not equal to \'rating\'';
			
			// ONLY FOR THE DEMO, YOU CAN REMOVE THE CODE UNDER
				$aResponse['server'] = '<strong>ERROR :</strong> "action" post data not equal to \'rating\'';
			// END ONLY FOR DEMO
				
			
			echo json_encode($aResponse);
		}
	}
	else
	{
		$aResponse['error'] = true;
		$aResponse['message'] = '$_POST[\'action\'] not found';
		$aResponse['server'] = '<strong>ERROR :</strong> $_POST[\'action\'] not found';
		echo json_encode($aResponse);
	}
}

function listing_review_form_submit($form,$form_state){

	global $user;
	$accuracy=$communication=$cleanliness=$location=$check_in=$value=$average=0.0;
	
    $accuracy=($form_state['values']['accuracy'])?$form_state['values']['accuracy']:0;
	$communication=($form_state['values']['communication'])?$form_state['values']['communication']:0;
	$cleanliness=($form_state['values']['cleanliness'])?$form_state['values']['cleanliness']:0;
	$location=($form_state['values']['location'])?$form_state['values']['location']:0;
	$check_in=($form_state['values']['check_in'])?$form_state['values']['check_in']:0;
	$value=($form_state['values']['value'])?$form_state['values']['value']:0;
	$average = ($accuracy + $communication + $cleanliness + $location + $check_in + $value)/6;
	
	/**********************/
	$eid = $form_state['values']['listId'];
	
	$nid = db_insert('gbl_listing_reviews')
	  ->fields(array(
		'listing_id' => $eid,
		'uid' => $user->uid,
		'comments' => trim($form_state['values']['comment']),
		'accuracy' => $accuracy,
		'cleanliness' => $cleanliness,
		'communication' => $communication,
		'location' => $location,
		'check_in' =>$check_in,
		'value' =>$value,
		'average' => $average
	  ))
	  ->execute();
	  
	if ($nid){
		$result = db_query("select AVG(average) as average_avg from gbl_listing_reviews where listing_id = ".$eid);
		
		foreach($result as $rating){
			$query = db_update('gbl_experience_list')
				  ->fields(array(
					'average_ratings' => round($rating->average_avg, 1)
				  ))
				  ->condition('eid',$eid)
				  ->execute();
		}
		
		drupal_set_message(t('Review data saved successfully.'));
	}
		
}


function getAllListings($filter = array(), $type = '', $uid = '', $homeSearch = array(), $countriesArray = array()) {
    $pageSize = 8;
    $str = '';
    $listings = array();
    global $base_url;
    $filteredListing = array();
    $query = db_select('gbl_experience_list', 'el');
    if (isset($filter["search"])) {
        $query->join('gbl_experience_list', 'el1', 'el1.city = el.city');
    }
    if ($homeSearch['search']) {
        foreach ($homeSearch['search'] as $key => $value) {
            if ($key == "place") {
                if (isset($homeSearch["country"]) || isset($homeSearch["continent"])) {
                    $query->join('gbl_experience_list', 'el1', 'el1.city = el.city');
                }
            }
        }
    }

    $query->join('gbl_pricing', 'pr', 'el.eid = pr.listing_id');
    $query->leftJoin('gbl_experience_category', 'ec', 'ec.cid = el.experience_category');
    $query->join('gbl_experience_type', 'et', 'et.id = el.experience_type');
    $query->leftJoin('gbl_scheduling_sessions', 'sh', 'el.eid = sh.listing_id');
    $query->leftJoin('gbl_listing_packages', 'pk', 'pk.id = el.package_id');
    if ($uid != "" && $type == 'my_wishlist') {
        $query->join('gbl_my_wishlist', 'w', 'el.eid = w.listing_id');
    }
    $query->fields('el', array('eid', 'title', 'latitude', 'longitude', 'city', 'state', 'country', 'average_ratings', 'uid'));
    $query->fields('pr', array('quantity_max', 'price'))
            ->fields('ec', array('category_name'))
            ->fields('et', array('experience_type'))
            ->fields('sh', array('startDate', 'endDate'))
            ->fields('pk', array('price'));
    if ($uid != "" && $type == 'my_wishlist') {
        $query->fields('w', array('in_wishlist'));
    }
    $query->condition('el.visibility_status', 1);
    $query->condition('el.list_status', 1);
    $query->groupBy('el.eid');
    $query->orderBy('pk.price', 'DESC');

    /*  	if(isset($filter["search"])){
      $query->addExpression('COUNT(el.city)','cnumber');
      } */

    if ($uid != "" && $type == 'my_wishlist') {
        $query->orderBy('w.added', 'DESC');
        $query->condition('w.uid', $uid);
        $query->condition('w.in_wishlist', 1);
        $or = db_or()->condition('sh.startDate', date('Y-m-d'), '>=')->isNull('sh.startDate');
        $query->condition($or);
    } else if ($uid != "" && $type == 'my_listing') {
        $query->orderBy('el.created', 'DESC');
        $query->condition('el.uid', $uid);
    } else {
        if (!isset($filter["search"])) {
            $query->orderBy('el.created', 'DESC');
        }
        $or = db_or()->condition('sh.startDate', date('Y-m-d'), '>=')->isNull('sh.startDate');
        $query->condition($or);
    }
    if (empty($filter)) {
        if (arg(1) != '') {
            //$query->condition('et.experience_type',arg(1),'like');
        }
        $query = $query->range(0, $pageSize);
        $result = $query->execute();

        while ($record = $result->fetchAssoc()) {
            $listings[] = $record;
        }
        /* 		echo '<pre>';
          print_r($listings); die; */
        return $listings;
    } else if (!empty($filter) && !isset($filter["offset"]) && !isset($filter["search"])) {
        if (isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && (!isset($filter["typeId"]) || $filter["typeId"] == 'all') && !isset($filter["catID"])) {
            $query->orderBy('el.average_ratings', 'DESC');
            $query->condition('el.average_ratings', $filter["rate"], '<=');
        } else if (!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && (!isset($filter["typeId"]) || $filter["typeId"] == 'all') && !isset($filter["catID"])) {
            $query->orderBy('pr.price', 'ASC');
            $query->condition('pr.price', array($filter["min"], $filter["max"]), 'BETWEEN');
        } else if (!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && (isset($filter["typeId"]) && $filter["typeId"] != 'all') && !isset($filter["catID"])) {
            $query->orderBy('pr.price', 'ASC');
            $query->condition('pr.price', array($filter["min"], $filter["max"]), 'BETWEEN');
            $query->condition('et.id', $filter["typeId"], '=');
        } else if (!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && (isset($filter["typeId"]) && $filter["typeId"] != 'all') && isset($filter["catID"])) {
            $query->orderBy('pr.price', 'ASC');
            $query->condition('pr.price', array($filter["min"], $filter["max"]), 'BETWEEN');
            $query->condition('et.id', $filter["typeId"], '=');
            $query->condition('ec.cid', $filter["catID"], '=');
        } else if (!isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && (isset($filter["typeId"]) && $filter["typeId"] != 'all') && !isset($filter["catID"])) {
            $query->condition('et.id', $filter["typeId"], '=');
        } else if (!isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && (isset($filter["typeId"]) && $filter["typeId"] != 'all') && isset($filter["catID"])) {
            $query->condition('et.id', $filter["typeId"], '=');
            $query->condition('ec.cid', $filter["catID"], '=');
        }
        foreach ($homeSearch['search'] as $key => $value) {
            if ($key == "place") {
                //if ($value != '') {
                    if (isset($homeSearch["city"])) {
                        $query->condition('el.city', $homeSearch["city"], 'like');
                    } else if (isset($homeSearch["state_short"])) {
                        $or = db_or()->condition('el.state', $homeSearch["state_short"], 'like')->condition('el.state', $homeSearch["state_long"], 'like')->condition('el.city', $homeSearch["state_long"], 'like');
                        $query->condition($or);
                    } else if (isset($homeSearch["country"])) {
                        $query->addExpression('COUNT(el.city)', 'cnumber');
                        $query->orderBy('cnumber', 'DESC');
                        $query->condition('el.country', $homeSearch["country"], 'like');
                    } else if (isset($homeSearch["continent"])) {
                        $query->addExpression('COUNT(el.city)', 'cnumber');
                        $query->orderBy('cnumber', 'DESC');
                        $query->condition('el.country', $countriesArray, 'in');
                        $query->where('el1.city = el.city');
                    }
                //}
            }
            if ($key == "type") {
                if ($value != '') {
                    $value = substr($value, 0, (strlen($value) - 2));
                    $value = explode(", ", trim($value));
                    $query->condition('et.experience_type', $value, 'IN');
                }
            }
            if ($key == "when") {
                if ($value != '') {
                    $value = date('Y-m-d', strtotime($value));
                    $dates = array('sh.startDate', 'sh.endRepeatDate');
                    $or = db_or()->condition($value, $dates, 'BETWEEN')->isNull('sh.startDate')->condition('sh.startDate', $value, ' =');
                    $query->condition($or);
                }
            }

            if ($key == "person") {
                if ($value != '') {
                    $or = db_or()->isNull('pr.quantity_max')->condition('pr.quantity_max', $value, '>=');
                    $query->condition($or);
                }
            }
        }
        $query = $query->range(0, $pageSize);
        $result = $query->execute();
        $rKey = 0;
        $listingMapJson;
        while ($record = $result->fetchAssoc()) {
            $listingMapJson[] = $record;
            $basePrice = getBasePrice($record["eid"]);
            $photos = getPhotosData($record["eid"]);
            $userDetails = user_load($record["uid"]);
            $offers = getOffersAndDiscountsData($record["eid"]);
            $wstatus = getWishlistStatus($record["eid"]);
            $starPath = base_path() . drupal_get_path('theme', 'gloobers') . '/images/icons/stars.png';
            $wstatus = isset($wstatus["in_wishlist"]) ? $wstatus["in_wishlist"] : 0;
            $wstyle = '';
            if ($wstatus == 1) {
                $wstyle = "background:url(" . $base_url . "/" . drupal_get_path('theme', 'gloobers') . "/images/heart-ico-red.png";
            }
            if ($userDetails->picture != "") {
                $file = file_load($userDetails->picture->fid);
                $imgpath = $file->uri;
                $style = "user_small";
                $src = image_style_url($style, $imgpath);
            } else {
                $src = $base_url . '/' . drupal_get_path('theme', 'gloobers') . "/images/no-profile-male-img.jpg";
            }



            $str.='<div  class="col-xs-12 col-sm-6 col-md-6 nopadding listing listing_container_head">
                                <div class="block"> 
                                    <div class="flexslider">
                                        <ul class="slides">';
            if (count($photos) > 0) {
                foreach ($photos as $imgKey => $photo) {
                    $photo = unserialize($photo["value1"]);
                    $file = file_load($photo["fid"]);
                    $imgpath = $file->uri;
                    $style = 'listing_slider';
                    
                    //result formap view
                    if($imgKey==0){
                        $listingMapJson[$rKey]['photo'] = image_style_url($style, $imgpath);
                    }
                    
                    $noImage = base_path() . drupal_get_path('theme', 'gloobers') . '/images/img/place1.png';

                    $str.='<li><a href="' . $base_url . '/experience/' . $record["eid"] . '" >
                                                            <img src="' . image_style_url($style, $imgpath) . '" alt="place" onError="this.onerror=null;this.src=' . $noImage . '" />
                                                        </a></li>';
                }
            } else {
                $str.='<li><a href="' . $base_url . '/experience/view/' . $record["eid"] . '" >
                                                    <img src="' . base_path() . drupal_get_path('theme', 'gloobers') . '/images/img/place1.png" alt="place" />
                                                </a></li>';
            }

            $str.='</ul>
                                    </div> <!-- flex ends -->
                                    <div class="listdetail">
                                        <div class="click"><a href="#" class="listicon"><span></span><span></span><span></span></a></div>
                                        <div class="listview">
                                            <ul>';
                                                
                                                $status = getWishlistStatus($record["eid"]);
                                                $styleWishList = (isset($status["in_wishlist"]) && $status["in_wishlist"] == 1)? 'style="border:1px solid #e14776;color:#e14776"' :'style="border:1px solid #FFF;color:#FFF"';
                                                $styleWishListFlag = (isset($status["in_wishlist"]) && $status["in_wishlist"]==1)? '1' :'0';
                                                global $user;
                                                if (!$user->uid) {
                                                  $str.='<li><a href="#" data-toggle="modal" data-target="#login" data-whatever=""><i'.$styleWishList.' class="fa fa-heart"></i>Add to wishlist</a></li>';  
                                                }else{
                                                  $str.='<li><a href="#" class="add_to_wishlist" data-attr="'.$styleWishListFlag.','.$record["eid"].'"><i '.$styleWishList.' class="fa fa-heart"></i>Add to wishlist</a></li>';  
                                                }
                                                /*$str.='<li><a href="#"><i class="fa fa-link"></i>Recommend to a friend</a></li>
                                                <li><a href="#"><i class="fa fa-heart"></i>Add to wishlist</a></li>
                                                <li><a href="#"><i class="fa fa-plus"></i>Add to guide</a></li>
                                                <li><a href="#"><i class="fa fa-eye"></i>View details</a></li>
                                                <li><a href="#"><i class="fa fa-flag-o"></i>Report this listing</a></li>
                                                <li><a href="#"><i class="fa fa-arrows-h"></i>Embed on my website</a></li>';*/
                                                
                                                $str.='<li><a href="#"><i class="fa fa-eye"></i>View details</a></li>
                                            </ul>
                                        </div>
                                    </div>
                                    <div class="tagsec">';
                                    
                if (!empty($offers)) {
                    $flagDiscount   =  false;
                    foreach ($offers as $offer) {


                    $eventDate = $offer['added'];
                    $currentDate = strtotime(date("Y-m-d h:i:s"));

                    $diff = abs(($currentDate) - ($eventDate));
                    $years = floor($diff / (365*60*60*24));
                    $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));
                    $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));


                    // printf("%d years, %d months, %d days\n", $years, $months, $days);
                    //echo "<br/>===============<br/>";

                    if ($offer['offer_type'] == 'Early Birds' && !($flagDiscount)) {

                        $isEarlyBird = false;
                        switch($offer['time_key']){
                            case 'week';
                                if($offer['time_value']>=($months*4)){
                                    $isEarlyBird = true;
                                }
                                break;
                            case 'month';
                                if($offer['time_value']>=$months){
                                    $isEarlyBird = true;
                                }
                                break;
                            case 'day';
                                if($offer['time_value']>=$days){
                                    $isEarlyBird = true;
                                }
                                break;
                        }

                        if($isEarlyBird){
                            $flagDiscount = true;
                            $str.= '<div class="tag early-bird-container-div"> 
                                    <img src="'.$base_url . '/' . drupal_get_path('theme', $GLOBALS['theme']).'/images/bird.png" alt=" ">
                                    <p>Early Birds</p>
                                    </div>';
                        }

                    }if ($offer['offer_type'] == 'Last Minute' && !($flagDiscount)) {

                        //echo "Lat munite"; 
                        $isLastMinute = false;
                        switch($offer['time_key']){
                                case 'day':
                                    if($offer['time_value']>=$days){
                                        $isLastMinute = true;
                                    }
                                    break;
                                case 'hour':
                                    if($offer['time_value']>=($days*24)){
                                        $isLastMinute = true;
                                    }
                                    break;
                            }

                            if($isLastMinute){
                                $flagDiscount = true;
                                $str.= '<div class="tag_last_min last-min-container-div"> 
                                    <img src="'.$base_url . '/' . drupal_get_path('theme', $GLOBALS['theme']).'/images/bird.png" alt=" ">
                                    <p>Last Minute </p>
                                    </div>';
                            }

                    }if($offer['offer_type'] == '24 Hour Offer' && !($flagDiscount)){
                        $str.='<div class="tag_24h 24hours-container-div"> 
                                <img src="'.$base_url . '/' . drupal_get_path('theme', $GLOBALS['theme']).'/images/bird.png" alt=" ">
                                <p>24 Hours</p>
                                </div>';
                    }
                }
            }
            $str.='<div class="price">
                                            <p>$' . $basePrice["price"] . '</p>
                                        </div>
                                    </div>
                                    <div class="review">
                                        <p><span>7</span><br>
                                            reviews</p>
                                        <div class="botarrow"><img src="' . $base_url . '/' . drupal_get_path('theme', $GLOBALS['theme']) . '/images/arrow-cmnt.png" alt=" "></div>
                                    </div>
                                    <div class="clientpic">';

            $userDetails = user_load($record["uid"]);
            if ($userDetails->picture != "") {
                $file = file_load($userDetails->picture->fid);
                $imgpath = $file->uri;
                $str.='<img src="' . file_create_url($imgpath) . '" alt="display pic" />';
            } else {
                $str.='<img src="' . base_path() . drupal_get_path('theme', 'gloobers') . '/images/no-profile-male-img.jpg" alt="display pic" />';
            }
            $str.='</div>
                                </div>
                                <div class="headingsec">
                                    <h2><a href="' . $base_url . '/experience/' . $record["eid"] . '">' . ucwords($record["title"]) . '</a></h2>
                                    <p>' . $record["city"] . ', ' . $record["state"] . '<span>' . $record["experience_type"] . '</span></p>
                                </div>
                            </div>';

            $rKey++;
        }
        $count = getAllListingsCount($filter, $type, $uid, $homeSearch, $countriesArray);
        $filteredListing["count"] = $count;
        $filteredListing["string"] = $str . '<script> jQuery(document).ready(function($){jQuery(".flexslider").flexslider({slideshow: false}); listingClick(); addToWishList(); }); </script>';
        $filteredListing["mapString"] = json_encode($listingMapJson);
        echo json_encode($filteredListing);
        die;
    } else if (!empty($filter) && !isset($filter["offset"]) && isset($filter["search"])) {


        if (isset($filter["city"])) {
            $query->condition('el.city', $filter["city"], 'like');
        } else if (isset($filter["state_short"])) {
            $or = db_or()->condition('el.state', $filter["state_short"], 'like')->condition('el.state', $filter["state_long"], 'like')->condition('el.city', $filter["state_long"], 'like');
            $query->condition($or);
        } else if (isset($filter["country"])) {
            $query->addExpression('COUNT(el.city)', 'cnumber');
            $query->orderBy('cnumber', 'DESC');
            $query->condition('el.country', $filter["country"], 'like');
            $query->where('el1.city = el.city');
        } else if (isset($filter["continent"])) {
            $query->addExpression('COUNT(el.city)', 'cnumber');
            $query->orderBy('cnumber', 'DESC');
            $query->condition('el.country', $countriesArray, 'in');
            $query->where('el1.city = el.city');
        }

        if ($key == "type") {
            if ($value != '') {
                $value = substr($value, 0, (strlen($value) - 2));
                $value = explode(", ", trim($value));
                $query->condition('et.experience_type', $value, 'IN');
            }
        }
        if ($key == "when") {
            if ($value != '') {
                $value = date('Y-m-d', strtotime($value));
                $dates = array('sh.startDate', 'sh.endRepeatDate');
                $or = db_or()->condition($value, $dates, 'BETWEEN')->isNull('sh.startDate')->condition('sh.startDate', $value, ' =');
                $query->condition($or);
            }
        }

        if ($key == "person") {
            if ($value != '') {
                $or = db_or()->isNull('pr.quantity_max')->condition('pr.quantity_max', $value, '>=');
                $query->condition($or);
            }
        }


        $query = $query->range(0, $pageSize);
        $result = $query->execute();

        while ($record = $result->fetchAssoc()) {
            $listings[] = $record;
        }
        /* echo "<pre>";
          print_r($listings); die; */
        return $listings;
    }
    // had removed old else case using nowhere. 03-13-2015
}

function getAllListingsCount($filter=array(),$type='',$uid='',$homeSearch=array(),$countriesArray1=array()){
	$pageSize = 8;
	$str = '';
	$listings = array();
	global $base_url;
	$filteredListing = array();
	$query = db_select('gbl_experience_list', 'el');
 	$query->join('gbl_pricing', 'pr', 'el.eid = pr.listing_id');
	$query->leftJoin('gbl_experience_category', 'ec', 'ec.cid = el.experience_category');
	$query->join('gbl_experience_type', 'et', 'et.id = el.experience_type'); 
	$query->leftJoin('gbl_scheduling_sessions', 'sh', 'el.eid = sh.listing_id'); 
	if($uid != "" && $type=='my_wishlist'){
		$query->join('gbl_my_wishlist', 'w', 'el.eid = w.listing_id'); 
	}
	$query->fields('el',array('eid','title','latitude','longitude','city','state','country','average_ratings','uid'));
	$query->fields('pr',array('quantity_max','price'))
	->fields('ec',array('category_name'))
	->fields('et',array('experience_type'))
	->fields('sh',array('startDate','endDate'));
	if($uid != "" && $type=='my_wishlist'){
		$query->fields('w',array('in_wishlist'));
	}
	$query->condition('el.visibility_status',1);
	$query->condition('el.list_status',1);
	$query->groupBy('el.eid');

	if($uid != "" && $type=='my_wishlist'){
		$query->orderBy('w.added', 'DESC');
		$query->condition('w.uid', $uid);
		$query->condition('w.in_wishlist', 1);
		$or = db_or()->condition('sh.startDate', date('Y-m-d'), '>=')->isNull('sh.startDate');
		$query->condition($or);
	}
	else if($uid != "" && $type=='my_listing'){
		$query->orderBy('el.created', 'DESC');
		$query->condition('el.uid', $uid);
	}
	else{
		$query->orderBy('el.created', 'DESC');
		$or = db_or()->condition('sh.startDate', date('Y-m-d'), '>=')->isNull('sh.startDate');
		$query->condition($or);
	}
	if(empty($filter)){
		$query = $query->range(0,$pageSize);
		$result = $query->execute();

		while($record = $result->fetchAssoc()) {
			$listings[] = $record;
		}
		return $listings; 
	}
	else if(!empty($filter) && !isset($filter["offset"]) && !isset($filter["search"])){
		if(isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && (!isset($filter["typeId"]) || $filter["typeId"] == 'all') && !isset($filter["catID"])){
			$query->orderBy('el.average_ratings', 'DESC');
			$query->condition('el.average_ratings',$filter["rate"],'<=');
		}
		else if(!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && (!isset($filter["typeId"]) || $filter["typeId"] == 'all') && !isset($filter["catID"])){
			$query->orderBy('pr.price', 'ASC');	
			$query->condition('pr.price', array($filter["min"], $filter["max"]), 'BETWEEN');		
		}
		else if(!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && (isset($filter["typeId"]) && $filter["typeId"] != 'all') && !isset($filter["catID"])){
			$query->orderBy('pr.price', 'ASC');
			$query->condition('pr.price', array($filter["min"], $filter["max"]), 'BETWEEN');			
			$query->condition('et.id',$filter["typeId"],'=');
		}
		else if(!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && (isset($filter["typeId"]) && $filter["typeId"] != 'all') && isset($filter["catID"])){
			$query->orderBy('pr.price', 'ASC');
			$query->condition('pr.price', array($filter["min"], $filter["max"]), 'BETWEEN');			
			$query->condition('et.id',$filter["typeId"],'=');
			$query->condition('ec.cid',$filter["catID"],'=');
		}
		else if(!isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && (isset($filter["typeId"]) && $filter["typeId"] != 'all') && !isset($filter["catID"])){
			$query->condition('et.id',$filter["typeId"],'=');
		}
		else if(!isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && (isset($filter["typeId"]) && $filter["typeId"] != 'all') && isset($filter["catID"])){
			$query->condition('et.id',$filter["typeId"],'=');
			$query->condition('ec.cid',$filter["catID"],'=');
		}
		foreach($homeSearch['search'] as $key=>$value){
			if($key == "place"){
				if($value != ''){
					if(isset($homeSearch["city"])){
						$query->condition('el.city',$homeSearch["city"],'like');
					}
					else if(isset($homeSearch["state_short"])){
						$or = db_or()->condition('el.state',$homeSearch["state_short"],'like')->condition('el.state',$homeSearch["state_long"],'like')->condition('el.city',$homeSearch["state_long"],'like');
						$query->condition($or);
					}	
					else if(isset($homeSearch["country"])){
						$query->condition('el.country',$homeSearch["country"],'like');
					}	
					else if(isset($homeSearch["continent"])){
						$query->condition('el.country',$countriesArray1,'in');
					}					
				}
			}
			if($key == "type"){
				if($value != ''){
					$value = substr($value,0,(strlen($value)-2));
					$value = explode(", ",$value);

					$query->condition('et.experience_type', array($value), 'IN');
				}			
			}
 			if($key == "when"){
				if($value != ''){
					$value = date('Y-m-d',strtotime($value));
					$dates = array('sh.startDate','sh.endRepeatDate');
					$or = db_or()->condition($value,$dates, 'BETWEEN')->isNull('sh.startDate')->condition('sh.startDate',$value, ' =');
					$query->condition($or);
				}			
			}

			if($key == "person"){
				if($value != ''){
					$or = db_or()->isNull('pr.quantity_max')->condition('pr.quantity_max',$value, '>=');
					$query->condition($or);
				}			
			} 			
		}
		$result = $query->execute();
		return $result->rowCount();
	}
	else if(!empty($filter) && !isset($filter["offset"]) && isset($filter["search"])){
	
		foreach($filter["search"] as $key=>$value){
			if($key == "place"){
				if($value != ''){
					if(isset($filter["city"])){
						$query->condition('el.city',$filter["city"],'like');
					}
					else if(isset($filter["state_short"])){
						$or = db_or()->condition('el.state',$filter["state_short"],'like')->condition('el.state',$filter["state_long"],'like')->condition('el.city',$filter["state_long"],'like');
						$query->condition($or);
					}	
					else if(isset($filter["country"])){
						$query->condition('el.country',$filter["country"],'like');
					}	
					else if(isset($filter["continent"])){
						$query->condition('el.country',$countriesArray1,'in');
					}						
				}
			}
			if($key == "type"){
				if($value != ''){
					$value = substr($value,0,(strlen($value)-2));
					$value = explode(", ",$value);

					$query->condition('et.experience_type', array($value), 'IN');
				}			
			}
 			if($key == "when"){
				if($value != ''){
					$value = date('Y-m-d',strtotime($value));
					$dates = array('sh.startDate','sh.endRepeatDate');
					$or = db_or()->condition($value,$dates, 'BETWEEN')->isNull('sh.startDate')->condition('sh.startDate',$value, ' =');
					$query->condition($or);
				}			
			}

			if($key == "person"){
				if($value != ''){
					$or = db_or()->isNull('pr.quantity_max')->condition('pr.quantity_max',$value, '>=');
					$query->condition($or);
				}			
			} 			
		}
		$result = $query->execute();

		return $result->rowCount();
	}
	else{
		
		if(isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && (!isset($filter["typeId"]) || $filter["typeId"] == 'all') && !isset($filter["catID"])){
			$query->orderBy('el.average_ratings', 'DESC');
			$query->condition('el.average_ratings',$filter["rate"],'<=');
		}
		else if(!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && (!isset($filter["typeId"]) || $filter["typeId"] == 'all') && !isset($filter["catID"])){
			$query->orderBy('pr.price', 'ASC');
			$query->condition('pr.price', array($filter["min"], $filter["max"]), 'BETWEEN');			
		}
		else if(!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && (isset($filter["typeId"]) && $filter["typeId"] != 'all') && !isset($filter["catID"])){
			$query->orderBy('pr.price', 'ASC');
			$query->condition('pr.price', array($filter["min"], $filter["max"]), 'BETWEEN');			
			$query->condition('et.id',$filter["typeId"],'=');
		}
		else if(!isset($filter["rate"]) && isset($filter["min"]) && isset($filter["max"]) && (isset($filter["typeId"]) && $filter["typeId"] != 'all') && isset($filter["catID"])){
			$query->orderBy('pr.price', 'ASC');
			$query->condition('pr.price', array($filter["min"], $filter["max"]), 'BETWEEN');			
			$query->condition('et.id',$filter["typeId"],'=');
			$query->condition('ec.cid',$filter["catID"],'=');
		}
		else if(!isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && (isset($filter["typeId"]) && $filter["typeId"] != 'all') && !isset($filter["catID"])){
			$query->condition('et.id',$filter["typeId"],'=');
		}
		else if(!isset($filter["rate"]) && !isset($filter["min"]) && !isset($filter["max"]) && (isset($filter["typeId"]) && $filter["typeId"] != 'all') && isset($filter["catID"])){
			$query->condition('et.id',$filter["typeId"],'=');
			$query->condition('ec.cid',$filter["catID"],'=');
		}
		foreach($homeSearch['search'] as $key=>$value){
			if($key == "place"){
				if($value != ''){
					if(isset($homeSearch["city"])){
						$query->condition('el.city',$homeSearch["city"],'like');
					}
					else if(isset($homeSearch["state_short"])){
						$or = db_or()->condition('el.state',$homeSearch["state_short"],'like')->condition('el.state',$homeSearch["state_long"],'like')->condition('el.city',$homeSearch["state_long"],'like');
						$query->condition($or);
					}	
					else if(isset($homeSearch["country"])){
						$query->condition('el.country',$homeSearch["country"],'like');
					}
					else if(isset($homeSearch["continent"])){
						$query->condition('el.country',$countriesArray1,'in');
					}					
				}
			}
			if($key == "type"){
				if($value != ''){
					$value = substr($value,0,(strlen($value)-2));
					$value = explode(", ",$value);

					$query->condition('et.experience_type', array($value), 'IN');
				}			
			}
 			if($key == "when"){
				if($value != ''){
					$value = date('Y-m-d',strtotime($value));
					$dates = array('sh.startDate','sh.endRepeatDate');
					$or = db_or()->condition($value,$dates, 'BETWEEN')->isNull('sh.startDate')->condition('sh.startDate',$value, ' =');
					$query->condition($or);
				}			
			}

			if($key == "person"){
				if($value != ''){
					$or = db_or()->isNull('pr.quantity_max')->condition('pr.quantity_max',$value, '>=');
					$query->condition($or);
				}			
			} 			
		}
		$result = $query->execute();
		return $result->rowCount();
	}
}

function getWishlistStatus($listingId = ""){
	global $user;
	$query = db_select('gbl_my_wishlist','w')
			->fields('w',array('in_wishlist'))
			->condition('listing_id',$listingId)
			->condition('uid',$user->uid)
			->execute();
	return $query->fetchAssoc();
}

function add_wishlist(){
	global $user;
	
	$listingId = isset($_POST["listingId"])?$_POST["listingId"]:'';
	$status = isset($_POST["status"])?$_POST["status"]:'';
	
	if($status == 0){
		$status = 1;
	}
	else{
		$status = 0;
	}
	
	$query = db_select('gbl_my_wishlist','w')
			->fields('w',array('id'))
			->condition('listing_id',$listingId)
			->condition('uid',$user->uid)
			->execute();
	$result = $query->fetchAssoc();	
	if(!empty($result)){
		$nid = db_update('gbl_my_wishlist')
		  ->fields(array(
			'in_wishlist' => $status,
			'modified' => time()
		  ))
		->condition('listing_id',$listingId)
		->condition('uid',$user->uid)
		->execute();	
		if($nid){
			echo $status."-".$listingId; die;
		}		
	}
	else{
		$nid = db_insert('gbl_my_wishlist')
		  ->fields(array(
			'listing_id' => $listingId,
			'uid' => $user->uid,
			'in_wishlist' => $status,
			'added' => time()
		  ))
		->execute();
		if($nid){
			echo $status."-".$listingId; die;
		}
	}
}

function my_wishlist(){
	global $user;
	if(!$user->uid){
		$_SESSION['destination'] = drupal_get_destination();
		drupal_goto('login');
	}
	$filter = array();
	if(isset($_POST["action"]) && $_POST["action"] == "filter"){
		$filter = $_POST;
	}
	$listings = getAllListings($filter,'my_wishlist',$user->uid);
	return theme('wishlist', array('listings'=>$listings));
}

function my_listing(){
	global $user;
	if(!$user->uid){
		$_SESSION['destination'] = drupal_get_destination();
		drupal_goto('login');
	}
	$filter = array();
	if(isset($_POST["action"]) && $_POST["action"] == "filter"){
		$filter = $_POST;
	}
	$listings = getAllListings($filter,'my_listing',$user->uid);
	return theme('my_listing', array('listings'=>$listings));
}

function confirm_booking(){
	$scheduleSessionData=getScheduleSessionData(arg(1));
	return theme('confirm_booking',array('scheduleSessionData'=>$scheduleSessionData));
}

function getBasePrice($eid=""){
	$query = db_select('gbl_pricing','p')
			->fields('p',array('price'))
			->orderBy('price')
			->condition('listing_id',$eid)
			->range(0,1)
			->execute();
	return $query->fetchAssoc();
}

function booking_summary(){
    if(isset($_POST["listing_id"])){
		$_SESSION["listing_id"] = $_POST["listing_id"];
	}
	$listID = $_SESSION['order']['eid'];
	$postedData = $_REQUEST;
	$OverviewData=getOverviewData($listID);
	$pricingData = getPricingData($listID);
	$basePrice = getBasePrice($listID);
	$rulesDetail=getRulesDetails($listID);
	$rulesDetail=unserialize($rulesDetail["value1"]);
	$extras = getProductExtraData($listID);
	//$bookingForm = booking_details_form();
	$bookingForm=drupal_get_form('booking_details_form');
	$scheduleSessionData=getScheduleSessionData($listID);
	$schedulingData=getSchedulingData($listID);
	return theme('booking_summary',array('extras'=>$extras,'schedulingData'=>$schedulingData,'scheduleSessionData'=>$scheduleSessionData,'bookingForm'=>$bookingForm,'postedData'=>$postedData,'OverviewData'=>$OverviewData,'pricingData'=>$pricingData,'basePrice'=>$basePrice,'rulesDetail'=>$rulesDetail));
}
function selectAllTypes($string = '') {
  $matches = array();

  if ($string) {
    $items = array_map('trim', explode(',', $string));
    $last_item = array_pop($items);
    $prefix = implode(', ', $items);

    $result = db_select('gbl_experience_type')->fields('gbl_experience_type', array('experience_type'))->condition('experience_type', '%' . db_like($last_item) . '%', 'LIKE')->range(0, 10)->execute();
    foreach ($result as $type) {
      if (!in_array($type->experience_type, $items)) {
        $value = !empty($prefix) ? $prefix . ', ' . $type->experience_type : $type->experience_type;
        $matches[$value] = check_plain($value);
      }
    }
  }

  drupal_json_output($matches);
}

function experience_homepage_search_form($form,$form_state){
	$form = array();

	$form['destination'] = array(
	'#type' => 'textfield',
	'#size' => '30',
	"#attributes" => array("class" =>array('loc'),'id'=>'destination4','placeholder'=>'Paris, New York, Londre...'),
	);
	
	$form['type'] = array(
	'#type' => 'textfield',
	'#size' => '30',
	'#autocomplete_path' => 'type/autocomplete',
	"#attributes" => array("class" =>array('exp'),'placeholder'=>'Hiking, Sky Dinving...'),
	);
	
	$form['when'] = array(
	'#type' => 'textfield',
	'#size' => '30',
	"#attributes" => array("class" =>array('cal'),'id'=>'destination4','placeholder'=>'When?','id'=>'datepicker'),
	);
	
	$form['participants'] = array(
	'#type' => 'textfield',
	'#size' => '30',
	"#attributes" => array("class" =>array('loc'),'id'=>'destination4','placeholder'=>'Participants'),
	);
	
	$form['search'] = array(
	'#type' => 'submit',
	'#attributes' => array('class'=>array('btn-bg')),
	'#value' => 'Search'
	);

	return $form;
}

function booking_details_form($form,$form_state){

$error = drupal_get_messages();
if(!isset($error['error'])){
	 unset($_SESSION['first_name']);		   
     unset($_SESSION['last_name']);		   
     unset($_SESSION['email']);		   
     unset($_SESSION['company']);		   
     unset($_SESSION['address']);		   
     unset($_SESSION['city']);		   
     unset($_SESSION['state']);		   
     unset($_SESSION['country']);		   
     unset($_SESSION['zipcode']);	   
     unset($_SESSION['phone_number']);	   
     unset($_SESSION['message']);
}
else{
drupal_set_message($error['error'][0],'error');
}
global $user;
	$form = array();
	$overviewData=getOverviewData($_SESSION['listing_id']);
	$countries = getCountryListWithIsoCode();
	$userDetails = user_load($overviewData["uid"]);
    $traveller =user_load($user->uid);	
	$current_year=date("Y");
	$expiration_year=array();
	$form['#attributes'] = array('onsubmit' => 'return validate_booking();' );
	for($i=$current_year;$i<($current_year+20);$i++)
	{
	$expiration_year[$i]=$i;
	}
	$monthCount=array();
	for($i=1;$i<=12;$i++)
	{
	$monthCount[$i]=$i;
	}
	if($userDetails->field_first_name["und"][0]["value"] != ""){
	$name= ucwords($userDetails->field_first_name["und"][0]["value"]." ".$userDetails->field_last_name["und"][0]["value"]);
	}else{
	$name= ucwords($userDetails->name);
	}

	$form['markup-contact-details'] = array(
	'#type' => 'markup',
	'#markup' => '<div class="card-no address-area left-col-payment"><h1 class="gray-bg">Billing Address</h1>',
	
	);
	
	$form['first_name'] = array(
	'#type' => 'textfield',
	'#title' => 'Name',
	'#size' => '30',
	'#required'=>true,
	"#attributes" => array("class" =>array('loc input-col half'),'placeholder'=>'First Name'),
	'#default_value'=>($traveller->field_first_name)?$traveller->field_first_name["und"][0]["value"]:$_SESSION['first_name'],
	'#prefix'=>'<div class="row-form">',
	
	);
	
	$form['last_name'] = array(
	'#type' => 'textfield',
	/* '#title' => 'Last Name', */
	'#size' => '30',
	'#required'=>true,
	'#default_value'=>($traveller->field_last_name)?$traveller->field_last_name["und"][0]["value"]:$_SESSION['last_name'],
	"#attributes" => array("class" =>array('loc input-col half move-right'),'placeholder'=>'Last Name'),
	'#suffix'=>'</div>',
	);
	
	/* $form['phone'] = array(
	'#type' => 'textfield',
	'#title' => 'Phone',
	'#size' => '30',
	"#attributes" => array("class" =>array('loc input-col'),'placeholder'=>'Phone'),
	); */
	
	$form['email'] = array(
	'#type' => 'textfield',
	'#title' => 'Email',
	'#size' => '30',
	'#required'=>true,
	"#attributes" => array("class" =>array('loc input-col'),'placeholder'=>'Email'),
	'#default_value'=>($traveller->mail)?$traveller->mail:$_SESSION['email'],
	'#prefix'=>'<div class="row-form">',
	'#suffix'=>'</div>',
	);
	$form['company'] = array(
	'#type' => 'textfield',
	'#title' => t('Company'),
	'#size' => '30',
	'#default_value'=>$_SESSION['company'],
	"#attributes" => array("class" =>array('loc input-col'),'placeholder'=>'Company'),
	'#prefix'=>'<div class="row-form">',
	'#suffix'=>'</div>',
	);
	
	$form['address'] = array(
	'#type' => 'textfield',
	'#title' => 'Address',
	'#size' => '30',
	'#default_value'=>$_SESSION['address'],
	"#attributes" => array("class" =>array('loc input-col'),'placeholder'=>'Address'),
	'#prefix'=>'<div class="row-form">',
	'#suffix'=>'</div>',
	);

	$form['city'] = array(
	'#type' => 'textfield',
	'#title' => 'City/Town/Suburb',
	'#size' => '30',
	'#default_value'=>$_SESSION['city'],
	'#required'=>true,
	"#attributes" => array("class" =>array('loc input-col'),'placeholder'=>'City/Town/Suburb'),
	'#prefix'=>'<div class="row-form">',
	'#suffix'=>'</div>',
	);

/* 	$countries = getCountryListWithIsoCode(); */
	
	/* $form['country'] = array(
	'#type' => 'select',
	'#title' => 'Country',
	'#options' => $countries,
	'#prefix'=>'<div class="row-form">',
	'#suffix'=>'</div>',

	); */

	$form['state'] = array(
	'#type' => 'textfield',
	'#title' => 'State',
	'#size' => '30',
	//'#required'=>true,
	'#default_value'=>$_SESSION['state'],
	'#prefix'=>'<div class="row-form">',
	'#suffix'=>'</div>',
	"#attributes" => array("class" =>array('loc input-col'),'placeholder'=>'State'),
	);
    $form['country'] = array(
	'#type' => 'select',
	'#title' => t('Country'),
	'#options' => $countries,
	'#default_value'=>$_SESSION['country'],
	'#prefix'=>'<div class="row-form">',
	'#required'=>true,
	'#suffix'=>'</div>',
/* 	"#attributes" => array("class" =>array('loc')), */
	);	
	
	$form['zipcode'] = array(
	'#type' => 'textfield',
	'#title' => 'Postcode/ZIP',
	'#size' => '30',
	'#required'=>true,
	'#default_value'=>$_SESSION['zipcode'],
	'#prefix'=>'<div class="row-form">',
	'#maxlength'=>10,
	"#attributes" => array("class" =>array('loc input-col'),'placeholder'=>'Postcode/ZIP'),
	'#suffix' => '</div><div class="row-form">                            	
								<p>'.$name."  ".'needs to approve your RESERVATION</p>
                            </div>'
	);
	
	$form['message'] = array(
    '#type' => 'textarea',
	'#attributes' => array(
		'class' => array('form-control','input-col'),'placeholder' => t('Message')),
	'#default_value'=>$_SESSION['message'],	
	
    '#title' => t('Enter Your Message to'." ".$name),
	'#prefix'=>'<div class="row-form">',
	'#suffix'=>'</div>'
	
	  );
	$form['phone_number'] = array(
	'#type' => 'textfield',
	'#title' => 'Confirm Phone Number',
	'#size' => '20',
	'#required'=>true,
	'#default_value'=>$_SESSION['phone_number'],
	'#maxlength'=>15,
	"#attributes" => array("class" =>array('loc input-col'),'placeholder'=>'Phone Number'),
	'#prefix'=>'<div class="row-form">',
	'#suffix' => '</div>'
	);  
	$form['markup-payment-details'] = array(
	'#type' => 'markup',
	'#markup' => '</div><div class="card-no address-area left-col-payment"><h1 class="gray-bg">Payment</h1>',
	);

	/* $form['booking-country'] = array(
	'#type' => 'select',
	'#title' => 'Country',
	'#options' => $countries,
 	"#attributes" => array("class" =>array('pay-select')),
     '#prefix'=>'<div class="row-form">',
	'#suffix'=>'</div>',	
	); */
	
	$form['payment_type'] = array(
	'#type' => 'select',
	'#title' => 'Payment Type',
	/* '#options' => array('paypal'=>'PayPal','credit-card'=>'Credit card'), */
	'#options' => array('credit-card'=>'Credit card'),
	 "#attributes" => array("class" =>array('pay-select')),
    '#prefix'=>'<div class="row-form">',
	'#suffix'=>'</div>',	 
	);	
	
	
	$form['credit_card_type'] = array(
	'#type' => 'select',
	'#title' => 'Credit Card Type',
	'#options' => array('visa'=>'Visa','master_card'=>'Master Card','discover'=>'Discover'),
	 "#attributes" => array("class" =>array('pay-select')), 
	 '#prefix'=>'<div class="credit-card-details"><div class="row-form">',
	'#suffix'=>'</div>',
	);	

	$form['credit_card_no'] = array(
	'#type' => 'textfield',
	'#title' => 'Credit Card No.',
	'#size' => '30',
	'#prefix'=>'<div class="row-form">',
	'#suffix'=>'</div>',
	"#attributes" => array("class" =>array('card-no input-col'),'placeholder'=>'Credit Card No.','autocomplete' => 'off'),
	);	

	$form['credit_expiration_month'] = array(
	'#type' => 'select',
	'#prefix' => '<div class="card-exp-month"><div class="row-form">',
	//'#suffix'=>'</div>',
	'#title' => 'Expiration Date',
	'#options' => $monthCount,
	"#attributes" => array("class" =>array('loc','half')),
	);	
	
	
	$form['credit_expiration_year'] = array(
	'#type' => 'select',	
	//'#prefix'=>'<div class="row-form">',
	'#suffix'=>'</div></div>',
	'#options' =>$expiration_year,
	"#attributes" => array("class" =>array('loc','half','move-right')),
	);	
	
	
	$form['credit_varification_no'] = array(
	'#type' => 'textfield',
	'#title' => 'Card Varification No',
	'#size' => '30',
	'#prefix'=>'<div class="row-form">',
	'#suffix'=>'<div class="row-form"><p>You will be redirected to a paypal page. You have to complete the entire process </p></div></div></div>',
	"#attributes" => array("class" =>array('loc input-col'),'placeholder'=>'Card Varification No'),
	);	
	
	$form['terms_checkbox'] = array(
    '#type' => 'checkboxes',
	'#prefix' => '<div class="row-form"><div class="terms-check">',
    //'#title' => t('I hereby agree on Gloobers Terms & Conditions.'),
	 '#options' => array('terms'=>'<p>'.t('I hereby agree on Gloobers Terms & Conditions.').'</p>'),
	'#suffix'=>'</div></div>'
  );
	
	$form['amount'] = array(
	'#type' => 'hidden',
	'#default_value' => isset($_GET['total-amount'])?$_GET['total-amount']:0,
	);
	/*****************************************************************************/
	$form['booking_on'] = array(
	'#type' => 'hidden',
	'#default_value' => isset($_GET['booking-on'])?$_GET['booking-on']:'',
	);
/* 	$form['listId'] = array(
	'#type' => 'hidden',
	'#default_value' => isset($_GET['listing_id'])?$_GET['listing_id']:'',
	); */
	/* $form['security'] = array(
	'#type' => 'hidden',
	'#default_value' => isset($_GET['security-dep'])?$_GET['security-dep']:0,
	); */
	/* $form['additional_amount'] = array(
	'#type' => 'hidden',
	'#default_value' => isset($_GET['additional-services-amount'])?$_GET['additional-services-amount']:0,
	); */
	/* $form['participants'] = array(
	'#type' => 'hidden',
	'#default_value' => isset($_GET['participants'])?serialize($_GET['participants']):0,
	); */
	/***********************************************************************************/

	$form['submit'] = array(
	'#type' => 'submit',
	'#value' => t('PAY NOW'),
	'#size' => '30',
	"#attributes" => array("class" =>array('list-btn','btn-bg','submit-btn')),
	'#prefix'=>'<div class="row-form"><div class="terms-check">',
	'#suffix'=>'</div></div></div>'
	);		
	
	return $form;
	
}



function getCountryListWithIsoCode(){
	$countries = array();
	$query = db_select('gbl_country_list','c')
			->fields('c',array('country_name','iso_code'))
			->execute();
	while($data=$query->fetchAssoc()){
		$countries[$data['iso_code']] = $data['country_name'];
	}
	return $countries;
}

function booking_details_form_submit($form,$form_state){
/* echo "<pre>";
print_r($form_state["values"]);
die; */
 global $user;
 
 $discount=0;
 $overviewData=getOverviewData($_SESSION['listing_id']);
 $provider = user_load($overviewData["uid"]);
  
 /*****************************************************/
 $bilingdetail=array();
 $_SESSION['first_name']=$bilingdetail['first_name']=trim($form_state['values']['first_name']);
 $_SESSION['last_name']=$bilingdetail['last_name']=trim($form_state['values']['last_name']);
 $_SESSION['email']=$bilingdetail['email']=trim($form_state['values']['email']);
 $_SESSION['company']=$bilingdetail['company']=trim($form_state['values']['company']);
 $_SESSION['address']=$bilingdetail['address']=trim($form_state['values']['address']);
 $_SESSION['city'] =$bilingdetail['city']=trim($form_state['values']['city']);
 $_SESSION['state']= $bilingdetail['state']=trim($form_state['values']['state']);
 $_SESSION['country']= $bilingdetail['country']=trim($form_state['values']['country']);
 $_SESSION['zipcode']= $bilingdetail['zipcode']=trim($form_state['values']['zipcode']);
 $_SESSION['phone_number']= $bilingdetail['phone_number']=trim($form_state['values']['phone_number']);
 $_SESSION['message']=$message=trim($form_state['values']['message']);

 if(isset($_SESSION['check-out'])){
	$bilingdetail['check-out-date'] = $_SESSION['check-out'];
 }
 if(isset($_SESSION['check-out-time'])){
	$bilingdetail['check-out-time'] = $_SESSION['check-out-time'];
 }
 if(isset($_SESSION['duration'])){
	$bilingdetail['duration'] = $_SESSION['duration'];
 }
 if(isset($_SESSION['discount'])){
	$discount = $_SESSION['discount'];
 }

 /*****************************************************************/
	$paymentType = urlencode('Sale');				// 'Authorization' or 'Sale'
	$firstName = urlencode($form_state['values']['first_name']);
	$lastName = urlencode($form_state['values']['last_name']);
	$creditCardType = urlencode($form_state['values']['credit_card_type']);
	$creditCardNumber = urlencode($form_state['values']['credit_card_no']);
	$expDateMonth = $form_state['values']['credit_expiration_month'];
	/* $booking_creditcard_country = $form_state['values']['booking-country']; */

	$padDateMonth = urlencode(str_pad($expDateMonth, 2, '0', STR_PAD_LEFT));
	 
	$expDateYear = urlencode($form_state['values']['credit_expiration_year']);
	$cvv2Number = urlencode($form_state['values']['credit_varification_no']);
	$address1 = urlencode($form_state['values']['address']);

	$city = urlencode($form_state['values']['city']);
	$state = urlencode($form_state['values']['state']);
	$zip = urlencode($form_state['values']['zipcode']);
	$country = urlencode($form_state['values']['country']);				// US or other valid country code
	//$amount = urlencode($form_state['values']['amount']);
	
    $amount = urlencode($_SESSION['total_amount']-$discount);
	
	$currencyID = urlencode('USD');							// or other currency ('GBP', 'EUR', 'JPY', 'CAD', 'AUD')
	 
	$nvpStr =	"&PAYMENTACTION=$paymentType&AMT=$amount&CREDITCARDTYPE=$creditCardType&ACCT=$creditCardNumber".
				"&EXPDATE=$padDateMonth$expDateYear&CVV2=$cvv2Number&FIRSTNAME=$firstName&LASTNAME=$lastName".
				"&STREET=$address1&CITY=$city&STATE=$state&ZIP=$zip&COUNTRYCODE=$country&CURRENCYCODE=$currencyID";
	 
	/* echo $nvpStr; die; */
	$httpParsedResponseAr = PPHttpPost('DoDirectPayment', $nvpStr);
	 /* echo "<pre>";
	 print_r($_SESSION);
	 print_r($_GET);
	print_r($httpParsedResponseAr); */ 
	
	if($httpParsedResponseAr['ACK']=='Success' || $httpParsedResponseAr['ACK']=='SUCCESSWITHWARNING')
	{
	$amount=urldecode($httpParsedResponseAr['AMT']);
	$timeStamp=urldecode($httpParsedResponseAr['TIMESTAMP']);
	$currency=urldecode($httpParsedResponseAr['CURRENCYCODE']);
	$transId=urldecode($httpParsedResponseAr['TRANSACTIONID']);
  	$date = date('Y-m-d H:i:s', strtotime ($timeStamp));
    /******************Insert in booking table*******************************************************/ 
	$participantsDetails=unserialize($_SESSION['participants']);
	$total_cost = 0;
	$quantity=0;
	foreach($participantsDetails as $key=>$value)
	{
	$key = explode("-",$key);
	$total_cost = $total_cost+($key[1]*$value);
	$quantity=$quantity+$key[1];
	}
	 /* echo "<pre>";
	print_r($_SESSION);
	//echo date('Y-m-d',$_SESSION['booking-on']);
	die;  */
	
	/* echo "<pre>";
	print_r($_GET);
	die; */
    $listId=$_SESSION['listing_id'];
    $arrival_time=$_SESSION['booking-on_time'];	
	$additional_amount=($_SESSION['additional-services-amount'])?$_SESSION['additional-services-amount']:0;
	$booking_date_from=date('Y-m-d',strtotime($_SESSION['booking-on']));
	$security_deposit=$_SESSION['Security'];
	$subTotal=$_SESSION['sub_total'];
	$grandTotal=$_SESSION['total_amount']-$discount;
	$bookingID = random_string(10);
	$query=db_insert('gbl_booking')
	       ->fields(array('lid'=>$listId,'uid'=>$user->uid,'quantity'=>$quantity,'quantity_details'=>$_SESSION['participants'],'additional_cost'=>$additional_amount,'additional_services'=>($_SESSION["additional-services"])?$_SESSION["additional-services"]:'','total_cost'=>$subTotal,'security'=>$security_deposit,'discount'=>$discount,'grand_total'=>$grandTotal,'arrive_at_date'=>$booking_date_from,'created'=>time(),'booking_status'=>'booked','other_details'=>serialize($bilingdetail),'arrive_at_time'=>$arrival_time,'booking_id'=>$bookingID));
	$result=$query->execute();   
    /****************************Get new id after insert and insert in payment table*******************************/
	if($result)
	{
	$query1=db_insert('gbl_payment')
	       ->fields(array('bid'=>$result,'trans_id'=>$transId,'payment_status'=>'completed','payment_at'=>$date,'amount'=>$amount))
           ->execute();
   
     /********************************Mail Send to provider*****************************************************************************/
		if(!empty($provider->field_first_name))
		{
		$providename=	$provider->field_first_name['und'][0]['value']."  ".$provider->field_last_name['und'][0]['value'];
		}
		else
		{
		$providename=$provider->name;
		}
	    $title	=	'Hello '.ucfirst($providename).',<br/>';
		$body	=	'<p>'.$bilingdetail['first_name']." ".$bilingdetail['last_name'].' has booked your deal - <b>'.$overviewData['title'].'</b></p>
			        <p><b>Guest Name:</b>'.$bilingdetail['first_name']." ".$bilingdetail['last_name'].'</p><p><b>Arrival Date:</b>'.$_SESSION['booking-on'].'</p><p><b>Arrival Time</b>'.$_SESSION['booking-on_time'].'</p><p><b>Amount Paid</b>'.$_SESSION['total_amount'].'</p>'; 
			
                                
		$module			=	'listing';
		$key			=	'message_to_provider_booking_confirmation';
		$to_email 		= 	 trim($provider->mail);
		$subject		=	'Booking Confirmation:'.$overviewData['title'];		
		sendNotificationEmail($module,$key,$to_email,$subject,$title,$body);

     /***********************************Mail send to Traveller*************************************************************************/  	 
	$traveller=user_load($user->uid);
	if(!empty($traveller->field_first_name))
	{
	$travellername=$traveller->field_first_name['und'][0]['value']."  ".$traveller->field_last_name['und'][0]['value'];
	}
	else
	{
	$travellername=$traveller->name;
	}
    $title	=	'Hello '.ucfirst($bilingdetail['first_name']." ".$bilingdetail['last_name']).',<br/>';
 	$body			=	'<p>Your Booking has been confirmed for - <b>'.$overviewData['title'].'</b></p>
			                     <p><b>Guest Name:</b>'.$bilingdetail['first_name']." ".$bilingdetail['last_name'].'</p><p><b>Arrival Date:</b>'.$_SESSION['booking-on'].'</p><p><b>Arrival Time</b>'.$_SESSION['booking-on_time'].'</p><p><b>Amount Paid</b>'.$_SESSION['total_amount'].'</p>';			
                             
	$module			=	'listing';
	$key			=	'message_to_traveller_confirmation';
	$to_email 		= 	 trim($bilingdetail['email']);
	$subject		=	'Booking Confirmation:'.$overviewData['title'];		
	sendNotificationEmail($module,$key,$to_email,$subject,$title,$body);
	/**************************************************************************************/
/* 	 unset($_SESSION['Security']);		   
     unset($_SESSION['listing_id']);		   
     unset($_SESSION['additional-services-amount']);		   
     unset($_SESSION['additional-services']);		   
     unset($_SESSION['total_amount']);		   
     unset($_SESSION['participants']);		   
     unset($_SESSION['booking-on']);		   
     unset($_SESSION['booking-on_time']); */
	 unset($_SESSION['first_name']);		   
     unset($_SESSION['last_name']);		   
     unset($_SESSION['email']);		   
     unset($_SESSION['company']);		   
     unset($_SESSION['address']);		   
     unset($_SESSION['city']);		   
     unset($_SESSION['state']);		   
     unset($_SESSION['country']);		   
     unset($_SESSION['zipcode']);	   
     unset($_SESSION['phone_number']);	   
     unset($_SESSION['message']);
    
	} 
	drupal_goto('booking/success/'.$bookingID);
	}
	else if($httpParsedResponseAr['ACK']=='Failure')
	{
	$errorMessage=urldecode($httpParsedResponseAr['L_LONGMESSAGE0']);
	drupal_set_message($errorMessage,'error');
	//drupal_goto(current_path());
	}
	

}


function PPHttpPost($methodName_, $nvpStr_) {
	$environment = 'sandbox';
 $credentials=getPaypalCredentails();
  if($credentials['api_pass']!="")
{
	// Set up your API credentials, PayPal end point, and API version.
/* 	$API_UserName = urlencode('amar-facilitator_api1.deftsoft.com'); // set your spi username
	$API_Password = urlencode('BL4Y6KT88QKFWWM3'); // set your spi password
	$API_Signature = urlencode('AFcWxV21C7fd0v3bYYYRCpSSRl31A3PORePesfy8F2bEvk6o38EgjSje'); // set your spi Signature */
	$key = pack('H*', "bcb04b7e103a0cd8b54763051cefRuDy55abe029fdebae251d417e2ffb2a00a3");
 
 $ciphertext_dec = base64_decode($credentials['api_pass']);
 $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
 $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);
 $iv_dec = substr($ciphertext_dec, 0, $iv_size);
  $ciphertext_dec = substr($ciphertext_dec, $iv_size);
  $pass = mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key,$ciphertext_dec, MCRYPT_MODE_CBC, $iv_dec);
}
 /**********************************************************/
 
	// Set up your API credentials, PayPal end point, and API version.
	
	$API_UserName = urlencode($credentials['api_name']); // set your spi username
	//$API_Password = urlencode($pass); // set your spi password
	$API_Password = urlencode($credentials['api_pass']);	
	$API_Signature = urlencode($credentials['api_key']); // set your spi Signature
	$API_Endpoint = "https://api-3t.paypal.com/nvp";
	if("sandbox" === $environment || "beta-sandbox" === $environment){
		$API_Endpoint = "https://api-3t.$environment.paypal.com/nvp";
	}
	$version = urlencode('51.0');
 
	// Set the curl parameters.
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $API_Endpoint);
	curl_setopt($ch, CURLOPT_VERBOSE, 1);
 
	// Turn off the server and peer verification (TrustManager Concept).
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
	curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
 
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	curl_setopt($ch, CURLOPT_POST, 1);
 
	// Set the API operation, version, and API signature in the request.
	$nvpreq = "METHOD=$methodName_&VERSION=$version&PWD=$API_Password&USER=$API_UserName&SIGNATURE=$API_Signature$nvpStr_";
 
	// Set the request as a POST FIELD for curl.
	curl_setopt($ch, CURLOPT_POSTFIELDS, $nvpreq);
 
	// Get response from the server.
	$httpResponse = curl_exec($ch);
 
	if(!$httpResponse) {
		exit("$methodName_ failed: ".curl_error($ch).'('.curl_errno($ch).')');
	}
 
	// Extract the response details.
	$httpResponseAr = explode("&", $httpResponse);
 
	$httpParsedResponseAr = array();
	foreach ($httpResponseAr as $i => $value) {
		$tmpAr = explode("=", $value);
		if(sizeof($tmpAr) > 1) {
			$httpParsedResponseAr[$tmpAr[0]] = $tmpAr[1];
		}
	}
 
	if((0 == sizeof($httpParsedResponseAr)) || !array_key_exists('ACK', $httpParsedResponseAr)) {
		exit("Invalid HTTP Response for POST request($nvpreq) to $API_Endpoint.");
	}
 
	return $httpParsedResponseAr;
}

function booking_success(){
	$city = 'Chandigarh';
	return theme('booking_success',array('city'=>$city));
}

function get_session_timings(){
	$cdate = $_POST['cdate'];
	$minuteVariation=0;
	$startAvailTime=$endAvailTime="";
	$timeAvailable=$sessionData=$fixedTime=array();
	$listID = $_POST['listing_id'];
	$schedulingData=getSchedulingData($listID);
	/******************************************************************/
	if($schedulingData['bookingMode']=='INVENTORY')
	{	
//on the basis of listing id check date and time availability
	$result = db_query("SELECT repeatPeriodBy,repeatEvery,startDate,startTime,endDate,endTime,endRepeatDate,reapeatDaysTime FROM `gbl_scheduling_sessions` WHERE  '".$cdate."' between `startDate` AND `endRepeatDate` and listing_id=".$listID);
	foreach($result as $data){
		$sessionData['repeatPeriodBy'] = $data->repeatPeriodBy;
		$sessionData['repeatEvery'] = $data->repeatEvery;
		$reapeatDaysTime = unserialize($data->reapeatDaysTime);
		$startTime=$data->startTime;
		$endTime=$data->endTime;
		if($reapeatDaysTime)
		{
			$weekDay=date('l', strtotime( $cdate));
			$i=0;
			foreach($reapeatDaysTime as $repeat){//get all days on which event is repeating
			$avail[$i]['day']=$repeat['on'];			
				if($weekDay==$avail[$i]['day'])
				{
					$startAvailTime=$avail[$i]['from_time']=($repeat['from'])?$repeat['from']:'';
			        $endAvailTime=$avail[$i]['to_time']=($repeat['to'])?$repeat['to']:'';
				}
            /*******************get time available by day**********************************/    				
			   /* if($sessionData['repeatPeriodBy']=='Minute')
				{
					  while(strtotime($avail[$i]['from_time'])<strtotime($avail[$i]['to_time']))			
					{  
					  $startTime = date('H:i a', strtotime($avail[$i]['from_time']));			
					  array_push($timeAvailable,$startTime);	 
					  $startTime = date('H:i:s', strtotime($avail[$i]['from_time'] . ' + '.$data->repeatEvery.' minute'));					
					  $avail[$i]['from_time']= $startTime; 
					}  
				}
				else if($sessionData['repeatPeriodBy']=='Hourly')
				{	
							 
				 while(strtotime($avail[$i]['from_time'])<strtotime($avail[$i]['to_time']))			
					{  
					  $startTime = date('H:i a', strtotime($avail[$i]['from_time']));			
					  array_push($timeAvailable,$startTime);	 
					  $startTime = date('H:i:s', strtotime($avail[$i]['from_time'] . ' + '.$data->repeatEvery.' hour'));					
					  $avail[$i]['from_time']= $startTime; 
					} 
									
				} */  				
			$i++;
		    }  
			 
		}
	}
   }
    else 
    {
		 if($schedulingData['bookingMode']=='DATE_ENQUIRY')
		 { 
	       if($schedulingData['bookingTimeMode']=='FIXED')
		   {
			   $fixedTime=unserialize($schedulingData['bookingFixedTimes']);
			   
		   }		   
         }
		 
 		
    }		
	/*****************************************************/
	$sessionData['date'] = $cdate;
	$sessionData['startAvailTime']=$startAvailTime;
	$sessionData['endAvailTime']=$endAvailTime;
	$sessionData['fixedTime']=$fixedTime;
	echo json_encode($sessionData);
}

function booking_payment(){
	global $user;
	if(!$user->uid){
		if(isset($_POST['duration'])){
			$_SESSION["durationValue"] = $_POST['duration'];
		}
		$dest = drupal_get_destination();
		unset($_SESSION['destination']);
		$_SESSION['destination']  = $dest["destination"];
		drupal_goto('login', $dest);
	}
	$bookingForm=drupal_get_form('booking_details_form');
	return theme('booking_payment',array('bookingForm'=>$bookingForm));
}

function getSchedulingDataPrice($cdate='',$listID=''){
	$pricingData = '';
	//echo "SELECT pricingData FROM `gbl_scheduling_sessions` WHERE  ('".$cdate."' between `startDate` AND `endRepeatDate` or  `startDate` = '".$cdate."') and listing_id=".$listID; die;
	$result = db_query("SELECT pricingData FROM `gbl_scheduling_sessions` WHERE  ('".$cdate."' between `startDate` AND `endRepeatDate` or  `startDate` = '".$cdate."') and listing_id=".$listID);
	foreach($result as $data){
		$pricingData = $data->pricingData;
	}
	return $pricingData;
}

function get_experience_pricing(){
	$qty = $_POST["qty"];
	$listID = $_POST["listing_id"];
	$pricingData = '';
	$result = db_query("SELECT price,price_group_type FROM `gbl_pricing` WHERE  ('".$qty."' between `min` AND `max` or  `min` = '".$qty."') and listing_id=".$listID);
	foreach($result as $data){
		$pricingData['price'] = $data->price;
		$pricingData['gtype'] = $data->price_group_type;
	}
	echo json_encode($pricingData);
}

function random_string($length) {
    $key = '';
    $keys = array_merge(range(0, 9), range('a', 'z'));

    for ($i = 0; $i < $length; $i++) {
        $key .= $keys[array_rand($keys)];
    }

    return $key;
}
/****************Show Booked deals to provider with details**********************************************************************/
function bookings_details()
{
global $user;
$bookingsCount=0;
$title =$type =$booking_status=$search_filter="";
if(isset($_GET['title']) && $_GET['title'] != ""){
		$title = trim(check_plain($_GET['title']));
	}
if(isset($_GET['type']) && $_GET['type'] != ""){
		$type = trim(check_plain($_GET['type']));
	}
if(isset($_GET['booking_status']) && $_GET['booking_status'] != ""){
		$booking_status = trim(check_plain($_GET['booking_status']));
	}	
if(isset($_GET['search_filter']) && $_GET['search_filter'] != ""){
  $search_filter = trim(check_plain($_GET['search_filter']));
}	
$bookings=getAllBookings($user->uid,$title,$type,$booking_status,$search_filter);
$bookingsCount=getAllBookingsCount($user->uid,$title,$type,$booking_status,$search_filter);
$searchForm=drupal_get_form('search_bookings_details_form');
$output = '';
$bookings = pager_array_splice($bookings, 10);
$output .= theme('pager', array('quantity' => 10));
return theme('bookings_details',array('bookings'=>$bookings,'bookingsCount'=>$bookingsCount,'searchForm'=>$searchForm,'pagination'=>$output));

}
function getAllBookings($userId=null,$title=null,$type=null,$booking_status,$search_filter)
{
$data=array();
$query=db_select('gbl_experience_list','gel');
$query->join('gbl_booking', 'gb', 'gb.lid = gel.eid');
$query->join('gbl_users_meta', 'gum', 'gum.uid = gb.uid');
$query->fields('gel',array('eid','list_type','title','short_description','visibility_status'));
$query->fields('gb');
$query->fields('gum');
$query->condition('gel.uid',$userId);
if($title !="")
	{
	$title1=$title2="";
	/***************************************/
	 $pos=strpos($title," ");
		if($pos>0)
		{
		$titleArr=explode(" ",$title);
		$title=array_filter($titleArr);
		$titleResult=array_values($title);		
			$title1=$titleResult[0];
			$title2=$titleResult[1];
		$exTitle=implode(" ",$title);	
		}
		else
		{	
		$exTitle=$title1=$title;
		$title2=$title;
		}
	
	/*****************************************/

	$query->condition(db_or()->condition('gel.title',"%".db_like($exTitle)."%",'LIKE')->condition('name',"%$title1%",'like')->condition('name',"%$title2%",'like')->condition('mail',"%$exTitle%",'like')->condition('first_name',"%$title1%",'like')->condition('last_name',"%$title2%",'like'));
	}
if($search_filter!="")
{
$query->condition('gel.eid',$search_filter,'=');
}
	
if($type!="")
{
$query->condition('list_type',"%$type%",'like');
}
if($booking_status!="")
{
$query->condition('booking_status',"%$booking_status%",'like');
}
$query->orderBy("gb.created","DESC");

$result=$query->execute();
while($record = $result->fetchAssoc()) {
		$data[] = $record;
	}	
	return $data;         
}
function getAllBookingsCount($userId=null,$title=null,$type=null,$booking_status=null,$search_filter=null)
{
$data=array();
$query=db_select('gbl_experience_list','gel');
$query->join('gbl_booking', 'gb', 'gb.lid = gel.eid');
$query->join('gbl_users_meta', 'gum', 'gum.uid = gb.uid');
$query->fields('gel',array('eid','list_type','title','short_description','visibility_status'));
$query->fields('gb');
$query->fields('gum');
$query->condition('gel.uid',$userId);
if($title !="")
	{
	$title1=$title2="";
	/***************************************/
	 $pos=strpos($title," ");
		if($pos>0)
		{
		$titleArr=explode(" ",$title);
		$title=array_filter($titleArr);
		$titleResult=array_values($title);		
			$title1=$titleResult[0];
			$title2=$titleResult[1];
		$exTitle=implode(" ",$title);	
		}
		else
		{	
		$exTitle=$title1=$title;
		$title2=$title;
		}
	
	/*****************************************/

	$query->condition(db_or()->condition('gel.title',"%".db_like($exTitle)."%",'LIKE')->condition('name',"%$title1%",'like')->condition('name',"%$title2%",'like')->condition('mail',"%$exTitle%",'like')->condition('first_name',"%$title1%",'like')->condition('last_name',"%$title2%",'like'));
	}
if($search_filter!="")
{
$query->condition('gel.eid',$search_filter,'=');
}	
  
if($type!="")
{
$query->condition('list_type',"%$type%",'like');
}
if($booking_status!="")
{
$query->condition('booking_status',"%$booking_status%",'like');
}

$result=$query->execute();
return $result->rowCount();        
}
function search_bookings_details_form($form,&$form_state)
{
global $user;
$form=array();
$bookings=array();
$bookings=getAllListingsByuserId($user->uid);
$form['#method'] = 'get';
$form['search-class']=array(
'#prefix'=>'<div class="listing-search">'
);
$form['type'] = array(
'#title' => t('Filter By List Type'),
'#type' => 'select',
'#options'=>array(''=>'All','experience'=>'Experience listing','vacation'=>'Vacation Rental','hotel'=>'Hotels'),
'#default_value'=>isset($_GET['type'])?$_GET['type']:'',
'#attributes' => array('class' => array('form-control')),
);
$form['search_filter'] = array(
'#title' => t('Search By Deal Title'),
'#type' => 'select',
//'#options'=>$bookings,
/* '#options'=>array('customer'=>'Customer','title'=>'Deal Title'), */
//'#default_value'=>isset($_GET['search_filter'])?$_GET['search_filter']:'',
'#attributes' => array('class' => array('form-control')),
);
$form['booking_status'] = array(
'#title' => t('Filter By Booking Status'),
'#type' => 'select',
'#options'=>array(''=>'All','pending'=>'Pending','completed'=>'Completed','refund_request'=>'Refund Requested','refunded'=>'Refunded','booked'=>'Booked'),
'#default_value'=>isset($_GET['booking_status'])?$_GET['booking_status']:'',
'#attributes' => array('class' => array('form-control')),
);
$form['title'] = array(

'#type' => 'textfield',

'#size' => '30',
'#default_value'=>isset($_GET['title'])?$_GET['title']:'',
'#attributes' => array('placeholder'=>'Search Customer by name,email','class' => array('form-control')),
);
$form['submit'] = array(
'#type' => 'submit',
'#value' => t('Search'),
'#suffix'=>'</div>'
);
return $form;
}

function getExperienceCategoryIdByName($type=''){
	$types = explode(', ',$type);
	$query = db_select('gbl_experience_type','t')
			->fields('t',array('id'))
			->condition('experience_type',$types,'IN')
			->execute();
	$data=$query->fetchAssoc();
	return $data;
}

function update_views_count(){
	$listID = $_POST['listingID'];
	$query = db_select('gbl_listing_points_data','p')
			->fields('p',array('total_views'))
			->condition('listing_id',$listID)
			->execute();
	$data = $query->fetchAssoc();
	if(!empty($data)){
		$nid = db_update('gbl_listing_points_data')
		  ->fields(array(
			'listing_id' => $listID,
			'total_views' => ($data['total_views']+1),
		  ))
		  ->condition('listing_id',$listID)
		  ->execute();	
		echo $nid; die;	
	}
	else{
		$nid = db_insert('gbl_listing_points_data')
		  ->fields(array(
			'listing_id' => $listID,
			'total_views' => 1,
			'total_reviews' => 0,
			'average_ratings' => 0,
		  ))
		  ->execute();	
		echo $nid; die;
	}
}

function getMostlyViewedListings(){
	$pageSize = 3;
	$str = $uid='';
	$listings = array();
	global $base_url;
	$filteredListing = array();
	$query = db_select('gbl_experience_list', 'el');
 	$query->join('gbl_pricing', 'pr', 'el.eid = pr.listing_id');
	$query->leftJoin('gbl_experience_category', 'ec', 'ec.cid = el.experience_category');
	$query->join('gbl_experience_type', 'et', 'et.id = el.experience_type'); 
	$query->leftJoin('gbl_scheduling_sessions', 'sh', 'el.eid = sh.listing_id'); 
	$query->leftJoin('gbl_listing_points_data', 'p', 'el.eid = p.listing_id'); 
	if($uid != "" && $type=='my_wishlist'){
		$query->join('gbl_my_wishlist', 'w', 'el.eid = w.listing_id'); 
	}
	$query->fields('el',array('eid','title','latitude','longitude','city','state','country','average_ratings','uid'));
	$query->fields('pr',array('quantity_max','price'))
	->fields('ec',array('category_name'))
	->fields('et',array('experience_type'))
	->fields('sh',array('startDate','endDate'));
	
	$query->groupBy('el.eid');

	$query->orderBy('p.total_views', 'DESC');
	$or = db_or()->condition('sh.startDate', date('Y-m-d'), '>=')->isNull('sh.startDate');
	$query->condition($or);
	$query = $query->range(0,$pageSize);
	$result = $query->execute();

	while($record = $result->fetchAssoc()) {
		$listings[] = $record;
	}
	return $listings; 
}

function getMinimumListingPrice(){
	$query = db_select('gbl_pricing','p')
			->fields('p',array('price'))
			->orderBy('price')
			->range(0,1)
			->execute();
	return $query->fetchAssoc();
}
function getMaximumListingPrice(){
	$query = db_select('gbl_pricing','p')
			->fields('p',array('price'))
			->orderBy('price','DESC')
			->range(0,1)
			->execute();
	return $query->fetchAssoc();
}

function getOffersAndDiscountsData($listID){
	$offers = array();
	$query = db_select('gbl_offers_and_discount','o')
			->fields('o')
			->condition('listing_id',$listID)
			->execute();
	while($record = $query->fetchAssoc()) {
		$offers[] = $record;
	}
	return $offers; 	
}
/***********************************************************************************************/
function transactions_history()
{
$type=$transaction_status=$title="";
global $user;
$bookingsCount=0;
$bookings=array();
if(isset($_GET['title']) && $_GET['title'] != ""){
		$title = trim(check_plain($_GET['title']));
	}
if(isset($_GET['type']) && $_GET['type'] != ""){
		$type = trim(check_plain($_GET['type']));
	}
if(isset($_GET['booking_status']) && $_GET['booking_status'] != ""){
		$transaction_status = trim(check_plain($_GET['booking_status']));
	}	

$bookings=getAllBookingsTransactions($user->uid,$title,$type,$transaction_status);
$bookingsCount=getAllBookingsTransactionsCount($user->uid,$title,$type,$transaction_status);
$searchForm=drupal_get_form('search_transactions_form');
return theme('transactions_history',array('bookings'=>$bookings,'bookingsCount'=>$bookingsCount,'searchForm'=>$searchForm));
}
//get all transactions history by user added deals
function getAllBookingsTransactions($userId=null,$title=null,$type=null,$transaction_status=null)
{
$bookings=array();
$query=db_select('gbl_experience_list','gel');
$query->join('gbl_booking', 'gb', 'gb.lid = gel.eid');
$query->join('gbl_payment', 'gp', 'gp.bid = gb.id');
$query->join('gbl_users_meta', 'gum', 'gum.uid = gb.uid');
$query->fields('gel',array('title'));
$query->fields('gb',array('id','lid','booking_id'));
$query->fields('gel',array('title'));
$query->fields('gp');
$query->fields('gum');
if($type!="")
{
$query->condition('gel.eid',$type,'=');
}
if($transaction_status!="")
{
$query->condition('gp.payment_status',"%$transaction_status%",'like');
}
if($title!="")
{
$pos=strpos($title," ");
		if($pos>0)
		{
		$titleArr=explode(" ",$title);
		$title=array_filter($titleArr);
		$titleResult=array_values($title);		
			$title1=$titleResult[0];
			$title2=$titleResult[1];
		}
		else
		{	
		$title1=$title;
		$title2=$title;
		}
	/*****************************************/
	
	$query->condition(db_or()->condition('gb.booking_id',"%$title%",'like')->condition('name',"%$title%",'like')->condition('mail',"%$title%",'like')->condition('first_name',"%$title1%",'like')->condition('last_name',"%$title2%",'like'));

}
$query->condition('gel.uid',$userId,'=');
$query->orderBy('gp.payment_at', 'DESC');
$result=$query->execute();
while($data=$result->fetchAssoc())
{
$bookings[]=$data;
}
return $bookings;
}
function getAllBookingsTransactionsCount($userId=null,$title=null,$type=null,$transaction_status=null)
{
$bookings=array();
$query=db_select('gbl_experience_list','gel');
$query->join('gbl_booking', 'gb', 'gb.lid = gel.eid');
$query->join('gbl_payment', 'gp', 'gp.bid = gb.id');
$query->join('gbl_users_meta', 'gum', 'gum.uid = gb.uid');
$query->fields('gel',array('title'));
$query->fields('gb',array('id','lid','booking_id'));
$query->fields('gel',array('title'));
$query->fields('gp');
$query->fields('gum');
$query->condition('gel.uid',$userId,'=');
if($type!="")
{
$query->condition('gel.eid',$type,'=');
}
if($transaction_status!="")
{
$query->condition('gp.payment_status',"%$transaction_status%",'like');
}
if($title!="")
{
$pos=strpos($title," ");
		if($pos>0)
		{
		$titleArr=explode(" ",$title);
		$title=array_filter($titleArr);
		$titleResult=array_values($title);		
			$title1=$titleResult[0];
			$title2=$titleResult[1];
		}
		else
		{	
		$title1=$title;
		$title2=$title;
		}
	/*****************************************/
	
	$query->condition(db_or()->condition('gb.booking_id',"%$title%",'like')->condition('name',"%$title%",'like')->condition('mail',"%$title%",'like')->condition('first_name',"%$title1%",'like')->condition('last_name',"%$title2%",'like'));

}
$query->orderBy('gp.payment_at', 'DESC');
$result=$query->execute();
return $result->rowCount();
}
function search_transactions_form($form,&$form_state)
{
global $user;
$options=getAllListingsByuserId($user->uid);

$form=array();
$form['#method'] = 'get';
$form['search-class']=array(
'#prefix'=>'<div class="listing-search">'
);
$form['type'] = array(
'#title' => t('Filter By Deal title'),
'#type' => 'select',
'#options'=>$options,
'#default_value'=>isset($_GET['type'])?$_GET['type']:'',
'#attributes' => array('onchange' => 'this.form.submit();','class' => array('form-control')),
);

$form['booking_status'] = array(
'#title' => t('Filter By Transactions Status'),
'#type' => 'select',
'#options'=>array(''=>'All','pending'=>'Pending','completed'=>'Completed','cancelled'=>'Cancelled','refunded'=>'Refunded'),
'#default_value'=>isset($_GET['booking_status'])?$_GET['booking_status']:'',
'#attributes' => array('class' => array('form-control')),
);

$form['title'] = array(
/* '#title' => t('Search'), */
'#type' => 'textfield',
/* '#value'=> 'Search', */
'#size' => '30',
'#default_value'=>isset($_GET['title'])?$_GET['title']:'',
'#attributes' => array('placeholder'=>t('Search Transactions by name,email'),'class' => array('form-control')),
);
$form['submit'] = array(
'#type' => 'submit',
'#value' => t('Search'),
'#suffix'=>'</div>'
);
return $form;
}
//get all listings added by userId array of id and title
function getAllListingsByuserId($userId)
{
$data=array();
$data['']=t('Select Deal Title');
$query=db_select('gbl_experience_list','gel')
       ->fields('gel',array('title','eid'))
	   ->condition('uid',$userId);
$result=$query->execute();	   
 while($res=$result->fetchAssoc())
{

$data[$res['eid']]=$res['title'];
}

return $data;      
}
function bookings_history_by_traveller()
{
global $user;
$title=$booking_status=$search_filter="";
$bookingsCount=0;
$cancelForm=drupal_get_form('cancel_request_form');
if(isset($_GET['title']) && $_GET['title'] != ""){
		$title = trim(check_plain($_GET['title']));
	}
if(isset($_GET['booking_status']) && $_GET['booking_status'] != ""){
		$booking_status = trim(check_plain($_GET['booking_status']));
	}	
if(isset($_GET['search_filter']) && $_GET['search_filter'] != ""){
  $search_filter = trim(check_plain($_GET['search_filter']));
}
$bookings=getAllBookedListingHistory($user->uid,$title,$booking_status,$search_filter);
$bookingsCount=getAllBookedListingHistoryCount($user->uid,$title,$booking_status,$search_filter);
$output = '';
$bookings = pager_array_splice($bookings, 10);
$output .= theme('pager', array('quantity' => 10));
$searchForm=drupal_get_form('search_bookings_traveller_form');
return theme('booking_history',array('cancelForm'=>$cancelForm,'bookings'=>$bookings,'bookingsCount'=>$bookingsCount,'searchForm'=>$searchForm,'pagination'=>$output));
}
function getAllBookedListingHistory($userId=null,$title=null,$booking_status=null,$search_filter=null)
{
$booking=array();
$query=db_select('gbl_booking','gb');
$query->join('gbl_experience_list','gel','gb.lid=gel.eid');
$query->fields('gb');
$query->fields('gel',array('title'));
$query->condition('gb.uid',$userId,'=');
if($title !="")
{
$query->condition('gel.title','%'.db_like($title).'%','like');
}
if($booking_status!="")
{

$query->condition('booking_status',"%$booking_status%",'like');
}
if($search_filter!="")
{
$query->where("DATE(FROM_UNIXTIME(gb.created)) = :search_filter",array('search_filter'=>$search_filter));
}
$query->orderBy('gb.created','DESC');
$result=$query->execute();
while($data=$result->fetchAssoc())
{
$booking[]=$data;
}
return $booking;
}
function getAllBookedListingHistoryCount($userId=null,$title=null,$booking_status=null,$search_filter=null)
{
$query=db_select('gbl_booking','gb');
$query->join('gbl_experience_list','gel','gb.lid=gel.eid');
$query->fields('gb');
$query->fields('gel',array('title'));
$query->condition('gb.uid',$userId,'=');
if($title !="")
{
$query->condition('gel.title','%'.db_like($title).'%','like');
}
if($booking_status!="")
{

$query->condition('booking_status',"%$booking_status%",'like');
}
if($search_filter!="")
{
$query->where("DATE(FROM_UNIXTIME(gb.created)) = :search_filter",array('search_filter'=>$search_filter));
}
$result=$query->execute();
return $result->rowCount();
}
function search_bookings_traveller_form($form,&$form_state)
{
$form=array();
$form['#method'] = 'get';
$form['search-class']=array(
'#prefix'=>'<div class="listing-search">'
);
/* $form['type'] = array(
'#title' => t('Filter By List Type'),
'#type' => 'select',
'#options'=>array(''=>'All','experience'=>'Experience listing','vacation'=>'Vacation Rental','hotel'=>'Hotels'),
'#default_value'=>isset($_GET['type'])?$_GET['type']:'',
'#attributes' => array('onchange' => 'this.form.submit();','class' => array('form-control')),
); */

$form['booking_status'] = array(
'#title' => t('Filter By Booking Status'),
'#type' => 'select',
'#options'=>array(''=>'All','pending'=>'Pending','completed'=>'Completed','refund_request'=>'Refund Requested','refunded'=>'Refunded','booked'=>'Booked'),
'#default_value'=>isset($_GET['booking_status'])?$_GET['booking_status']:'',
'#attributes' => array('class' => array('form-control')),
);
$form['search_filter'] = array(
'#title' => t('Search By Booking date'),
'#type' => 'textfield',
'#default_value'=>isset($_GET['search_filter'])?$_GET['search_filter']:'',
'#attributes' => array('class' => array('form-control')),
);
$form['title'] = array(
/* '#title' => t('Search'), */
'#type' => 'textfield',
/* '#value'=> 'Search', */
'#size' => '30',
'#default_value'=>isset($_GET['title'])?$_GET['title']:'',
'#attributes' => array('placeholder'=>'Search Deal by name','class' => array('form-control')),
);
$form['submit'] = array(
'#type' => 'submit',
'#value' => t('Search'),
'#suffix'=>'</div>'
);
return $form;
}
function cancel_request_form($form,&$form_state)
{
$form=array();
$form["bid"]=array(
'#type'=>'hidden',
'#default_value'=>'',
'#attributes'=>array('class'=>array('bid'))
);
$form["lid"]=array(
'#type'=>'hidden',
'#default_value'=>'',
'#attributes'=>array('class'=>array('lid'))
);
$form['cancel_request'] = array(
'#title' => t('Reason for cancellation'),
'#type' => 'textarea',
//'#default_value'=>isset($_GET['search_filter'])?$_GET['search_filter']:'',
'#attributes' => array('class' => array('form-control'),'placeholder'=>t('I got better deal')),
/* '#required'=>true */
);
$form['submit'] = array(
'#type' => 'submit',
'#value' => t('Proceed'),
);
return $form;
}
function cancel_request_form_submit($form,&$form_state)
{
global $user;
$booking=array();
$query12=db_select('gbl_booking','gb')
       ->fields('gb')
	   ->condition('id',check_plain($form_state['values']['bid'],'='));
$result12=$query12->execute();
$booking=$result12->fetchAssoc();	   
     
$comm=getCommisionByuserForBooking($form_state['values']['lid']);
	  if($comm['commission']!="")
		{
		$commission=$comm['commission'];
		}
		else if(variable_get('commission')!="")
		{
		$commission=variable_get('commission');
		}
		else
		{
		$commission="0.0";
		}
    $Currentdatetime=date("Y-m-d H:i:s");
	$arrivalDate = date("Y-m-d",strtotime($booking['arrive_at_date']));
	$arrivalTime=$booking['arrive_at_time'];
	$pos= strpos($arrivalTime,"-");
	if($pos>0)
	{
	$arrivalTime=substr_replace($arrivalTime, '', $pos,-2);
	}
	$time_in_24_hour_format  = date("H:i", strtotime($arrivalTime));
	$arrivaldatetime=date('Y-m-d H:i:s', strtotime($arrivalDate."".$time_in_24_hour_format));
	$refundAmount =((100-$commission)*$booking['grand_total'])/100;
	$rulesDetail=getRulesDetails($form_state['values']['lid']);
	$rulesDetail=unserialize($rulesDetail["value1"]);
    $policyType=$rulesDetail['cancellation_policies_type'];	
	switch($policyType)
				  {
				  case 'Relaxed':
				  $expiredDate=date('Y-m-d H:i:s', strtotime($arrivaldatetime. ' - 14 day'));
				
				  if(strtotime($expiredDate) >= strtotime($Currentdatetime))
				  {	
				  $refundpercent=100; 
				  $totalRefundAmount=$refundAmount;
				  }
				 break;
				  case 'Flexible':
					  $expiredDate=date('Y-m-d H:i:s', strtotime($arrivaldatetime. ' - 14 day'));
					  $expiredDate_4Weeks=date('Y-m-d H:i:s', strtotime($arrivaldatetime. ' - 28 day'));				  
					  if(strtotime($expiredDate) >= strtotime($Currentdatetime))
					  {	
					  $refundpercent=25; 				  
					  $totalRefundAmount=($refundpercent*$refundAmount)/100;
					  }
					  else if(strtotime($expiredDate_4Weeks) >= strtotime($Currentdatetime))
					  {
					  $refundpercent=50;
					  $totalRefundAmount=($refundpercent*$refundAmount)/100;
					  }
				 break;
				  case 'Moderate':
					  $expiredDate_4Weeks=date('Y-m-d H:i:s', strtotime($arrivaldatetime. ' - 28 day'));
					  $refundpercent=50;
					  if(strtotime($expiredDate_4Weeks) >= strtotime($Currentdatetime))
					  {
					  $totalRefundAmount=($refundpercent*$refundAmount)/100;
					  }
				    break;
				  case 'Strict':
					  $expiredDate_8Weeks=date('Y-m-d H:i:s', strtotime($arrivaldatetime. ' - 56 day'));
					  if(strtotime($expiredDate_8Weeks) >= strtotime($Currentdatetime))
					  {
					  $refundpercent=50;
					  $totalRefundAmount=(50*$refundAmount)/100;
					  }
				   break;
				  case 'Super-Strict':
				  $totalRefundAmount=0;
				  $refundpercent=0;
				 
				  break;
				  case 'Custom':
				  if(($rulesDetail['amount_week_select']=='weeks') || ($rulesDetail['amount_week_select']=='months'))
                  {				  
					  if($rulesDetail['amount_week_select']=='weeks')
					  {
					  $weeksCount=$rulesDetail['amount_week_rental']*7;
					  $expiredDate=date('Y-m-d H:i:s', strtotime($arrivaldatetime. ' - '.$weeksCount.' day'));						  				 
					  }
				   else if($rulesDetail['amount_week_select']=='months')
					  {
					  $expiredDate=date('Y-m-d H:i:s', strtotime($arrivaldatetime. ' - '.$rulesDetail['amount_week_rental'].' month'));
					  }
					if(strtotime($expiredDate) >= strtotime($Currentdatetime))
					   {
					   $refundpercent=$rulesDetail['amount_week'];
					   $totalRefundAmount=($refundpercent*$refundAmount)/100;
					   }		  
				  }
				  else if($rulesDetail['amount_day_select']=='days')
				  {
				  $expiredDate=date('Y-m-d H:i:s', strtotime($arrivaldatetime. ' - '.$rulesDetail['amount_day_rental'].' month'));
				  if(strtotime($expiredDate) >= strtotime($Currentdatetime))
				   {
				   $refundpercent=$rulesDetail['amount_day'];
				   $totalRefundAmount=($refundpercent*$refundAmount)/100;
				   }
				  }	
				  break;
				  default:
				  $policyinfo="";
				  $totalRefundAmount=0;
				  break;
				  }
$query=db_update('gbl_booking')
       ->fields(array('booking_status'=>'refund_request'))
	   ->condition('id',trim(check_plain($form_state['values']['bid'])))
	   ->condition('lid',trim(check_plain($form_state['values']['lid'])))
	   ->condition('uid',$user->uid,'=');
$result=$query->execute();
/**************************Insert in refund table*******************************/
$query1=db_insert('gbl_refunds')
      ->fields(array('refund_msg'=>trim(check_plain($form_state["values"]["cancel_request"])),'bid'=>trim(check_plain($form_state['values']['bid'])),'lid'=>trim(check_plain($form_state['values']['lid'])),'refund_status'=>'request','refund_amount'=>$totalRefundAmount,'refund_request_on'=>$Currentdatetime));
$result1=$query1->execute();	  
/************************************************************************************/
if($result1)
{
//mail send

drupal_set_message(t('we have got your booking cancellation request.We will process it shortly'));
drupal_goto('mytrips');
}	   
}

/****************************************************************************************/
function getTotalAmountEarnedByUser($userId)
{
$query=db_select('gbl_experience_list','gel');
$query->join('gbl_users_meta','gum','gum.uid=gel.uid');
$query->join('gbl_booking','gb','gb.lid=gel.eid');
$query->fields('gum',array('uid'));
$query->condition('gum.uid',$userId);
$query->addExpression('SUM(grand_total)', 'grand_profit');	   
$query->addExpression('SUM(refund_amount)', 'refund_total');	   
$query->addExpression('SUM(trans_fees)', 'trans_fees_total');
$result=$query->execute();
return $result->fetchAssoc();
}
function income_details()
{
$listings=manage_listing_data();
$output = '';
$listings = pager_array_splice($listings, 10);
$output .= theme('pager', array('quantity' => 10));
return theme('income_details',array('listings'=>$listings,'pagination'=>$output));
}
//get all listing added by user request by ajax
function getAllAjaxListingsBylistType($listType=null)
{
global  $user;
$listType=$_POST['typeId'];
$data=array();
$query=db_select('gbl_experience_list','gel')
       ->fields('gel',array('title','eid'));
if($listType!="")
{	   
$query->condition('list_type',$listType,'=');
}
$query ->condition('uid',$user->uid);
$result=$query->execute();	   
   while($res=$result->fetchAssoc())
{
$data[$res['eid']]=$res['title'];
} 

//return $data; 

drupal_json_output($data);
exit();      
}
/***********************Get all Listing Added By User *********************************************/
function getAllListingByuser($userId)
{
$listings=array();
$query=db_select('gbl_experience_list','el');
//$query->join('gbl_users_meta', 'gum', 'gum.uid = el.uid');
$query->leftJoin('gbl_scheduling_sessions', 'sh', 'el.eid = sh.listing_id');
$or = db_or()->condition('sh.startDate', date('Y-m-d'), '>=')->isNull('sh.startDate');
$query->condition($or);
$query->condition('el.uid',$userId,'=');
$query->fields('el',array('eid','title','city','state','country','average_ratings','uid','short_description'));
$query->condition('el.visibility_status',1);
$query->condition('el.list_status',1);
$query->range(0,8);
$query->orderBy('created','DESC');
$result=$query->execute();
while($data=$result->fetchAssoc())
{
$listings[]=$data;
}
return $listings;
}
/***********************************************************************************/
function search_listings_form($form,&$form_state)
{	
	$form=array();
	$form['keys'] = array(
    '#type' => 'textfield',
    '#size' => 50,
	'#prefix'=>'<div class="col-xs-12 col-sm-9 col-md-9">',
	'#attributes'=>array( //'onblur' => "if(this.value == '') { this.value = 'Where are you going ?'; }",
	                     //'onfocus'=>"if(this.value  == 'Where are you going ?') { this.value = ''; }",
	                       'class'=>array('form-control '),'placeholder'=>'Where are you going ?',
						   'required'=>'required'),
    //'#required' => TRUE,
	'#suffix'=>'</div>'
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
	'#prefix'=>'<div class="col-xs-12 col-sm-3 col-md-3">',
	'#suffix'=>'</div>'
  );
  return $form;
}

function search_listings_form_submit($form,&$form_state)
{	
	drupal_goto('search-destination/'.$form_state['values']['keys']); 
}

function search_listings_results($keys = null) {
    global $user;
    /* if(!$user->uid){
      $_SESSION['destination'] = drupal_get_destination();
      drupal_goto('login');
      } */
    $filter = array();

    if (arg(1)) {
        $countriesArray = array();
        $prepAddr = str_replace(' ', '+', arg(1));
        $geocode = file_get_contents('http://maps.google.com/maps/api/geocode/json?address=' . $prepAddr . '&sensor=false');

        $output = json_decode($geocode);
        if ($output) {
            $lat = $output->results[0]->geometry->location->lat;
            $filter['lat'] = $lat;
            $long = $output->results[0]->geometry->location->lng;
            $filter['long'] = $long;
            $city = $state_short = $country = $address = $state_long = '';
            foreach ($output->results[0]->address_components as $addressC) {
                if ($addressC->types[0] == "administrative_area_level_2") {
                    $city = $addressC->long_name;
                    $filter['city'] = $city;
                } else if ($addressC->types[0] == "administrative_area_level_1") {
                    $state_short = $addressC->short_name;
                    $state_long = $addressC->long_name;
                    $filter['state_short'] = $state_short;
                    $filter['state_long'] = $state_long;
                } else if ($addressC->types[0] == "country") {
                    $country = $addressC->long_name;
                    $filter['country'] = $country;
                } else if ($addressC->types[0] == "sublocality_level_1") {
                    $address = $addressC->long_name;
                    $filter['address'] = $address;
                } else if ($addressC->types[0] == "continent") {
                    $query = db_select('gbl_country_list', 'cl')
                            ->fields('cl', array('country_name'))
                            ->condition('continent', $addressC->long_name, '=');
                    $result = $query->execute();
                    while ($res = $result->fetchAssoc()) {
                        $countriesArray[] = $res['country_name'];
                    }
                    $filter['continent'] = $addressC->long_name;
                }
            }
        }
        $filter["search"] = arg(1);
    }

    /* echo "<pre>";
      print_r($filter);
      die; */
    $listings = getAllListings($filter, 'my_listing', $user->uid);

    /* echo "<pre>";
      print_r($listings);
      die; */
    $experienceType = getExperienceType();
    return theme('results', array('experienceType' => $experienceType, 'listingResult' => $listings));
}

/********************************26-feb-2015**************************************************/
function experience_listing_details()
{
	$listId=arg(1);
	if(isset($_SESSION['order'])){
		if($_SESSION['order']['eid'] != $listId){
			unset($_SESSION['order']);
			unset($_SESSION['credit_message']);
		}
	}
	if(is_numeric($listId)==false)
	{
	drupal_not_found();
	}
	$reviews = getListingReviews($listId);
	$SuperAverage = getListingReviewsSuperAverage($listId);
	$SuperAverage1 = getListingReviewsSuperAverage($listId);
	$reviewsCount = getListingReviewsCount($listId);
	$reviewsAverage = getListingReviewsAverage($listId);
	$photos = getPhotosData($listId);
	$OverviewData=getOverviewData($listId);
	$userReviewsCount=getUserReviewsCount($OverviewData["uid"]);
	$amentiesdata=getAmentiesByproduct($listId);
	$amentiesdata = unserialize($amentiesdata["value1"]);
	$locationDetail=getListingData($listId);
	$pricingData = getPricingData($listId);
	$basePrice = getBasePrice($listId);
	$calendarDetail=getSchedulingData($listId);
	$scheduleSessionData=getScheduleSessionData($listId);
	$extras = getProductExtraData($listId);
	$rulesDetail=getRulesDetails($listId);
	$rulesDetail=unserialize($rulesDetail["value1"]);
	$nearPlaces = findNearByPlaces($OverviewData);
	$topRankedListing = getTopRankedExperienceListing($listId);
	$topListingAccToPlace=getListingAccToPlace($listId);	
	$topRankedListingCount =getTopRankedExperienceListingCount();
	$experienceType = getExperienceListingTypeById($OverviewData['experience_type']);
	
	
	//Setting session for order 
	$_SESSION['order']['title'] = isset($OverviewData['title']) ? $OverviewData['title'] : '';
	$_SESSION['order']['eid'] = isset($OverviewData['eid']) ? $OverviewData['eid'] : '';
	$_SESSION['order']['listing_type'] = isset($OverviewData['title']) ? $OverviewData['title'] : '';
	$_SESSION['order']['city'] = $OverviewData['city'];
	$_SESSION['order']['country'] = $OverviewData['country'];
	$_SESSION['order']['deposit'] = isset($rulesDetail['security_deposit'])? $rulesDetail['security_deposit']: '';
	
	$photo 	= unserialize($photos[0]['value1']);
	$file 	= file_load($photo["fid"]);
	$_SESSION['order']['imagepath'] = $file->uri;
	
	$experienceType = getExperienceListingTypeById($topRankedListing[0]['experience_type']);
	$_SESSION['order']['experience_type'] = $experienceType['experience_type'];
	
	
	return theme('experience_listing_details',array(
	'photos'=>$photos,
	'OverviewData'=>$OverviewData,
	'rulesDetail'=>$rulesDetail,
	'reviews'=>$reviews,
	'calendarDetail'=>$calendarDetail,
	'amentiesdata'=>$amentiesdata,
	'pricingData'=>$pricingData,
	'topRankedListing'=>$topRankedListing,
	'topRankedListingCount'=>$topRankedListingCount,
	'topListingAccToPlace'=>$topListingAccToPlace,
	'scheduleSessionData'=>$scheduleSessionData,
	//'orderPriceDOM' => getOrderPricingDetails($pricingData,$rulesDetail), 
	'orderPriceDOM' => '', 
	'extras'=>$extras)
	);
}

/*
*@description: Order sumary details for all items like adult , child etc
@return : A complete HTML or JSON
*/
function getOrderPricingDetails(){
	$isAjax = (isset($_POST['isAjax'])) ? $_POST['isAjax'] : 0;
	if($isAjax==1){
		$listId = $_POST['id'];
		$price_type = $_POST['type'];
		$price_option_type = $_POST['subcat'];
		$pricingData = getPricingDataByType($listId,$price_type,$price_option_type);
		$pricingData['calculated_price'] = ($_POST['qty']*$pricingData[0]['price']);
		$_SESSION['order']['gross_price'] = $pricingData['calculated_price'];
		$_SESSION['order']['qty'] = $_POST['qty'];
		$_SESSION['order']['date'] = $_POST['date'];
		$_SESSION['order']['image'] = $_POST['date'];
		
		
		echo  json_encode($pricingData);
		die;
	}
   
}

/*
function getOrderPricingDetails($pricingData=array(),$ruleDetail=array()){
	
	$date = ($_POST['date']) ? $_POST['date'] : '';
	$qty = 	  (isset($_POST['qty'])) ? $_POST['qty'] : 1;
	$isAjax = (isset($_POST['isAjax'])) ? $_POST['isAjax'] : 0;

	$html = '';
	
	//Check if request is ajax based
	if($isAjax==1){
		$listId = $_POST['id'];
		$pricingData = getPricingData($listId);
		$ruleDetail=getRulesDetails($listId);
		$ruleDetail=unserialize($ruleDetail["value1"]);
	}
	
	$totalAmount = 0;
	foreach($pricingData as $pricingItem){
			
			//case is different according to pricing type rule
			$qtyNew=1;;
			switch($pricingItem['price_option_type']){
				case 'adult':
				$qtyNew = $qty;
				break;
				default:
				$qtyNew = 1;
				break;
			}
			
			$html.='<div class="col">
                  <label>'.$qtyNew.' x '.$pricingItem['price_option_type'].'</label>
                  <label class="small">$'.round($qtyNew*$pricingItem['price'],2).'</label>
                </div>';
			
			$totalAmount=$totalAmount+round($qtyNew*$pricingItem['price'],2);
	}
	$totalAmount=$totalAmount+round($qtyNew*$ruleDetail['security_deposit'],2);
	$html.='<div class="col">
			  <label>Deposit</label>
			  <label class="small">$'.round($ruleDetail['security_deposit'],2).'</label>
			</div>
			<div class="col">
			  <label><span>Gross Total</span></label>
			  <label class="small"><span>$'.$totalAmount.'</span></label>
			</div>';
	
	//If ajax then convert all dom to json with success value
	$resultSet;
	if($isAjax==1){
	   $resultSet['success'] = TRUE;
	   $resultSet['html'] = $html;
	   $resultSet = json_encode($resultSet);
	   echo $resultSet;
	}else{
	   $resultSet = $html;
	   return $resultSet;
	}
	die;
}*/

/********************************Get Top Ranked Experience List**************************************************/
function getTopRankedExperienceListing($listId=null)
{
    $listings=array();
	$OverviewData=getOverviewData($listId);
	$userId=$OverviewData['uid'];	
	$query=db_select('gbl_experience_list','el')
	        ->fields('el') 
	        ->condition('el.uid',$userId)
			->orderBy('el.agg_rating', 'DESC');

	$result=$query->execute();
	$count=1;
	while($data=$result->fetchAssoc())
	{
		if($count<4){
			$listings[]=$data;
		}
		$count++;
	}
	return $listings;

}
function getTopRankedExperienceListingCount($listId=null)
{
    $listings=array();
	$OverviewData=getOverviewData($listId);
	$userId=$OverviewData['uid'];	
	$query=db_select('gbl_experience_list','el')
	        ->fields('el') 
	        ->condition('el.uid',$userId)
			->orderBy('el.agg_rating', 'DESC');
	$result=$query->execute();
	return $result->rowCount();

}
/********************************Get Experience List according to place**************************************************/
function getListingAccToPlace($listId=null)
{
    $listings=array();
	$OverviewData=getOverviewData($listId);
	$userId=$OverviewData['uid'];
	$city=$OverviewData['city'];
	$state=$OverviewData['state'];
	$country=$OverviewData['country'];
	$or = db_or()->condition('el.city',$city, 'LIKE')->condition('el.state',$state, 'LIKE')->condition('el.country',$country, 'LIKE');	
	$query=db_select('gbl_experience_list','el')
				->fields('el') 
				->condition($or)
				->orderBy('el.agg_rating', 'DESC');
	$query->range(0,3);
	$result=$query->execute();
	while($data=$result->fetchAssoc())
	{
		
		$listings[]=$data;
	} 
	return $listings;
}

/*****************************************9MArch_2015*****************************/
function booking_summary_form($form, &$form_state){
		$curYear =date('Y'); 
		$years=array();
		for ($i=$curYear;$i <= $curYear+50;$i++) {
			$years[$i]=$i;
		} 
		$month=array();
		for($j=1;$j < 13;$j++){
			if($j<10){
			$month['0'.$j]='0'.$j;
			}else{
			$month[$j]=$j;
			}
		}
		
		$form['booking_summary']['paymenttype'] = array(
			'#type' => 'select',
			'#prefix' => '<div class="col-md-6"><label>Type of Payment</label><span>',
			'#suffix' => '</span></div>',
			'#options' => array(
			  'Visa' => 'Visa',
			  'MasterCard' => 'Master Card',
			  'Amex' => 'American Express',
			  'Discover'=>'Discover'
			)
		
		);
		$form['booking_summary']['creditdata'] = array(
			'#type' => 'textfield',
			'#prefix' => '<div class="col-md-6"><label>Type of Credit Date</label>',
			'#suffix' => '</div>'
		);
		$form['booking_summary']['creditcardno'] = array(
			'#type' => 'textfield',
			"#attributes" => array('class' => array('required')),
			'#prefix' => '<div class="col-md-6"><label>Credit Card Number</label>',
			"#attributes" => array('maxlength'=>'16','class' => array('required')),
			'#suffix' => '</div>',
			'#required'=>true
			
		
		);
		
		$form['booking_summary']['expirationmonth'] = array(
			'#type' => 'select',
			'#prefix' => '<div class="col-md-4"><label>Expiration Date</label><span>',
			'#suffix' => '</span></div>',
			'#options' => $month
		);
		
		
		$form['booking_summary']['expirationyear'] = array(
			'#type' => 'select',
			'#prefix' => '<div class="col-md-4"><span class="topsel">',
			'#suffix' => '</span></div>',
			'#options' => $years
			
		
		);
		$form['booking_summary']['securitycode'] = array(
			'#type' => 'textfield',
			"#attributes" => array('class' => array('required')),
			'#prefix' => '<div class="col-md-4"><label>Security Code</label>',
			'#suffix' => '</div>',
			'#required'=>true
			
		
		);
		$form['booking_summary']['cardholdername'] = array(
			'#type' => 'textfield',
			"#attributes" => array('class' => array('required')),
			'#prefix' => '<div class="col-md-6"><label>Cardholder Name</label>',
			'#suffix' => '</div>',
			'#required'=>true
		);
		
		$form['booking_summary']['companyname'] = array(
			'#type' => 'textfield',
			'#prefix' => '<div class="col-md-6"><label>Company Name</label>',
			'#suffix' => '</div>'
		);
			$form['booking_summary']['firstname'] = array(
			'#type' => 'textfield',
			"#attributes" => array('class' => array('required')),
			'#prefix' => '<div class="col-md-6"><label>First Name</label>',
			'#suffix' => '</div>'
		);
		$form['booking_summary']['lastname'] = array(
			'#type' => 'textfield',
			"#attributes" => array('class' => array('required')),
			'#prefix' => '<div class="col-md-6"><label>Last Name</label>',
			'#suffix' => '</div>'
		);
		$form['booking_summary']['street'] = array(
			'#type' => 'textfield',
			"#attributes" => array('class' => array('required')),
			'#prefix' => '<div class="col-md-6"><label>Street</label>',
			'#suffix' => '</div>'
		);
		$form['booking_summary']['number'] = array(
			'#type' => 'textfield',
			"#attributes" => array('class' => array('required')),
			'#prefix' => '<div class="col-md-6"><label>Number</label>',
			'#suffix' => '</div>'
		);
		$form['booking_summary']['apt'] = array(
			'#type' => 'textfield',
			'#prefix' => '<div class="col-md-6"><label>Apt #</label>',
			'#suffix' => '</div>'
		);
		$form['booking_summary']['city'] = array(
			'#type' => 'textfield',
			"#attributes" => array('class' => array('required')),
			'#prefix' => '<div class="col-md-6"><label>City</label>',
			'#suffix' => '</div>'
		);
		$form['booking_summary']['zip'] = array(
			'#type' => 'textfield',
			"#attributes" => array('class' => array('required')),
			'#prefix' => '<div class="col-md-6"><label>'.t('Zip').'</label>',
			'#suffix' => '</div>'
		);
		$form['booking_summary']['state'] = array(
			'#type' => 'textfield',
			"#attributes" => array('class' => array('required')),
			'#prefix' => '<div class="col-md-6"><label>'.t('State').'</label>',
			'#suffix' => '</div>'
		);
		$query=db_select('gbl_country_list','cl')
					   ->fields('cl',array('country_name'));
		$result=$query->execute();	   
		while($res=$result->fetchAssoc())
		{
			$countriesArray[]=$res['country_name'];
		}
		$countries=array();
		foreach($countriesArray as $key=>$val){
			$countries[$val]=$val;
		}
		
		$form['booking_summary']['country'] = array(
			'#type' => 'select',
			'#prefix' => '<div class="col-md-6"><label>'.t('Country').'</label><span>',
			'#suffix' => '</span></div>',
			'#options' => $countries,
			'#required'=>true
		);
		$form['booking_summary']['message'] = array(
			'#type' => 'textarea'
		);
		$form['booking_summary']['submit'] = array(
			'#type' => 'submit',
			'#value'=> 'Confirm',
			'#attributes' => array(
				'class' => array('btnsend'),
			),
			'#prefix' => '<div class="confirm"><p>Clicking The << CONFIRM >> Buttion You Agree On<br><span><a>Gloobers Terms & Conditions</a></span></p><div class="btnconfirm">',
			'#suffix' => '</div></div>'
		);
	return $form;
}
/*************************10March****************************/
function booking_summary_form_submit($form, &$form_state){
	global $user;				
	/* echo '<pre>';
					print_r($form_state['values']['firstname']);
					die; */

					$form_state['first_name']=urlencode($form_state['values']['firstname']);
					$form_state['last_name']=urlencode($form_state['values']['lastname']);
					$_SESSION['traveller']['firstname']=$form_state['first_name'];
					$_SESSION['traveller']['lastname']=$form_state['last_name'];
					/* $form_state['credit_card_type']=urlencode('Visa');
					$form_state['credit_card_no']=urlencode('4539644852839411');
					$form_state['credit_expiration_month']=urlencode('07');
					$form_state['credit_expiration_year']=urlencode('2021');
					$form_state['credit_varification_no']=urlencode('333'); */
					$form_state['credit_card_type']=urlencode($form_state['values']['paymenttype']);
					$form_state['credit_card_no']=urlencode($form_state['values']['creditcardno']);
					$form_state['credit_expiration_month']=urlencode($form_state['values']['expirationmonth']);
					$form_state['credit_expiration_year']=urlencode($form_state['values']['expirationyear']);
					$form_state['credit_varification_no']=urlencode($form_state['values']['securitycode']);
					
					$form_state['street']=urlencode($form_state['values']['street']);
					$form_state['city']=urlencode($form_state['values']['city']);
					$form_state['state']=urlencode($form_state['values']['state']);
					$form_state['zipcode']=urlencode($form_state['values']['zip']);
					$form_state['country']=urlencode($form_state['values']['country']);
					$paymentType = urlencode('Sale');		// 'Authorization' or 'Sale'
					$firstName = $form_state['first_name'];
					$lastName =$form_state['last_name'];
					$creditCardType = $form_state['credit_card_type'];
					$creditCardNumber = $form_state['credit_card_no'];
					$expDateMonth = $form_state['credit_expiration_month'];

					$padDateMonth = str_pad($expDateMonth, 2, '0', STR_PAD_LEFT);
					$expDateYear = $form_state['credit_expiration_year'];
					$cvv2Number = $form_state['credit_varification_no'];
					$streetcc = $form_state['street'];

					$city = $form_state['city'];
					$state = $form_state['state'];
					$zip = $form_state['zipcode'];
					$country = $form_state['country'];				
					$totalAmount=$_SESSION['order']['gross_price'];
					$disscount=$_SESSION['order']['disscount'];
					$paybleAmount=$_SESSION['order']['gross_price'];
					$currencyID = urlencode('USD');	
					$IPADDRESS=urlencode($_SERVER['REMOTE_ADDR']);
					$DESC=urlencode('Booking payment.');
					$nvpStr =	"&PAYMENTACTION=$paymentType&IPADDRESS=$IPADDRESS&AMT=$paybleAmount&CREDITCARDTYPE=$creditCardType&ACCT=$creditCardNumber".
								"&EXPDATE=$padDateMonth$expDateYear&CVV2=$cvv2Number&FIRSTNAME=$firstName&LASTNAME=$lastName".
								"&STREET=$streetcc&CITY=$city&STATE=$state&ZIP=$zip&COUNTRYCODE=$country&CURRENCYCODE=$currencyID"; 
					
					$httpParsedResponseAr = PPHttpPost('DoDirectPayment', $nvpStr);
				
					//echo "<pre>";Print_r($httpParsedResponseAr);exit;
					if($httpParsedResponseAr['ACK']=='Success' || $httpParsedResponseAr['ACK']=='SuccessWithWarning'){
						
$httpParsedResponseAr['ACK']='completed';
						$timeStamp=urldecode($httpParsedResponseAr['TIMESTAMP']);
						$payment_status=urldecode($httpParsedResponseAr['ACK']);
						$transId=urldecode($httpParsedResponseAr['TRANSACTIONID']);
						$date= date('Y-m-d H:i:s');
					
						$amount=urldecode($httpParsedResponseAr['AMT']);
						$timeStamp=urldecode($httpParsedResponseAr['TIMESTAMP']);
						$currency=urldecode($httpParsedResponseAr['CURRENCYCODE']);
						$transId=urldecode($httpParsedResponseAr['TRANSACTIONID']);
						$date = date('Y-m-d H:i:s', strtotime ($timeStamp));
						/******************Insert in booking table*******************************************************/
						
						$listId=$_SESSION['order']['eid'];
						$arrival_time='11:00';	
						$additional_amount=($_SESSION['additional-services-amount'])?$_SESSION['additional-services-amount']:0;
						$additional_amount='10';
						$booking_date_from=date('Y-m-d',strtotime($_SESSION['order']['date']));
						$security_deposit=$_SESSION['Security'];
						$security_deposit='105';
						$subTotal=$_SESSION['sub_total'];
						$subTotal='11';
						$grandTotal=$_SESSION['total_amount']-$disscount; 
						$grandTotal=$_SESSION['order']['gross_price'];
						$quantity=$_SESSION['order']['qty'];
						$bookingID = random_string(10);
						$partiipants=$_SESSION['participants'];
						$partiipants=serialize('adult,child');
						$bilingdetail='TestData';
						$_SESSION["additional-services"]='aaa';
						$checkkk=array( 'lid'=>$listId,
										'uid'=>$user->uid,
										'quantity'=>$quantity,
										'quantity_details'=>$partiipants,
										'additional_cost'=>$additional_amount,
										'additional_services'=>($_SESSION["additional-services"])?$_SESSION["additional-services"]:'',
										'total_cost'=>$subTotal,
										'security'=>$security_deposit,
										/*'discount'=>$discount,*/
										'grand_total'=>$grandTotal,
										'arrive_at_date'=>$booking_date_from,
										'created'=>time(),
										'booking_status'=>'booked',
										'other_details'=>serialize($bilingdetail),
										'arrive_at_time'=>$arrival_time,
										'booking_id'=>$bookingID
									);
						$query=db_insert('gbl_booking')
									->fields($checkkk);
						$result=$query->execute();  
						
	/****************************Get new id after insert and insert in payment table*******************************/
						if($result)
						{
							$_SESSION['order']['bookingId']=$result;
							$query1=db_insert('gbl_payment')
									->fields(array(
										'bid' => $result,
										'trans_id' => $transId,
									    'payment_status' => $payment_status,
										'payment_at' => $date
									))
									->execute(); 
							unset($_SESSION['order']);
							
						} 
						drupal_goto('booking/confirmation/'.$result);
						
						
					}else{
						echo $httpParsedResponseAr['ACK'];exit;
					}
					
}
function booking_confirmation(){

	global $user;
	$userid=$user->uid;
	$bookingId=arg(2);
	$booking_experienceData=getbookingdata($bookingId);

	if($userid==$booking_experienceData['uid']){
		
		$photos = getPhotosData($booking_experienceData['lid']);
		$rulesDetail=getRulesDetails($booking_experienceData['lid']);
		$rulesDetail=unserialize($rulesDetail["value1"]);
		return theme('booking_confirmation_new',array('rulesDetail'=>$rulesDetail,'bookingData'=>$booking_experienceData,'photos'=>$photos));
	}else{
		drupal_not_found('/');
	}
}
/******************************12MArch************************************/

function mailSendtoProviderTraveller(){
		global $user;
		$overviewData=getOverviewData($_SESSION['order']['eid']);
		$provider = user_load($overviewData["uid"]);
		//echo "<pre>";Print_r($user);exit;
		
	
		/*****Mail Send to provider*****/
		if(!empty($provider->field_first_name))
		{
		$providename=	$provider->field_first_name['und'][0]['value']."  ".$provider->field_last_name['und'][0]['value'];
		}
		else
		{
		$providename=$provider->name;
		}
	    $title	=	'Hello '.ucfirst($providename).',<br/>';
		$body	=	'<p>'.$_SESSION['traveller']['firstname']." ".$_SESSION['traveller']['lastname'].' has booked your deal - <b>'.$_SESSION['order']['title'].'</b></p>
			        <p><b>Guest Name:</b>'.$_SESSION['traveller']['firstname']." ".$_SESSION['traveller']['lastname'].'</p><p><b>Arrival Date:</b>'.$_SESSION['order']['date'].'</p><p><b>Arrival Time</b>'.$_SESSION['order']['date'].'</p><p><b>Amount Paid</b>'.$_SESSION['order']['gross_price'].'</p>'; 
		$module			=	'listing';
		$key			=	'message_to_provider_booking_confirmation';
		$to_email 		= 	 trim($provider->mail);
		$subject		=	'Booking Confirmation:'.$overviewData['title'];		
		sendNotificationEmail($module,$key,$to_email,$subject,$title,$body);
   
	    
		/*****Mail Send to Traveller*****/
		$traveller=user_load($user->uid);
		if(!empty($traveller->field_first_name))
		{
		$travellername=$traveller->field_first_name['und'][0]['value']."  ".$traveller->field_last_name['und'][0]['value'];
		}
		else
		{
		$travellername=$traveller->name;
		}
		$title	=	'Hello '.ucfirst($travellername).',<br/>';
		$body	=	'<p>Your Booking has been confirmed for - <b>'.$_SESSION['order']['title'].'</b></p>
					<p><b>Guest Name:</b>'.$_SESSION['traveller']['firstname']." ".$_SESSION['traveller']['lastname'].'</p><p><b>Arrival Date:</b>'.$_SESSION['order']['date'].'</p><p><b>Arrival Time</b>'.$_SESSION['order']['date'].'</p><p><b>Amount Paid</b>'.$_SESSION['order']['gross_price'].'</p>';			
								 
		$module			=	'listing';
		$key			=	'message_to_traveller_confirmation';
		$to_email 		= 	 trim($traveller->mail);
		$subject		=	'Booking Confirmation:'.$_SESSION['order']['title'];		
		sendNotificationEmail($module,$key,$to_email,$subject,$title,$body);
		
		drupal_goto('booking/confirmation');
		drupal_set_message(t('Mail sent successfully.'));
}

function getbookingdata($bookingId){

	$query= db_select('gbl_booking','bk');
	$query->join('gbl_experience_list','el','bk.lid=el.eid');
	$query->fields('bk')
			->fields('el')
			->condition('bk.id',$bookingId);
	$result = $query->execute();
	$res=$result->fetchAssoc();
	return $res;

}
/**********************16March****************************/
/**
 * Validate Summary Page.
 */
function booking_summary_form_validate($form, &$form_state){
  
  $data = (object)$form_state['values'];
  /* echo "<pre>";Print_r($form['booking_summary']);exit; */
  $CCNo=$data->creditcardno;
 // echo $CCNo;exit;
  $securitycode=$data->securitycode;
  $cardholdername=$data->cardholdername;
  $companyname=$data->companyname;
  $firstname=$data->firstname;
  $lastname=$data->lastname;
  $street=$data->street;
  $number=$data->number;
  $city=$data->city;
  $zip=$data->zip;
  $state=$data->state;
  if(empty($CCNo)){
     form_set_error('Message_err',t('Credit Card number is required'));
      return;
  }else if(empty($securitycode)){
	form_set_error('Message_err',t('Security code is required'));
    return;
  }else if(empty($cardholdername)){
	form_set_error('Message_err',t('Card holder name code is required'));
    return;
  
  }else if(empty($companyname)){
	form_set_error('Message_err',t('Company name code is required'));
    return;
  }
}